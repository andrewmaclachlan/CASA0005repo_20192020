[
["index.html", "CASA0005 Geographic Information Systems and Science Welcome The world of GIS Getting started How to dowload data and files from GitHub Self guided learning Interactive lectures More help Noticed a mistake? Assignment resources Reading list", " CASA0005 Geographic Information Systems and Science Andy MacLachlan and Adam Dennett 2020-02-17 Welcome Welcome to the CASA0005 Geographic Information Systems and Science online pratical handbook. This website is hosted on GitHub and holds all the practical instructions and data. Data used within the practicals is available online, however occasionally websites can undergo maintenance or be inaccessible due to political factors such as government shutdowns. If you need the practical data you can access it from my GitHub repository Practical data is divided into the relevant sessions (e.g. prac1_data), although sometimes i’ll refer to a dataset used within a previous week. The world of GIS Spatial analysis can yield fascinating insights into geographical relationships. However, at times it can be difficult to work with. You will get lots of error messages and have software crash. The academic staff are here to help you work through these practicals but we do not know everything. It’s a good idea to become familar with online sources of help, such as: Stack Exchange https://stackexchange.com/ RStudio community https://community.rstudio.com/ QGIS documemtation https://docs.qgis.org/3.4/en/docs/index.html R documentation https://www.rdocumentation.org/ ArcGIS help pages https://support.esri.com/en Want to see what you can do with spatial analysis…check out this ‘What’s Next’ video produced for the ESRI conference… Getting started One of the issues with GIS is that many of the files we will be working with are quite large. Fortunately in recent years UCL has seriously beefed up the storage available for students. You now get 100GB of free storage, which should be plenty for the work you will be doing this year! The Bartlett faculty has several gigabytes of storage space available on their central servers, so before we get started, we will connect to our N drive to carry out all of our practical work over the coming weeks. How to dowload data and files from GitHub In some of the practicals it will say to download the data from my GitHub. To do so you have a few options. Option 1 will download everything i have used to make the practicals and option 2 will let you download just a spceific folder (e.g. the data folders). Option 1 Go to the online repository page here: https://github.com/andrewmaclachlan/CASA0005repo Click Clone or download, the download as ZIP. This will download the everything i have used to make this website including all the data for the practicals Option 2 Use DownGit Go to: https://minhaskamal.github.io/DownGit/#/home Head over to the GitHub repository: https://github.com/andrewmaclachlan/CASA0005repo Select a folder you wish to download — here i’ll use practical data as the example, click into the folder (prac6_data) and copy the url: https://github.com/andrewmaclachlan/CASA0005repo/tree/master/prac6_data Paste it into DownGit and click Download, once downloaded then unzip the folder. Self guided learning The lectures and practicals of this course only form a part of the learning process. You are expected to undertake wider reading and explore new methods and approaches. We have provided guidance on useful resources throughout the course to use as a starting point but you are encouraged to go beyond our recommedations and fully engage with applied GIS research, methods and visualisation techniques. If you find a practical particularly easy or straightforward then please move on to the next one. Practicals that look at analytical relationships also have extension activities for you to try. Interactive lectures During the lectures we will be using an interative polling and Q&amp;A application called vevox. It’s very simple to use, you can either: Download the app on iOS or Android: http://get.vevox.app Use the web app: https://vevox.app/ The meeting ID we will use is: 186-395-009 More help If you need specific assistance with this course please: Check the Moodle assessment tab for queries relating to assignments / deadlines. There is also an expected assignment timeline and frequently asked questions section within the assessment outline document. Speak to a member of the teaching team in the computer lab sessions Ask a question at the end of a lecture (time permitting) Ask a question on slack under the GIS channel— you should have recevied an invite email from Steve Gray otherwise use this link. The teaching team will monitor this — use the #gis channel for this course. Due to the size of the class we will only reply to messages on slack so all students can see the discussion. If you have a personal matter in relation to completing the course then please speak to or email Andy or Adam. If you are struggling to use R don’t worry…here is some advice from an interview with Hadley Wickham, chief scientist at RStudio It’s easy when you start out programming to get really frustrated and think, “Oh it’s me, I’m really stupid,” or, “I’m not made out to program.” But, that is absolutely not the case. Everyone gets frustrated. I still get frustrated occasionally when writing R code. It’s just a natural part of programming. So, it happens to everyone and gets less and less over time. Don’t blame yourself. Just take a break, do something fun, and then come back and try again later. You can also go through other free resources including: Free RStudio Education resources Codeacademy YaRrr! The Pirate’s Guide to R At the end of every practical there is a link anonymous Google feeback form, let us know if something is unclear and we will go over it in a future session. If after pursuing all these avenues you still need help you can book into our office hours. These meetings are to discuss a geographical concept in relation to the material/assessment or for any personal matters relevant to the completion of the module. These meetings are not to be used for specific technical issues. Problems of this nature should be addressed in the practical sessions. Andy: https://amaclachlan.youcanbook.me/ Adam: https://dr-d-casa.youcanbook.me Noticed a mistake? No one is perfect, if you notice a mistake let us know through the GitHub issues tab Don’t worry if you are unsure about what GitHub is we cover it in the course. Assignment resources Want some tips for resources on your assignment?…. head over to the Assignment resources pages Reading list We link to books and resources throughout each practical and in the Assignment resources pages, but a full reading list for the course is provided here, there is also a link to it over on Moodle. We’ve tried to mostly recommend open source and free books, any others are available from the library. "],
["geographic-information.html", "Chapter 1 Geographic Information 1.1 Learning outcomes 1.2 Recommended listening 1.3 The Basics of Geographic Information 1.4 Data 1.5 Data sources and task 1.6 Summary 1.7 Feedback 1.8 Mac R issues", " Chapter 1 Geographic Information 1.1 Learning outcomes By the end of this practical you should be able to: Describe and explain GIS data formats and databases Source and pre-process spatial data Load and undertaken some basic manipulation of spatial data in: ArcMap, QGIS and R Evaluate the (dis)advantages of each GIS you have used 1.2 Recommended listening Some of these practicals are long, take regular breaks and have a listen to some of our fav tunes each week. Andy Adam… This week, wrap your ears around this piece of liquid gold from Japan’s finest, Makoto. 1.3 The Basics of Geographic Information Geographic data, geospatial data or geographic information is data that identifies the location of features on Earth. There are two main types of data which are used in GIS applications to represent the real world. Vectors that are composed of points, lines and polygons and rasters that are grids of cells with individual values… In the above example the features in the real world (e.g. lake, forest, marsh and grassland) have been represented by points, lines and polygons (vector) or discrete grid cells (raster) of a certain size (e.g. 1 x 1m) specifying land cover type. 1.3.1 Important GIS data formats There are a number of commonly used geographic data formats that store vector and raster data that you will come across during this course and it’s important to understand what they are, how they represent data and how you can use them. 1.3.1.1 Shapefiles Perhaps the most commonly used GIS data format is the shapefile. Shapefiles were developed by ESRI, one of the first and now certainly the largest commercial GIS company in the world. Despite being developed by a commercial company, they are mostly an open format and can be used (read and written) by a host of GIS Software applications. A shapefile is actually a collection of files –– at least three of which are needed for the shapefile to be displayed by GIS software. They are: .shp - the file which contains the feature geometry .shx - an index file which stores the position of the feature IDs in the .shp file .dbf - the file that stores all of the attribute information associated with the coordinates – this might be the name of the shape or some other information associated with the feature .prj - the file which contains all of the coordinate system information (the location of the shape on Earth’s surface). Data can be displayed without a projection, but the .prj file allows software to display the data correctly where data with different projections might be being used On Twitter and want to see the love for shapefiles….have a look at the shapefile account 1.3.1.2 GeoJSON GeoJSON Geospatial Data Interchange format for JavaScript Object Notation is becoming an increasingly popular spatial data format, particularly for web-based mapping as it is based on JavaScript Object Notation. Unlike a shapefile in a GeoJSON, the attributes, boundaries and projection information are all contained in the same file. 1.3.1.3 Shapefile and GeoJSON We’re now going to explore a shapefile (.shp ) and GeoJSON (.geojson) in action. Go to: http://geojson.io/#map=16/51.5247/-0.1339 Using the drawing tools to the right of the map window, create 3 objects: a point, line and a polygon as I have done above. Click on your polygon and colour it red and colour your point green Using the ‘Save’ option at the top of the map, save two copies of your new data – one in .geojson format and one in .shp format Open your two newly saved files in a text editor such as notepad or notepad++. For the shapefile you might have to unzip the folder then open each file individually. What do you notice about the similarities or differences between the two ways that the data are encoded? 1.3.1.4 Raster data Most raster data is now provided in GeoTIFF (.tiff) format, which stands for Geostarionary Earth Orbit Tagged Image File. The GeoTIFF data format was created by NASA and is a standard public domain format. All necesary information to establish the location of the data on Earth’s surface is embedded into the image. This includes: map projection, coordinate system, ellipsoid and datum type. 1.3.1.5 Other data formats Aforementioned data types and formats are likely to be the ones you predominately encounter. However there are several more used within spatial analysis. These include: Vector GML (Geography Markup Language –– gave birth to Keyhold Markup Language (KML)) Raster Band SeQuential (BSQ) - technically a method for encoding data but commonly referred to as BSQ. Hierarchical Data Format (HDF) Arc Grid There are normally valid reasons for storing data in one of these other formats. For example, BSQ are raster data with a separate text header file (.hdr) providing geographic spatial reference information. Earth observation data often monitors the electromagnetic spectrum in bands. Humans see in the visible range of the spectrum and our vision is composed of red, green and blue wavelengths. If we wanted to analyse just the red wavelength the BSQ format would let us read in only that data. In comparison a GeoTIFF might come with all the data ‘packaged’ in one file and when doing analysis over thousands of images would significantly slow things down. That said you can now often find GeoTIFFs separated in a similar format to BSQ and it’s fairly straightforward to convert between raster formats. 1.3.1.6 Geodatabase A geodatabase is a collection of geographic data held within a database. Geodatabases were developed by ESRI to overcome some of the limitations of shapefiles. They come in two main types: Personal (up to 1 TB) and File (limited to 250 - 500 MB), with Personal Geodatabases storing everything in a Microsoft Access database (.mdb) file and File Geodatabases offering more flexibility, storing everything as a series of folders in a file system. In the example below we can see that the FCC_Geodatabase (left hand pane) holds multiple points, lines, polygons, tables and raster layers in the contents tab. 1.3.1.7 GeoPackage A GeoPackage is an open, standards-based, platform-independent, portable, self-describing, compact format for transferring geospatial data. It stores spatial data layers (vector and raster) as a single file, and is based upon an SQLite database, a widely used relational database management system, permitting code based, reproducible and transparent workflows. As it stores data in a single file it is very easy to share, copy or move. 1.3.1.8 SpatiaLite SpatialLite is an open-source library that extends SQLite core. Support is fairly limited and most software that supports SpatiaLite also supports GeoPackage, as they both build upon SQLite. It doesn’t have any clear advantage over GeoPackage, however it is unable to support raster data. 1.3.1.9 PostGIS PostGIS is an opensource database extender for PostrgeSQL. Essentially PostgreSQL is a database and PostGIS is an add on which permits spatial functions. The advantages of using PostGIS over a GeoPackage are that it allows users to access the data at the same time, can handle large data more efficiently and reduces processing time. In this example calculating the number of bars per neighbourhood in Leon, Mexico the processing time reduced from 1.443 seconds (SQLite) to 0.08 seconds in PostGIS. However, data stored in PostGIS is much harder to share, move or copy. 1.3.1.10 What will I use The variety of data formats can see a bit overwhelming. But don’t worry, most of the time you’ll be using shapefiles, GeoPackages or raster data. 1.4 Data The volume of geographic information which is freely available for use in the UK is increasing exponentially and spatially referenced data can often be found in many different places. In this practical we’re going to use data from the London data store — a free and open data-sharing portal provided by the Greater London Authority (GLA), also known as City Hall that is the devolved regional governance body of London. We are going to get spatial data of the London boroughs and join flytipping (the illegal deposit of waste, commonly on road verges) data that is provided as a .csv file. .csv stands for comma-separated values (CSV) — it uses a comma to separate each value. At the end of this document I’ll also run through some common sources of data that will stand you in good stead (be advantageous) for the rest of the course. 1.4.1 File paths In your N drive: create a new folder called GIS and within this a sub folder called wk1. It is up to you how you organise your files. Make sure you change the file paths where appropriate to your own. 1.4.2 Data download Firstly we need to get a spatial outline of the London boroughs. The geographic boundaries that are used in the UK are a complex, often inter-related, but ever changing mass of areas. For anyone new to the UK (or indeed not a trained quantitative geographer), it can be quite a daunting task to attempt to understand all of the boundaries that are in use. Fortunately the Office for National Statistics (ONS) has an online beginners guide to UK geography. If you need more information on the vast array of different UK geographies, go and explore these resources: http://geoportal.statistics.gov.uk/datasets/a-beginners-guide-to-uk-geography-2018-v1-0 https://data.gov.uk/dataset/d7dd9437-20d0-448f-a61b-6e0939dcc642/hierarchical-representation-of-uk-statistical-geographies-december-2017 Let’s download some data.. Spatial Data To get the data go to: https://data.london.gov.uk/ Search for Statistical GIS Boundary Files for London Download the statistical-gis-boundaries-london.zip Unzip the data and save it to your wk1 folder. CSV data On the same website search for fly-tipping incidents Download the .csv file 1.4.3 Data pre-processing Question Open the .csv in Excel, what do you notice about how the data is stored? Answer The year is a column and for each area the values are repeated for different years. In our analysis it is easier to have the different years as a column and populated for each area. So, we want to go from this… To this… As we are going to use this dataset in ArcMap, QGIS and R I’ve done it in Excel using a pivot table. In future we’ll use R to automate tasks like this. Go to Insert &gt; PivotTable Select the original table and create a PivotTable in a new worksheet The PivotTable Field box will appear, experiment with the different fields in each of the areas I’ve used the following: Note how I’ve altered the total_action_taken to the sum of… as the original was displaying incorrectly, to do so: Click on drop down button for total_action_taken &gt; Value Field Settings &gt; select Sum It’s important to think about what data we actually need in the next step and it’s good practice to avoid data redundancy where possible. Spoiler The spatial data we have downloaded already contains borough name, so we don’t need it twice. However, we do need a field to link the two datasets on. You could use borough name, but when using text fields sometimes input variations can affect joins. For example, if you had the University of Manchester in one dataset and Manchester University in another the join would fail. Consequently it’s usually best to join datasets on a code field. Now save the Excel sheet that contains the pivot table as a new .csv. Make sure that the first row of data holds the column titles. Remove all empty rows. When saving the file also avoid any special characters (e.g. -) and spaces, use an underscore instead of spaces. Warning Spatial software (especially ArcGIS) does not like file names with spaces or special characters. 1.4.4 Data loading Now it’s time to load, inspect and do some basic manipulation of this data. As mentioned in the lecture there are several GIS software ‘types’, here we will repeat the same process across ArcGIS, QGIS and R. Each system has specific benefits, but in general there has been a recent shift towards the use of QGIS and R, both being opensource. ArcGIS was the first major spatial analysis software produced by the Environmental Systems Research Institute, Inc. (Esri), founded in 1969 by Jack Dangermond. Due to its high cost and lack of customisation it is now less commonly used within the research community. 1.4.5 ArcGIS 1.4.5.1 Basics ArcGIS should be installed as a standard programme in the UCL desktop and you can navigate to it from the Windows start button. 1.4.5.1.1 Installing ArcGIS on your own computer As a UCL student, you can install ArcGIS on your own computer. This is easy if you have a PC, but if you have a Mac this can be trickier as Arc will only run in a PC environment. If you have a Mac, the options open to you are either to: Run ArcGIS through the Desktop@UCL application — http://www.ucl.ac.uk/isd/services/computers/remote-access/desktop Duel boot your machine using bootcamp, install Windows (7 or 8 is fine) and then install Arc onto the Windows partition. Install some kind of virtualisation software such as Parallels or VMware, and run Arc on a virtual windows machine If you can, it is preferable to run Arc on Bootcamp as virtualisation software can be slow, but the Desktop@UCL facility should suffice for this course. ArcGIS (Version 10.6 is the latest at time of writing, but may have already been superseded) can be downloaded from the UCL Software Database for free Make sure you read the instructions provided by the UCL Software Database on how to activate ArcGIS fully if installing onto your own machine as you have to set the license correctly. 1.4.5.1.2 Getting Help ArcGIS is a huge and complex piece of software, but thankfully is has an excellent help system –– depending on the version you are using (they are all quite similar anyway) you can access the online help system here: http://resources.arcgis.com/en/help/main/10.2/ http://resources.arcgis.com/en/help/main/10.1/ 1.4.5.1.3 ArcGIS ArcGIS is actually a whole suite of software built and maintained by ESRI (http://www.esri.com/software/arcgis).Within the ArcGIS for Desktop suite you will find the following programmes: ArcCatalog — Similar to Windows Explorer, ArcCatalog allows you to manage your GIS files, folders and geodatabases ArcGIS Administrator — This programme us used to manage licences for the various elements of ArcGIS ArcGlobe — ArcGlobe allows you to view and analyse your data in 3D –– this interface looks very similar to Google Earth and is part of the 3D analyst extension ArcMap — This is the programme you will use most often –– it is the main mapping and spatial analysis element of ArcGIS ArcScene — ArcScene is a 3D viewer which allows you to navigate and interact with your 3D raster and feature data ArcCatalog and ArcMap are in bold as these are the only programmes we will be using explicitly in this course. By all means experiment with the others if you have any spare time! 1.4.5.2 ArcCatalog Find and run the ArcCatalog piece of software Once ArcCatalog Opens, go to File &gt; Connect To Folder… and navigate to the N:folder, right click in the contents area and create a new File Geodatabase - i’ve called mine prac1. You can import data layers into a Geodatabase within ArcCatalog, however we will do this in ArcMap. Close ArcCatalog and never have both ArcCatalog and another ArcGIS product open at the same time. 1.4.5.3 ArcMap 1.4.5.3.1 Introduction ArcMap is the core of the ArcGIS suite and where you would normally produce maps, carry out spatial analysis functions and automate processes. Search for and open ArcMap Upon opening select the database you just created in the default geodatabased fpor this map dialogue box Click ok When the map document opens you should see something similar to the image below, highlighting some of the key buttons (without the data): It’s important to now set the map document up properly. Go File &gt; Map Document Properties, enter the details you wish. You can see the connection to the Geodatabase we just made. Click store relative pathnames, this means as long as the data stays in the same position relative to the path then ArcMap can load all the layers. For example if you moved your work from the C: drive to an external drive, H:. 1.4.5.3.2 Load data Using the Plus icon (add data layer) navigate to the extracted folder you saved earlier. Open London_Borough_Excluding_MHW.shp, but feel free to explore the other data layers. In the left hand Table Of Contents you can unselect layers to turn them off or drag layers above or below to change the display order. In the example below the wards layer is showing above the borough layer. Note, while we have loaded the shapefile, it is not stored in our Geodatabase yet. Useful tips To the right of the document you will see the Catalog and Search tabs.The Catalog tab is a more compact version of ArcCatalog and will let you see what data is stored in the current Geodatabase — you can use this at the same time as ArcMap. The search tab will let you find any analysis tool within ArcGIS. Try searching for Clip. If you right click on the boroughs layer (in the Table of Contents, left hand pane) you will see various options. Zoom to layer is very useful if you ever get lost in your ArcMap document. Now right click on the borough layer (in the Table of Contents) and open the attribute table. You’ll see the GSS_CODE field, which is the same code we output in our .csv. If you now right click on a field you’ll also be able to see the data type (e.g. string, integer). For example: 1.4.5.3.3 Join data We’re now going to join our flytipping data to the London borough shapefile. So: Right click on the london borough layer &gt; Joins and Relates &gt; Join Select the GSS_CODE as the field in the layer to base the join on Navigate to the .csv we created earlier Select the code field that matches (in my case this is called Row Labels) Select only to join matching records Validate join and click OK You will get errors, ArcMap does not like fields starting with numbers (e.g. 2012), dashes (e.g. -) or spaces. Feel free to change them in the original .csv but for this practical it is fine to continue. The join should work, so reopen the attribute table for the layer London boroughs Note, the join we have made is not permanent. To do so we need to export the layer. 1.4.5.3.4 Export data Right click on the london boroughs layer &gt; Data &gt; Export Data The location should default to our GeoDatabase. Be sure to change the filename — again avoid all of the characters (e.g. spaces and -) previously mentioned. Add the new data layer to the map and remove the old one (Right Click (on the layer) &gt; Remove) Now lets use the data we’ve joined to create a basic thematic map. Right click on the new London borough layer &gt; Properties Under the Symbology tab select Graduated colors Select the Value as one of the years of data we joined and change the classificaiton to something of your choice You should have something that looks like this: We haven’t talked about the Coordiante Reference System (CRS) (or Spatial Reference System (SRS)) of our map document A coordinate reference system is a series of parameters that define the coordinate system. Within GIS we use geographic or projected coordinate systems. The former uses a three-dimensional spherical surface to define locations of Earth, whereas the latter is defined on a flat, two-dimensional surface giving it constant lengths, angles and areas. We cover this in more detail later on. In ArcMap we can specify what CRS we want to use by: Right clicking on the map document &gt; Data Frame Properties You’ll see that it is already set to Projected Coordinate Systems, National Grids, Europe, British National Grid. This is because ArcMap will default to the coordinate system of the first data layer loaded. Save and then close your ArcMap document. We’re now going to replicate this task in QGIS. Note As we are going to open the same files in difference GIS systems it is important to close the software before moving on. If you don’t then files can be locked and unreadable as they are still considered to be in use. 1.4.6 QGIS 1.4.6.1 Introduction QGIS is very similar to ArcMap except that as it is open-source and free there are many add on packages that (or plugins) that provide additional functionality to the software. To get QGIS on your personal machine go to: https://qgis.org/en/site/forusers/download.html I install the OSGeo4W version. The nature of open-source means that several programs will rely on each other for features. OSGeo4W tracks all the shared requirements and does not install any duplicates. 1.4.6.2 Load data Search for and open QGIS Click on the open data source manager. Just above the word browser in the top left of the screen Navigate to the London boroughs layer .shp and add it, you then have to close the data source manager Just like in ArcMap you can right click on the layer to view the attribute table. Unlike ArcMap you have to load the .csv file into QGIS in order to join it to a shapefile. Open the data source manager and select Delimited Text Navigate to our .csv file and provide a suitable layer name Under Record and Fields Options make sure the number of header lines to discard is 0 and the First record has field names box is selected (this is assuming you left a title for each column in your .csv) Under Geometry Definition select No geometry (attribute table only) Does the sample data seem right? If so, click add then close 1.4.6.3 Join data Right click on the London boroughs layer &gt; Properties &gt; Joins Click the plus button at the bottom of the box Complete the dialogue box 1.4.6.4 Export data Now instead of using a GeoDatabase, let’s export to a GeoPackage. Right click on the London boroughs layer &gt; Export &gt; Save Feature As Select the GeoPackage format and complete the File name (the saved file name for the GeoPackage) and the Layer name (the name for this layer within the GeoPackage). Recall that a GeoPackage can store many data layers as a single file The new layer will be added to the map, so you can remove the old one (Right click on the layer &gt; Remove Layer). Make sure you remove the right one! We’ve now made a GeoPackage that we can connect our map project to. Under Browser, Right click on GeoPackage &gt; New Connection &gt; Navigate to your GeoPackage Click the down arrow left to GeoPackage and you should see the one you just navigated to. Click the down arrow on the database and you can see your layer. Now we are going to import our .csv into our GeoPackage. To do so go: Database &gt; DB Manager Select your GeoPackage in the left hand pane Import layer/file then select the .csv. Click Ok. Again, remember that the .csv in the Layers tab (bottom left) is the original. Remove it, then from the GeoPackage just click, hold and drag the .csv into the layer pane. Now let’s make a quick thematic map like we did in ArcMap. Right click on your London boroughs layer &gt; Properties &gt; Symbology Select categorised and choose a data column and color ramp &gt; click Classify You could also select graduated, however our joined data fields are in the wrong data type. If you wish to change them follow this guide Save your QGIS project You should have produced something like this: Spatial reference QGIS is similar but different to ArcMap. QGIS defaults to the Coordinate Reference System (CRS) WGS 84, or known by its European Petroleum Survey Group (EPSG) code 4326. However, when you add your first layer in will default to that CRS. We’ll go into the background of EPSG next time. You can change the CRS by going File &gt; Properties and selecting CRS in the left hand pane. 1.4.7 R 1.4.7.1 Introduction R is both a programming language and software environment, originally designed for statistical computing and graphics. R’s great strength is that it is open-source, can be used on any computer operating system and free for anyone to use and contribute to. Because of this, it is rapidly becoming the statistical language of choice for many academics and has a huge user community with people constantly contributing new packages to carry out all manner of statistical, graphical and importantly for us, geographical tasks. The purpose of this practical is just to demonstrate data loading and manipulation in different software. The next practical will provide much more detail on R, so don’t worry. 1.4.7.2 Setup 1 Search for and open RStudio. You can install R Studio on your own machine from: https://www.rstudio.com/products/rstudio/download/#download R studio requires R which you can download from: https://cran.rstudio.com/ RStudio is a free and open-source integrated development environment for R — it makes R much easier to use. If you are using a Mac and run into issues, firstly follow the instructions below then check out the Mac R issues section if the problem persists. 1.4.7.3 Setup 2 If you RStudio insn’t installed on your practical room PC…fear not…the good people over at RStudio have created a cloud version…you have to sign up but can use it the same as the desktop version. It even works with Git and GitHub which we will cover later on in the course. The only real limitation is the upload file size — if you have any kind of ‘big data’ then you will reach the allowed limit. That won’t be a problem for the majority of this course except [Advanced raster analysis]…that said you can now link R to googledrive and access any data stored on it with the googledrive() function that is part of the tidyverse package. You could possibly do this one OneDrive too, but it’s not as intuitive, have a look here. But for now, don’t worry about this, just note it for future reference. RStudio cloud is really useful for sharing code and working collaboratively as you can add different users to the project. I’d recommend using RStudio locally (following Setup 1) to start with. If you are using RStudio cloud you’ll need to make a new workspace and upload the files we are using here with the upload button…. If you upload a shapefile you will need to incldue all the relevant files and upload them to RStudio cloud as a .zip In RStudio go: File &gt; New File &gt; R Script You should be able to see these quadrants (without the code): Below are bits of code, to start we will work using the console. So just copy the bits of code into the console window, changing the file names to where your data is stored. Then at the end of this section I’ll show you how to make a script. R works on packages that are collections of functions and data. For this practical we will need the ones listed in the code chunk below. Whilst we’ve installed them (with the code below), we haven’t yet loaded them. It’s best practice to do all this at the start of your code, however, for demonstration purposes I’ll load each one as we need it. install.packages(c(&quot;sf&quot;, &quot;tmap&quot;, &quot;tmaptools&quot;, &quot;RSQLite&quot;, &quot;tidyverse&quot;), repos = &quot;https://www.stats.bris.ac.uk/R/&quot;) Packages we’ve installed: sf: simple features, standard way to encode spatial vector data tmap: layer-based and easy approach to make thematic maps tmaptools: set of tools for reading and processing spatial data RSQLite: embeds the SQLite database engine in R Here, repos stands for repository where we will download the packages from. Once you have set it, you shouldn’t need to specify it again. Whilst we’ve installed the packages we haven’t loaded them…this is done through using library() function. If you are using a Mac you might also need rgdal… this is because a lot of packages are dependent on it and it might not properly install… install.packages(&quot;rgdal&quot;) Then load rgdal… library(rgdal) If you still have issues the check out the Mac R issues section 1.4.7.4 Load data Load the sf package so we can read our shapefile in — remember to change to filepath to your shapefile. For this first practical we’ll just leave the data where it is, next week we’ll show you how to use projects to make calling data much easier. Note by default in R, the file path should be defined with / but on a windows file system it is defined with \\. Using \\\\ instead allows R to read the path correctly – alternatively, just use / library(sf) # change this to your file path!!! shape &lt;- st_read(&quot;Prac1_data/statistical-gis-boundaries-london/ESRI/London_Borough_Excluding_MHW.shp&quot;) ## Reading layer `London_Borough_Excluding_MHW&#39; from data source `C:\\Users\\ucfnmac\\OneDrive - University College London\\Teaching\\CASA0005repo\\Prac1_data\\statistical-gis-boundaries-london\\ESRI\\London_Borough_Excluding_MHW.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 33 features and 7 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## epsg (SRID): NA ## proj4string: +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.999601272 +x_0=400000 +y_0=-100000 +datum=OSGB36 +units=m +no_defs Note If you are working on RStudio cloud and have a shapefile (along with all the other relevant files required) you will just need to use… shape &lt;- st_read(&quot;London_Borough_Excluding_MHW.shp&quot;) As RStudio cloud knows you have setup a project and to look for files within it…we cover this very soon for RStudio desktop. To get a summary of the data held within the shapefile data (attribute table) enter the following: summary(shape) ## NAME GSS_CODE HECTARES NONLD_AREA ## Barking and Dagenham: 1 E09000001: 1 Min. : 314.9 Min. : 0.00 ## Barnet : 1 E09000002: 1 1st Qu.: 2724.9 1st Qu.: 0.00 ## Bexley : 1 E09000003: 1 Median : 3857.8 Median : 2.30 ## Brent : 1 E09000004: 1 Mean : 4832.4 Mean : 64.22 ## Bromley : 1 E09000005: 1 3rd Qu.: 5658.5 3rd Qu.: 95.60 ## Camden : 1 E09000006: 1 Max. :15013.5 Max. :370.62 ## (Other) :27 (Other) :27 ## ONS_INNER SUB_2009 SUB_2006 geometry ## F:19 NA&#39;s:33 NA&#39;s:33 MULTIPOLYGON :33 ## T:14 epsg:NA : 0 ## +proj=tmer...: 0 ## ## ## ## To have a quick look what the shapefile looks like enter the following: plot(shape) That plots everything in the shapefile (all the attitbues) if you just wanted the geometry (outline of the shape) you could use… plot(sf::st_geometry(shape)) From what we did in QGIS and ArcMap this should look familiar. We now need to load our .csv file: library(tidyverse) mycsv &lt;- read_csv(&quot;Prac1_data/fly_tipping_borough_edit.csv&quot;) ## Parsed with column specification: ## cols( ## `Row Labels` = col_character(), ## `2011_12` = col_double(), ## `2012_13` = col_double(), ## `2013_14` = col_double(), ## `2014_15` = col_double(), ## `2015_16` = col_double(), ## `2016_17` = col_double(), ## `2017_18` = col_double(), ## Grand_Total = col_double() ## ) When you load tidyverse you might get a list of conflicts, this basically means that several packages have functions named the same thing. For example there is a function named filter() in the packages dplyr and stats. If you wanted to use the dplyr version you would use dplyr::filter() or for the stats version it would be stats::filter()… To view the data just input: mycsv ## # A tibble: 34 x 9 ## `Row Labels` `2011_12` `2012_13` `2013_14` `2014_15` `2015_16` `2016_17` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 E09000001 563 1492 433 347 587 1944 ## 2 E09000002 2687 2122 1399 3100 2672 1130 ## 3 E09000003 2356 1828 890 219 615 130 ## 4 E09000004 505 627 732 399 262 439 ## 5 E09000005 6713 2232 3189 3926 3980 4366 ## 6 E09000006 306 479 653 462 326 228 ## 7 E09000007 5541 5962 8281 4837 4719 4656 ## 8 E09000008 31 108 460 712 1707 637 ## 9 E09000009 6727 5679 6543 5521 6067 12688 ## 10 E09000010 7262 3595 3269 4937 5292 10894 ## # ... with 24 more rows, and 2 more variables: `2017_18` &lt;dbl&gt;, ## # Grand_Total &lt;dbl&gt; 1.4.7.5 Join data In R we’ve given our London boroughs shapefile the name shape and our flytipping .csv the name mycsv. If you look in the Environment quadrant you should see them both listed. Join the .csv to the shapefile. Here, replace Row Labels with whatever your GSS_CODE is called in the .csv: library(tmaptools) shape&lt;-merge(shape, mycsv, by.x=&quot;GSS_CODE&quot;, by.y=&quot;Row Labels&quot;) Let’s break this down a bit. We just created a tibble of mycsv (this is a new form of a dataframe) where each column has a variable and each row contains a set of values — so basically a normal table. The match simply found the GSS_CODE values in the .csv and joined the data to our shapefile. Check the merge was successful, this is just going to show the top 10 rows: head(shape, n=10) ## Simple feature collection with 10 features and 15 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 509702.4 ymin: 155850.8 xmax: 554089.2 ymax: 200933.9 ## epsg (SRID): NA ## proj4string: +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.999601272 +x_0=400000 +y_0=-100000 +datum=OSGB36 +units=m +no_defs ## GSS_CODE NAME HECTARES NONLD_AREA ONS_INNER SUB_2009 ## 1 E09000001 City of London 314.942 24.546 T &lt;NA&gt; ## 2 E09000002 Barking and Dagenham 3779.934 169.150 F &lt;NA&gt; ## 3 E09000003 Barnet 8674.837 0.000 F &lt;NA&gt; ## 4 E09000004 Bexley 6428.649 370.619 F &lt;NA&gt; ## 5 E09000005 Brent 4323.270 0.000 F &lt;NA&gt; ## 6 E09000006 Bromley 15013.487 0.000 F &lt;NA&gt; ## 7 E09000007 Camden 2178.932 0.000 T &lt;NA&gt; ## 8 E09000008 Croydon 8649.441 0.000 F &lt;NA&gt; ## 9 E09000009 Ealing 5554.428 0.000 F &lt;NA&gt; ## 10 E09000010 Enfield 8220.025 0.000 F &lt;NA&gt; ## SUB_2006 2011_12 2012_13 2013_14 2014_15 2015_16 2016_17 2017_18 Grand_Total ## 1 &lt;NA&gt; 563 1492 433 347 587 1944 2579 7945 ## 2 &lt;NA&gt; 2687 2122 1399 3100 2672 1130 1066 14176 ## 3 &lt;NA&gt; 2356 1828 890 219 615 130 503 6541 ## 4 &lt;NA&gt; 505 627 732 399 262 439 327 3291 ## 5 &lt;NA&gt; 6713 2232 3189 3926 3980 4366 7483 31889 ## 6 &lt;NA&gt; 306 479 653 462 326 228 258 2712 ## 7 &lt;NA&gt; 5541 5962 8281 4837 4719 4656 12671 46667 ## 8 &lt;NA&gt; 31 108 460 712 1707 637 2684 6339 ## 9 &lt;NA&gt; 6727 5679 6543 5521 6067 12688 5471 48696 ## 10 &lt;NA&gt; 7262 3595 3269 4937 5292 10894 5855 41104 ## geometry ## 1 MULTIPOLYGON (((531145.1 18... ## 2 MULTIPOLYGON (((543905.4 18... ## 3 MULTIPOLYGON (((524579.9 19... ## 4 MULTIPOLYGON (((547226.2 18... ## 5 MULTIPOLYGON (((525201 1825... ## 6 MULTIPOLYGON (((540373.6 15... ## 7 MULTIPOLYGON (((528840.2 18... ## 8 MULTIPOLYGON (((535009.2 15... ## 9 MULTIPOLYGON (((510253.5 18... ## 10 MULTIPOLYGON (((531023.5 20... Now, let’s make a quick thematic map (or a qtm) using the package tmap. I’ve made mine for flytipping between 2011 and 2012 (column 2011_12). But check what your coloumn name is from the adove code head(shape, n=10) it might be slightly different like 2011-2012 or x2011_2012…. library(tmap) tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting # change the fill to your column name if different qtm(shape, fill = &quot;2011_12&quot;) 1.4.8 Export data Finally write shape to a new GeoPackage (.gpkg) giving it the layer name of your choice: st_write(shape, &quot;Prac1_data/Rwk1.gpkg&quot;, &quot;london_boroughs_fly_tipping&quot;, delete_layer=TRUE) ## Deleting layer `london_boroughs_fly_tipping&#39; using driver `GPKG&#39; ## Updating layer `london_boroughs_fly_tipping&#39; to data source `Prac1_data/Rwk1.gpkg&#39; using driver `GPKG&#39; ## Writing 33 features with 15 fields and geometry type Multi Polygon. So here, we are saying the shape is the object we want to save, then to the GeoPackage file path, with the layer name of london_boroughs_fly_tipping. I’ve set delete_layer to true so I could overwrite mine when I developed this practical. Changing it to false would generate an error message if you ever tried to re-run the code. Let’s also add the .csv as we did in QGIS. This is a bit more complicated as we have to use the SQLite database package. Firstly, connect to the .gpkg we just made: library(readr) library(RSQLite) ## Warning: package &#39;RSQLite&#39; was built under R version 3.6.2 con &lt;- dbConnect(RSQLite::SQLite(),dbname=&quot;Prac1_data/Rwk1.gpkg&quot;) Now examine what is in the .gpkg…you can see that i’ve already got my original_csv stored within the .gpkg as when i developed this practical i made sure it was working! dbListTables(con) ## [1] &quot;gpkg_contents&quot; ## [2] &quot;gpkg_extensions&quot; ## [3] &quot;gpkg_geometry_columns&quot; ## [4] &quot;gpkg_metadata&quot; ## [5] &quot;gpkg_metadata_reference&quot; ## [6] &quot;gpkg_ogr_contents&quot; ## [7] &quot;gpkg_spatial_ref_sys&quot; ## [8] &quot;gpkg_tile_matrix&quot; ## [9] &quot;gpkg_tile_matrix_set&quot; ## [10] &quot;london_boroughs_fly_tipping&quot; ## [11] &quot;original_csv&quot; ## [12] &quot;rtree_london_boroughs_fly_tipping_geom&quot; ## [13] &quot;rtree_london_boroughs_fly_tipping_geom_node&quot; ## [14] &quot;rtree_london_boroughs_fly_tipping_geom_parent&quot; ## [15] &quot;rtree_london_boroughs_fly_tipping_geom_rowid&quot; ## [16] &quot;sqlite_sequence&quot; Add your .csv and disconnect from the .gpkg: dbWriteTable(con,&quot;original_csv&quot;, mycsv, overwrite=TRUE) dbDisconnect(con) Here overwrite let’s you well..overwrite the exisiting file…if this wasn’t specified as true you would get an error saying the file already existed if you tried to run this code again. 1.4.8.1 Making a script To convert this bit of analysis into a script that we could save and run again in future, I would write the following in the script quadrant: library(sf) library(tmap) library(tmaptools) library(RSQLite) library(tidyverse) #read in the shapefile shape &lt;- st_read( &quot;Prac1_data/statistical-gis-boundaries-london/ESRI/London_Borough_Excluding_MHW.shp&quot;) # read in the csv mycsv &lt;- read_csv(&quot;Prac1_data/fly_tipping_borough_edit.csv&quot;) # merge csv and shapefile shape &lt;- merge(shape, mycsv, by.x=&quot;GSS_CODE&quot;, by.y=&quot;Row Labels&quot;) # set tmap to plot tmap_mode(&quot;plot&quot;) # have a look at the map qtm(shape, fill = &quot;2011_12&quot;) # write to a .gpkg st_write(shape, &quot;Prac1_data/Rwk1.gpkg&quot;, &quot;london_boroughs_fly_tipping&quot;, delete_layer=TRUE) # connect to the .gpkg con &lt;- dbConnect(SQLite(),dbname=&quot;Prac1_data/Rwk1.gpkg&quot;) # list what is in it dbListTables(con) # add the original .csv dbWriteTable(con,&quot;original_csv&quot;, mycsv, overwrite=TRUE) # disconnect from it dbDisconnect(con) You can then save your script through File &gt; Save As. If you are on a Mac you might also need to load rgdal…just add the following at the top of the script. library(rgdal) 1.4.9 What will I use Well… it depends. If you wanted to quickly open a dataset to explore its contents then I’d use QGIS or ArcMap. However, if you had 100 raster images that you wanted to clip to your study area, I’d automate it in R. There are also specific packages developed for each type of software that might dictate what you use, for example I recently made use of the Urban Multi-scale Environmental Predictor (UMEP) plugin in QGIS. That said, as I needed to match different hourly meteorological variables over a three year period I automated the first part of the analysis in R and loaded a .csv into QGIS. Recent advancments have also closed the gap somewhat between Graphic User Interface (GUI) GIS software (such as QGIS) and programming languages (such as R) with ‘bridges’ that allow you to control GUI software through code. To learn more about these bridges read Lovelace et al. (2019) chapter 9. 1.5 Data sources and task Below I’ve listed a few good data sources. For this week’s task explore these and any others you can find and get an interesting dataset (e.g. in this practical our flytipping .csv) that you could join to some spatial data (e.g. in this practical the London boroughs .shp). This could be for any location in the world. 1.5.1 UK Data Service The UK Data Service geography service (https://census.edina.ac.uk/) has a library of hundreds of current and former boundary datasets for which attribute data are produced in the UK. 1.5.2 ONS The Office for National Statistics (ONS) are the national statistical agency for England and Wales and have recently started to provide access to boundary data for the statistics they produce for various geographic areas. Many of the boundaries on the ONS Geoportal are also available from the Edina Census Geography website in a more flexible fashion, however the ONS website provides very quick access to bulk-downloads — something which can be very useful when reading data directly from the web using computer software. From the ONS website you can also extract the URL at which the data is stored to use directly within your future code… 1.5.3 nomis Nomis is provided by the ONS giving free access to UK labour market statistics. You can also bulk download census data from the site too! 1.5.4 OS The Ordnance Survey (OS) are the national mapping agency for the UK. A few years ago, they opened up a number of their data products for public use including greenspace, OS Open Map and OS Terrain. For the full range see: https://www.ordnancesurvey.co.uk/business-and-government/products/finder.html?Licensed%20for=OpenData%20(Free)&amp;withdrawn=on 1.5.5 Edina Digimap Before the Ordnance Survey opened up much of its data for public use, academics and students in the UK could access OS data using the Edina Digimap Service –– this service is still available today and provides access to a number of products in addition to those available from OS Open Data. Perhaps the most exciting of the additional OS data products available from Digimap is OS MasterMap. MasterMap is a framework for all OS data and contains layers of data that include details of real world objects such as buildings, roads, paths, rivers, physical structures and land parcels, as well as the complete UK transport network. Whilst we still are required to go through Edina OS have recently announced plans to make this dataset free in the near future under the new Geospatial Commission. 1.5.6 OSM Open Street Map (OSM) is a fantastic resource –– as the name suggests, all data contained in Open Street Map are open and free for anyone to use. Much like Wikipedia, anyone can contribute content to OSM and this brings with it its own benefits (frequent updates, very large user-base) and problems (data quality and patch coverage). OSM is a very good example of Volunteered Geographic Information (VGI). It’s possible to download OSM data straight from the website, although the interface can be a little unreliable (it works better for small areas). There are, however, a number of websites that allow OSM data to be downloaded more easily and are directly linked to from the ‘Export’ option in OSM. Geofabrik (https://www.geofabrik.de/data/download.html) allows you to download frequently updated Shapefiles for various global subdivisions. 1.5.7 DEFRA The Department for Environment and Rural Affairs (DEFRA) have recently created the Data Services Platform to openly distribute environmental data. See: https://environment.data.gov.uk/ 1.5.8 Data lists Another good place to start searching for data are data lists. They simply provide a comprehensive overview of all available data conveniently categorised by discipline and country. I normally use this one: https://freegisdata.rtwilson.com/ 1.6 Summary Within this practical we have explored the different types, formats and software used to store, analyse and manipulate spatial data. In reflecting upon this practical you should consider the (dis)advantages of each, where and when they might be appropriate and the overall practicality. Next week we will delve further into R and RStudio. 1.7 Feedback Was anything that we explained unclear this week or was something really clear…let us know here. It’s anonymous and we’ll use the responses to clear any issues up in the future / adapt the material. 1.8 Mac R issues If you have a Mac and run into issues using R, try this… It seems that a lot of the packages are dependent on rgdal, which might not properly install… Order of operations Install java JDK (to respond to error Unable to find any JVMs matching version “(null)”, which occurred when we tried to load OpenStreetMap package in RStudio) Download and install the appropriate .dmg from Java SE Development Kit 11.0.1 Run sudo R CMD javareconf in Terminal as described here(though don’t follow this tutorial exactly, just up to that terminal command). (Maybe) restart your computer (not really sure when this is necessary). Install GDAL GDAL, the Geospatial Data Abstraction Library, appears to be a massively important package / library / whatever that a lot of the spatial tools we use depends on. This is where things might be sticky — we already installed GDAL for QGIS, but obviously RStudio can’t find that install … dunno how to update the pointers, but we found that installing GDAL (again?) solved it. We HOPE that this didn’t ruin or break any other software we’ve installed, only time will tell :grimacing: To install GDAL on a mac, first (if you haven’t) install homebrew, the mac package manager This can be done by executing /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" in Terminal, inputting password etc. Now we’re ready to brew install gdal (also in Terminal), which will run through and install a massive list of dependencies etc. Set up RStudio Restart RStudio (if the following doesn’t work on first go…) Run through all the install.packages() commands one by one in RStudio and check to make sure that they install. Check if rgdal package is working. Check the other packages OpenStreetMap, tmap, etc. "],
["rasters-descriptive-statistics-and-interpolation.html", "Chapter 2 Rasters, descriptive statistics and interpolation 2.1 Learning outcomes 2.2 Recommended listening 2.3 Introduction 2.4 Part 1 rasters 2.5 Part 2 descriptive statistics 2.6 Part 3 interpolation 2.7 Auto data download 2.8 Advanced analysis 2.9 Feedback", " Chapter 2 Rasters, descriptive statistics and interpolation 2.1 Learning outcomes By the end of this practical you should be able to: Load, manipulate and interpret raster layers Observe and critique different descriptive data manipulation methods and outputs Execute interpolation of points to a raster layer Construct a methodology for comparing raster datasets 2.2 Recommended listening Some of these practicals are long, take regular breaks and have a listen to some of our fav tunes each week. Andy Adam — this week, from me, it’s a history lesson. 30 Years ago, two DJs started playing tunes in the other room in Heaven, just under Charing Cross Station. The night was called Rage and the DJs were called Fabio and Grooverider. Their mix of house and sped-up breakbeats was an entirely new sound that began to be called ‘Jungle’. The 30 Years of Rage album recalls some of the early tunes that helped shape an entire genre of music. Enjoy! 2.3 Introduction This practical is composed of three parts. To start with we’re going to load some global raster data into R. In the second part we extract data points (cities and towns) from this data and generate some descriptive statistics and histograms. In the final section we explore interpolation using point data. 2.4 Part 1 rasters So far we’ve only really considered vector data. Within this practical we will explore some raster data sources and processing techniques. If you recall rasters are grids of cell with individual values. There are many, many possible sources to obtain raster data from as it is the data type used for the majority (basically all) of remote sensing data. 2.4.1 WorldClim data To start with we are going to use WorldClim data — this is a dataset of free global climate layers (rasters) with a spatial resolution of between 1\\(km^2\\) and 240\\(km^2\\). Download the data from: http://worldclim.org/version2 Select any variable you want at the 5 minute second resolution. What is a 5 minute resolution i hear you ask? Well, this geographic reference system treats the globe as if it was a sphere divided into 360 equal parts called degrees. Each degree has 60 minutes and each minute has 60 seconds. Arc-seconds of latitude (horizontal lines in the globe figure below) remain almost constant whilst arc-seconds of longitude (vertical lines in the globe figure below) decrease in a trigonometric cosine-based fashion as you move towards the Earth’s poles. This causes problems as you increase or decrease latitude the longitudial lengths alter…For example at the equator (0°, such as Quito) a degree is 111.3 km whereas at 60° (such as Saint Petersburg) a degree is 55.80 km …In contrast a projected coordinate system is defined on a flat, two-dimensional plane (through projecting a spheriod onto a 2D surface) giving it constant lengths, angles and areas… Figure 2.1: This figure is taken directly from Lovelace et al. (2019) section 2.2. Illustration of vector (point) data in which location of London (the red X) is represented with reference to an origin (the blue circle). The left plot represents a geographic CRS with an origin at 0° longitude and latitude. The right plot represents a projected CRS with an origin located in the sea west of the South West Peninsula. If you are still a bit confused by coordiate reference systems then stop and take some time to have a look at the resources listed here. It is very important to understand projection systems. This is the best resources i’ve come across explaining coordiate reference systems are: https://geocompr.github.io/post/2019/crs-projections-transformations/ https://mercator.tass.com/mercator-heritage — this is the story of Mercator! Others include: https://geocompr.robinlovelace.net/spatial-class.html#vector-data https://communityhub.esriuk.com/geoxchange/2012/3/26/coordinate-systems-and-projections-for-beginners.html This YouTube video that shows the differences between geographic and projected coordinate reference systems and some limitations of ArcMap… And this great YouTube produced by SciShow shows the comporsises of different map projections Unzip and move the data to your project folder. Now load the data. We could do this individually…. library(raster) jan&lt;-raster(&quot;prac3_data/wc2.0_5m_tavg_01.tif&quot;) # have a look at the raster layer jan jan ## class : RasterLayer ## dimensions : 2160, 4320, 9331200 (nrow, ncol, ncell) ## resolution : 0.08333333, 0.08333333 (x, y) ## extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 ## source : C:/Users/ucfnmac/OneDrive - University College London/Teaching/CASA0005repo/prac3_data/wc2.0_5m_tavg_01.tif ## names : wc2.0_5m_tavg_01 ## values : -46.697, 34.291 (min, max) Then have a quick look at the data plot(jan) Now we can actually see some data…here is a quick example of using the Robinson projection saved to a new variable. Don’t worry about the code, just take in that it is different to the above plot library(sf) # set the proj 4 to a new variable newproj&lt;-&quot;+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs&quot; # get the jan raster and give it the new proj4 pr1 &lt;- projectRaster(jan, crs=newproj) plot(pr1) A better and more efficient way is to firstly list all the files stored within our directory # look in our folder, find the files that end with .tif and # provide their full filenames listfiles &lt;- list.files(&quot;prac3_data/&quot;, &quot;.tif&quot;, full.names = TRUE) #have a look at the file names listfiles ## [1] &quot;prac3_data/wc2.0_5m_tavg_01.tif&quot; &quot;prac3_data/wc2.0_5m_tavg_02.tif&quot; ## [3] &quot;prac3_data/wc2.0_5m_tavg_03.tif&quot; &quot;prac3_data/wc2.0_5m_tavg_04.tif&quot; ## [5] &quot;prac3_data/wc2.0_5m_tavg_05.tif&quot; &quot;prac3_data/wc2.0_5m_tavg_06.tif&quot; ## [7] &quot;prac3_data/wc2.0_5m_tavg_07.tif&quot; &quot;prac3_data/wc2.0_5m_tavg_08.tif&quot; ## [9] &quot;prac3_data/wc2.0_5m_tavg_09.tif&quot; &quot;prac3_data/wc2.0_5m_tavg_10.tif&quot; ## [11] &quot;prac3_data/wc2.0_5m_tavg_11.tif&quot; &quot;prac3_data/wc2.0_5m_tavg_12.tif&quot; Then load all of the data straight into a raster stack. A raster stack is a collection of raster layers with the same spatial extent and resolution. worldclimtemp &lt;- stack(listfiles) #have a look at the raster stack worldclimtemp ## class : RasterStack ## dimensions : 2160, 4320, 9331200, 12 (nrow, ncol, ncell, nlayers) ## resolution : 0.08333333, 0.08333333 (x, y) ## extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 ## names : wc2.0_5m_tavg_01, wc2.0_5m_tavg_02, wc2.0_5m_tavg_03, wc2.0_5m_tavg_04, wc2.0_5m_tavg_05, wc2.0_5m_tavg_06, wc2.0_5m_tavg_07, wc2.0_5m_tavg_08, wc2.0_5m_tavg_09, wc2.0_5m_tavg_10, wc2.0_5m_tavg_11, wc2.0_5m_tavg_12 ## min values : -46.697, -44.559, -57.107, -62.996, -63.541, -63.096, -66.785, -64.600, -62.600, -54.400, -42.000, -45.340 ## max values : 34.291, 33.174, 33.904, 34.629, 36.312, 38.400, 43.036, 41.073, 36.389, 33.869, 33.518, 33.667 In the raster stack you’ll notice that under dimensions there are 12 layers (nlayers). The stack has loaded the 12 months of average temperature data for us in order. To access single layers within the stack: # access the january layer worldclimtemp[[1]] ## class : RasterLayer ## dimensions : 2160, 4320, 9331200 (nrow, ncol, ncell) ## resolution : 0.08333333, 0.08333333 (x, y) ## extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 ## source : C:/Users/ucfnmac/OneDrive - University College London/Teaching/CASA0005repo/prac3_data/wc2.0_5m_tavg_01.tif ## names : wc2.0_5m_tavg_01 ## values : -46.697, 34.291 (min, max) We can also rename our layers within the stack: month &lt;- c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;) names(worldclimtemp) &lt;- month Now to get data for just January use our new layer name worldclimtemp$Jan ## class : RasterLayer ## dimensions : 2160, 4320, 9331200 (nrow, ncol, ncell) ## resolution : 0.08333333, 0.08333333 (x, y) ## extent : -180, 180, -90, 90 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 ## source : C:/Users/ucfnmac/OneDrive - University College London/Teaching/CASA0005repo/prac3_data/wc2.0_5m_tavg_01.tif ## names : Jan ## values : -46.697, 34.291 (min, max) 2.4.2 Location data from a raster Using a raster stack we can extract data with a single command!! For example let’s make a dataframe of some sample sites — Australian cities/towns. site &lt;- c(&quot;Brisbane&quot;, &quot;Melbourne&quot;, &quot;Perth&quot;, &quot;Sydney&quot;, &quot;Broome&quot;, &quot;Darwin&quot;, &quot;Orange&quot;, &quot;Bunbury&quot;, &quot;Cairns&quot;, &quot;Adelaide&quot;, &quot;Gold Coast&quot;, &quot;Canberra&quot;, &quot;Newcastle&quot;, &quot;Wollongong&quot;, &quot;Logan City&quot; ) lon &lt;- c(153.03, 144.96, 115.86, 151.21, 122.23, 130.84, 149.10, 115.64, 145.77, 138.6, 153.43, 149.13, 151.78, 150.89, 153.12) lat &lt;- c(-27.47, -37.91, -31.95, -33.87, 17.96, -12.46, -33.28, -33.33, -16.92, -34.93, -28, -35.28, -32.93, -34.42, -27.64) #Put all of this inforamtion into one list samples &lt;- data.frame(site, lon, lat, row.names=&quot;site&quot;) # Extract the data from the Rasterstack for all points AUcitytemp&lt;- raster::extract(worldclimtemp, samples) Add the city names to the rows of AUcitytemp row.names(AUcitytemp)&lt;-site 2.5 Part 2 descriptive statistics Descriptive statistics provide a summary of our data, often forming the base of quantitiatve analysis leading to inferential statistics which we use to make infereces about our data (e.g. judegements of the probability that the observed difference between two datasets is not by chance) 2.5.1 Data preparation Let’s take Perth as an example. We can subset our data either using the row name: Perthtemp &lt;- subset(AUcitytemp, rownames(AUcitytemp) == &quot;Perth&quot;) Or the row location: Perthtemp &lt;- AUcitytemp[3,] 2.5.2 Histogram A histogram lets us see the frequency of distribution of our data. Make a histogram of Perth’s temperature hist(Perthtemp) Remember what we’re looking at here. The x axis is the temperature and the y is the frequency of occurrence. That’s a pretty simple histogram, let’s improve the aesthetics a bit. #define where you want the breaks in the historgram userbreak&lt;-c(8,10,12,14,16,18,20,22,24,26) hist(Perthtemp, breaks=userbreak, col=&quot;red&quot;, main=&quot;Histogram of Perth Temperature&quot;, xlab=&quot;Temperature&quot;, ylab=&quot;Frequency&quot;) Check out the histogram information R generated histinfo&lt;-hist(Perthtemp) histinfo ## $breaks ## [1] 12 14 16 18 20 22 24 26 ## ## $counts ## [1] 1 3 2 2 1 1 2 ## ## $density ## [1] 0.04166667 0.12500000 0.08333333 0.08333333 0.04166667 0.04166667 0.08333333 ## ## $mids ## [1] 13 15 17 19 21 23 25 ## ## $xname ## [1] &quot;Perthtemp&quot; ## ## $equidist ## [1] TRUE ## ## attr(,&quot;class&quot;) ## [1] &quot;histogram&quot; Here we have: breaks — the cut off points for the bins (or bars), we just specified these counts — the number of cells in each bin midpoints — the middle value for each bin density — the density of data per bin 2.5.3 Using more data This was still a rather basic histogram, what if we wanted to see the distribution of temperatures for the whole of Australia in Jan (from averaged WorldClim data) as opposed to just our point for Perth. First, we need to source and load a vector of Australia. Go to: https://gadm.org/download_country_v3.html and download the GeoPackage Check what layers are within a GeoPackage using: library(sf) st_layers(&quot;prac3_data/gadm36_AUS.gpkg&quot;) ## Driver: GPKG ## Available layers: ## layer_name geometry_type features fields ## 1 gadm36_AUS_0 Multi Polygon 1 2 ## 2 gadm36_AUS_1 Multi Polygon 11 10 ## 3 gadm36_AUS_2 Multi Polygon 569 13 Then read in the GeoPackage layer for the whole of Australia Ausoutline &lt;- st_read(&quot;prac3_data/gadm36_AUS.gpkg&quot;, layer=&#39;gadm36_AUS_0&#39;) ## Reading layer `gadm36_AUS_0&#39; from data source `C:\\Users\\ucfnmac\\OneDrive - University College London\\Teaching\\CASA0005repo\\prac3_data\\gadm36_AUS.gpkg&#39; using driver `GPKG&#39; ## Simple feature collection with 1 feature and 2 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 112.9211 ymin: -55.11694 xmax: 159.1092 ymax: -9.142176 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs Check the layer by plotting the geometry…we could do this through… plot(Ausoutline$geom) But as the .shp is quite complex (i.e. lots of points) we can simplify it first with the rmapshaper package — install that now..if it doesn’t load (or crashes your PC) this isn’t an issue. It’s just good practice that when you load data into R you check to see what it looks like… #load the rmapshaper package library(rmapshaper) #simplify the shapefile #keep specifies the % of points #to keep ms_simplify(Ausoutline, keep=0.05) ## Simple feature collection with 1 feature and 2 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 112.9211 ymin: -54.7775 xmax: 159.1054 ymax: -9.221099 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## GID_0 NAME_0 geom ## 1 AUS Australia MULTIPOLYGON (((158.8517 -5... #plot the shape plot(Ausoutline$geom) This should load quicker, but for ‘publication’ or ‘best’ analysis (i.e. not just demonstrating or testing) i’d recommend using the real file to ensure you don’t simply a potentially important variable. Check out this vignette for more information about rmapshaper Next, set our map extent to the outline of Australia then crop our WorldClim dataset to it Ausarea &lt;- extent(Ausoutline) # check the extent Ausarea ## class : Extent ## xmin : 112.9211 ## xmax : 159.1092 ## ymin : -55.11694 ## ymax : -9.142176 # now crop our temp data to the extent Austemp &lt;- crop(worldclimtemp, Ausoutline) # plot the output Austemp ## class : RasterBrick ## dimensions : 551, 554, 305254, 12 (nrow, ncol, ncell, nlayers) ## resolution : 0.08333333, 0.08333333 (x, y) ## extent : 112.9167, 159.0833, -55.08333, -9.166667 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 ## source : memory ## names : Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec ## min values : 6.360000, 6.287500, 5.554286, 4.051429, 2.542857, -0.171000, -1.945000, -1.677000, 0.677000, 3.054286, 3.842424, 5.433333 ## max values : 34.29100, 33.17400, 32.39700, 30.07200, 28.50000, 27.40000, 26.90000, 27.20000, 29.31209, 31.72000, 33.51800, 33.66700 You’ll notice that whilst we have the whole of Australia the raster hasn’t been perfectly clipped to the exact outline….the extent just specifies an extent box that will cover the whole of the shape. If want to just get raster data within the outline of the shape: exactAus=mask(Austemp, Ausoutline, na.rm=TRUE) You could also run this using the original worldclimtemp raster, however, it may take some time. I’d recommend cropping to the extent first. Both our Austemp and exactAus are raster bricks. A brick is similar to a stack except it is now stored as one file instead of a collection. Let’s re-compute our histogram for Australia in March. We could just use hist like we have done before hist(exactAus[[3]], col=&quot;red&quot;, main =&quot;March temperature&quot;) However we have a bit more control with ggplot()… 2.5.4 Histogram with ggplot We need to make our raster into a data.frame to be compatible with ggplot2 alldf=as.data.frame(exactAus) library(ggplot2) # set up the basic histogram gghist &lt;- ggplot(alldf, aes(x=Mar)) + geom_histogram(color=&quot;black&quot;, fill=&quot;white&quot;)+ labs(title=&quot;Ggplot2 histogram of Australian March temperatures&quot;, x=&quot;Temperature&quot;, y=&quot;Frequency&quot;) # add a vertical line to the hisogram showing mean tempearture gghist + geom_vline(aes(xintercept=mean(Mar, na.rm=TRUE)), color=&quot;blue&quot;, linetype=&quot;dashed&quot;, size=1)+ theme(plot.title = element_text(hjust = 0.5)) How about plotting multiple months of temperature data on the same histogram As we did in practical 2, we need to put our variaible (months) into a one coloumn using melt. We will do this based on the names of our coloumns in alldf… library(reshape2) squishdata &lt;- melt(alldf, measure.vars=names(alldf)) We could also use the functions we learnt about in [Tidying data] Then subset the data, selecting two months twomonths&lt;-subset(squishdata, variable==&quot;Jan&quot; | variable==&quot;Jun&quot;) Get the mean for each month we selected library(plyr) library(dplyr) meantwomonths &lt;- ddply(twomonths, &quot;variable&quot;, summarise, grp.mean=mean(value, na.rm=TRUE)) colnames(meantwomonths)[colnames(meantwomonths)==&quot;variable&quot;] &lt;- &quot;Month&quot; head(meantwomonths) ## Month grp.mean ## 1 Jan 28.11321 ## 2 Jun 14.96415 Select the colour and fill based on the variable (which is our month). The intercept is the mean we just calculated, with the lines also based on the coloumn variable. #rename the coloumn from variable to month so it looks # nice in the legend of the histogram colnames(twomonths)[colnames(twomonths)==&quot;variable&quot;] &lt;- &quot;Month&quot; ggplot(twomonths, aes(x=value, color=Month, fill=Month)) + geom_histogram(position=&quot;identity&quot;, alpha=0.5)+ geom_vline(data=meantwomonths, aes(xintercept=grp.mean, color=Month), linetype=&quot;dashed&quot;)+ labs(title=&quot;Ggplot2 histogram of Australian Jan and Jun temperatures&quot;, x=&quot;Temperature&quot;, y=&quot;Frequency&quot;)+ theme_classic()+ theme(plot.title = element_text(hjust = 0.5)) Note how i adjusted the title after i selected the theme, if i had done this before the theme defaults would have overwritten my command. Have you been getting an annoying error message about bin size and non-finate values? Me too!…Bin size defaults to 30 in ggplot2 and the non-finate values is referring to lots of NAs (no data) that we have in our dataset. In the code below i’ve selected a bin width of 5 and removed all the NAs with complete.cases and produced a faceted plot… # Remove all NAs data_complete_cases &lt;- squishdata[complete.cases(squishdata), ] # How many rows are left dim(data_complete_cases) ## [1] 1201812 2 # How many were there to start with dim(squishdata) ## [1] 3663048 2 # Plot faceted histogram ggplot(data_complete_cases, aes(x=value, na.rm=TRUE, color=variable))+ geom_histogram(color=&quot;black&quot;, binwidth = 5)+ labs(title=&quot;Ggplot2 faceted histogram of Australian temperatures&quot;, x=&quot;Temperature&quot;, y=&quot;Frequency&quot;)+ facet_grid(variable ~ .)+ theme(plot.title = element_text(hjust = 0.5)) Does this seem right to you? Well…yes. It shows that the distribution of temperature is higher (or warmer) in the Australian summer (Dec-Feb) than the rest of the year, which makes perfect sense. How about an interactive histogram using plotly… See if you can understand what is going on in the code below. Run each line seperately. library(plotly) # split the data for plotly based on month jan&lt;-subset(squishdata, variable==&quot;Jan&quot;, na.rm=TRUE) jun&lt;-subset(squishdata, variable==&quot;Jun&quot;, na.rm=TRUE) # give axis titles x &lt;- list (title = &quot;Temperature&quot;) y &lt;- list (title = &quot;Frequency&quot;) # set the bin width xbinsno&lt;-list(start=0, end=40, size = 2.5) # plot the histogram calling all the variables we just set ihist&lt;-plot_ly(alpha = 0.6) %&gt;% add_histogram(x = jan$value, xbins=xbinsno, name=&quot;January&quot;) %&gt;% add_histogram(x = jun$value, xbins=xbinsno, name=&quot;June&quot;) %&gt;% layout(barmode = &quot;overlay&quot;, xaxis=x, yaxis=y) ihist This format of code where you set lots of varaibles then call them within a plot, package or fuction is sometihng you should become more familiar with as it’s considerd good practice. If you were to go on and produce multiple plots using the same legends / aesthetics you only ahve to set them once. Ok so enough with the histograms…the point is to think about how to best display your data both effectively and efficiently. Let’s change the pace a bit and do a quickfire of other descrptive statistics you might want to use… library(dplyr) # mean per month meanofall &lt;- ddply(squishdata, &quot;variable&quot;, summarise, grp.mean=mean(value, na.rm=TRUE)) # print the top 1 head(meanofall, n=1) ## variable grp.mean ## 1 Jan 28.11321 # standard deviation per month sdofall &lt;- ddply(squishdata, &quot;variable&quot;, summarise, grp.sd=sd(value, na.rm=TRUE)) # maximum per month maxofall &lt;- ddply(squishdata, &quot;variable&quot;, summarise, grp.mx=max(value, na.rm=TRUE)) # minimum per month minofall &lt;- ddply(squishdata, &quot;variable&quot;, summarise, grp.min=min(value, na.rm=TRUE)) # Interquartlie range per month IQRofall &lt;- ddply(squishdata, &quot;variable&quot;, summarise, grp.IQR=IQR(value, na.rm=TRUE)) # perhaps you want to store multiple outputs in one list.. lotsofthem &lt;- ddply(squishdata, &quot;variable&quot;, summarise,grp.min=min(value,na.rm=TRUE), grp.mx=max(value, na.rm=TRUE)) # or you want to know the mean (or some other stat) for the whole year as opposed to each month... meanwholeyear=mean(squishdata$value, na.rm=TRUE) 2.6 Part 3 interpolation What if you had a selection of points over a spatial area but wanted to generate a complete raster. For this example, we will take our sample points (Australian cities) and estimate data between them using interpolation. If you look at our samples and AUcitytemp data the lat and lon is only in the former. We need to have this with our temperature data so let’s combine it using cbind samplestemp&lt;-cbind(AUcitytemp, samples) Now we need to tell R that our points are spatial points library(dplyr) # convert samples temp to a data frame samplestemp&lt;-as.data.frame(samplestemp) spatialpt &lt;- SpatialPoints(samplestemp[,c(&#39;lon&#39;,&#39;lat&#39;)], proj4string = crs(worldclimtemp)) spatialpt &lt;- SpatialPointsDataFrame(spatialpt, samplestemp) You’ll notice that here i’ve just nicked the CRS from our worldclimtemp. In generally it’s good practice to avoid using static or hard coding references, by that i mean if we added another coloumn to our samplestemp data (or manipulated somehow) then using this…don’t run this…. spatialpt &lt;- SpatialPoints(samplestemp[13:14], proj4string=CRS(&quot;+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 &quot;)) This would give us a headache as coloumns 13 and 14 might no longer be longitude and latitude. Right…plot the Australian geometry outline then add our spatial data points ontop… plot(Ausoutline$geom) plot(spatialpt, col=&quot;red&quot;, add=TRUE) Let’s interpolate using Inverse Distance Weighting, or IDW as it’s more commonly known. IDW is a deterministic method for multivaraite interpolation that estaimtes values for a surface using a weighted average of the provided data. The values closer to the point being predicted have more weight than those further away. The rate at which distance from the provided point imapcts the predcted point is controlled by the power of p. If p=0 then there is no decrease with distance. For more infomation see: https://pro.arcgis.com/en/pro-app/help/analysis/geostatistical-analyst/how-inverse-distance-weighted-interpolation-works.htm To get a meaningful result we could run some more calucaltions on let’s project our data to GDA94 (EPSG:3112) spatialpt &lt;- st_as_sf(spatialpt) spatialpt &lt;- st_transform(spatialpt, 3112) spatialpt&lt;-as(spatialpt, &#39;Spatial&#39;) Ausoutline&lt;-st_transform(Ausoutline, 3112) Ausoutline2&lt;-as(Ausoutline, &#39;Spatial&#39;) I’ve been a bit lazy here, if you recall from the previous practical session there are different ways to reproject data based if you have an SP or SF object. SP objects require you to specify the entire CRS string, so i just convered it to SF, used the ESPG code and converted it back to SP. The main reason for doing this is that i made a grid to store my interpolation and having a remote sensing background i wanted to specify the pixel size. The equivalent function if SF won’t let you specify pixel size or there is no easy and straightforward way to do it (at least to my knowledge). Next, create an empty grid where cellsize is the spatial resolution, cellsize will overwrite the number of pixels we specified (n). Here as we’ve used a projected CRS i’ve put a high cellsize (in metres) so 200km by 200km cells. You can use a smaller number if you wish but it will take much longer to process. emptygrd &lt;- as.data.frame(spsample(Ausoutline2, n=1000, type=&quot;regular&quot;, cellsize=200000)) names(emptygrd) &lt;- c(&quot;X&quot;, &quot;Y&quot;) coordinates(emptygrd) &lt;- c(&quot;X&quot;, &quot;Y&quot;) gridded(emptygrd) &lt;- TRUE # Create SpatialPixel object fullgrid(emptygrd) &lt;- TRUE # Create SpatialGrid object # Add the projection to the grid proj4string(emptygrd) &lt;- proj4string(spatialpt) library(gstat) # Interpolate the grid cells using a power value of 2 interpolate &lt;- gstat::idw(Jan ~ 1, spatialpt, newdata=emptygrd, idp=2.0) ## [inverse distance weighted interpolation] # Convert output to raster object ras &lt;- raster(interpolate) # Clip the raster to Australia outline rasmask &lt;- mask(ras, Ausoutline) # Plot the raster plot(rasmask) IDW is just one method for interpolating data, there are many more, if you are interested check out: https://mgimond.github.io/Spatial/interpolation-in-r.html 2.7 Auto data download In this practical I’ve shown you how to source the data online, download it and load it into R. However for both WorldClim and GADM we can do this straight from R using the getData function….i’m sorry for making you do it the long way, but it’s good to do things manually to see how they work. WARNING, this may take some time. I’ve changed the resolution to 10 degrees, but I’d advise not running this in the practical session. #WorldClim data has a scale factor of 10 when using getData! tmean_auto &lt;- getData(&quot;worldclim&quot;, res=10, var=&quot;tmean&quot;) tmean_auto &lt;- tmean_auto/10 Now for GADM Aus_auto &lt;- getData(&#39;GADM&#39;, country=&quot;AUS&quot;, level=0) Much more convenient right? 2.8 Advanced analysis Are you already comptent with raster analysis and R, then have a go at completing this task in the practical session. Within the practical we’ve loaded one and created one raster layer. Undertake some comparative analysis to detemrine spatial (and temporal if appropraite) differences between the rasters here and any others you may wish to create (e.g. from other interpolation methods). Try to identify where the varaitions are and explain why they are occuring. You could assume that one raster is the ‘gold standard’ meaning it’s beleived to be fully correct and compare others to it. … Or you could go further than this and obtain weather station temperature data (or any other variable) for multiple sites, interpolate based on 50% of the sites and use the remaining sites to assess the accuracy of your selected method / the WorldClim data. Free weather station data can be found here: https://rp5.ru/Weather_in_the_world Have a go and discuss with your fellow students / members of the teaching team during the practical sessions or on slack. 2.9 Feedback Was anything that we explained unclear this week or was something really clear…let us know here. It’s anonymous and we’ll use the responses to clear any issues up in the future / adapt the material. "],
["test.html", "Chapter 3 test", " Chapter 3 test Figure 3.1: The blue markers indicate where the authors are from. The basemap is a tiled image of the Earth at night provided by NASA. Interact with the online version at geocompr.robinlovelace.net, for example by zooming in and clicking on the popups. "]
]
