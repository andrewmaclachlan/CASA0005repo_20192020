[
["index.html", "CASA0005 Geographic Information Systems and Science Welcome The world of GIS Getting started Offline viewing More help Noticed a mistake?", " CASA0005 Geographic Information Systems and Science Andy MacLachlan and Adam Dennett 2019-07-11 Welcome Welcome to the CASA0005 Geographic Information Systems and Science online pratical handbook. This website is hosted on GitHub and holds all the practical instructions and data. All data used within the practicals is available online, however occasionally websites can undergo maintenance or be inaccessible due to political factors such as government shutdowns. If you need the practical data you can access it from my github repository here: https://github.com/andrewmaclachlan/CASA0005book Practical data is divided into the relevant sessions, although sometimes i’ll refer to a dataset used within a previous week. The world of GIS Spatial analysis can yield fascinating insights into geographical relationships. However, at times it can be difficult to work with. You will get lots of error messages and have software crash. The academic staff are here to help you work through these practicals but we do not know everything. It’s a good idea to become familar with online sources of help, such as: Stack Exchange https://stackexchange.com/ QGIS documemtation https://docs.qgis.org/3.4/en/docs/index.html R documentation https://www.rdocumentation.org/ ArcGIS help pages https://support.esri.com/en Getting started One of the issues with GIS is that many of the files we will be working with are quite large. Fortunately in recent years UCL has seriously beefed up the storage available for students. You now get 100GB of free storage, which should be plenty for the work you will be doing this year! The Bartlett faculty has several gigabytes of storage space available on their central servers, so before we get started, we will connect to our N drive to carry out all of our practical work over the coming weeks. Offline viewing The best way to view this practical book is through the website. However if you are unable to access the internet you can either download the .epub book or save specific webpages for offline viewing. Insturctions for Google Chrome are provided here: https://support.google.com/chrome/answer/7343019?co=GENIE.Platform%3DDesktop&amp;hl=en&amp;oco=1 More help If you need specific assistance with this course please: Check the module handbook for queries relating to assignments / deadlines Speak to a member of the teaching team in the computer lab sessions Ask a question at the end of a lecture (time permitting) Ask a question on slack Due to the size of the class we will only reply to messages on slack so all students can see the discussion. If after persuing all these avenues you still need help you can book into our office hours are specified below. These meetings are to discuss a geographical concept in relation to the material/assignments or for any personal matters relevant to the completion of the course. These meetings are not to be used for specific technical issues. Problems of this nature should be addressed in the practical sessions. Andy: https://amaclachlan.youcanbook.me/ Adam: https://amaclachlan.youcanbook.me/ Noticed a mistake? No one is perfect, if you notice a mistake let us know through the GitHub issues tab…Don’t worry if you are unsure about what GitHub is we, cover it in the course. "],
["geographic-information.html", "Chapter 1 Geographic Information 1.1 Learning outcomes 1.2 The Basics of Geographic Information 1.3 Data 1.4 Data sources and task 1.5 Summary", " Chapter 1 Geographic Information 1.1 Learning outcomes By the end of this practical you should be able to: Describe and explain GIS data formats and databases Source and pre-process spatial data Load and undertaken some basic manipulation of spatial data in: ArcMap, QGIS and R Evaluate the (dis)advantages of each GIS you have used 1.2 The Basics of Geographic Information Geographic data, geospatial data or geographic information is data that identifies the location of features on Earth. There are two main types of data which are used in GIS applications to represent the real world. Vectors that are composed of points, lines and polygons and rasters that are grids of cells with individual values. In the above example the features in the real world (e.g. lake, forest, marsh and grassland) have been represented by points, lines and polygons (vector) or discrete grid cells (raster) of a certain size (e.g. 1 x 1m) specifying land cover type. 1.2.1 Important GIS data formats There are a number of commonly used geographic data formats that store vector and raster data that you will come across during this course and it’s important to understand what they are, how they represent data and how you can use them. 1.2.1.1 Shapefiles Perhaps the most commonly used GIS data format is the shapefile. Shapefiles were developed by ESRI (http://www.esri.com/) – one of the first and now certainly the largest commercial GIS company in the world. Despite being developed by a commercial company, they are mostly an open format and can be used (read and written) by a host of GIS Software applications. A shapefile is actually a collection of files – at least three of which are needed for the shapefile to be displayed by GIS software. They are: .shp - the file which contains the feature geometry .shx - an index file which stores the position of the feature IDs in the .shp file .dbf - the file that stores all of the attribute information associated with the coordinates – this might be the name of the shape or some other information associated with the feature .prj - the file which contains all of the coordinate system information (the location of the shape on Earth’s surface). Data can be displayed without a projection, but the .prj file allows software to display the data correctly where data with different projections might be being used 1.2.1.2 GeoJSON GeoJSON (Geospatial Data Interchange format for JavaScript Object Notation, http://geojson.org/) is becoming an increasingly popular spatial data format, particularly for web-based mapping as it is based on JavaScript Object Notation. Unlike a shapefile in a GeoJSON, the attributes, boundaries and projection information are all contained in the same file. 1.2.1.3 Shapefile and GeoJSON We’re now going to explore a shapefile (.shp ) and GeoJSON (.geojson) in action. Go to: http://geojson.io/#map=16/51.5247/-0.1339 Using the drawing tools to the right of the map window, create 3 objects: a point, line and a polygon as I have done above. Click on your polygon and colour it red and colour your point green Using the ‘Save’ option at the top of the map, save two copies of your new data – one in .geojson format and one in .shp format Open your two newly saved files in a text editor such as notepad or notepad++. For the shapefile you might have to unzip the folder then open each file individually. What do you notice about the similarities or differences between the two ways that the data are encoded? 1.2.1.4 Raster data Most raster data is now provided in GeoTIFF (.tiff) format, which stands for Geostarionary Earth Orbit Tagged Image File. The GeoTIFF data format was created by NASA and is a standard public domain format. All necesary information to establish the location of the data on Earth’s surface is embedded into the image. This includes: map projection, coordinate system, ellipsoid and datum type. 1.2.1.5 Other data formats Aforementioned data types and formats are likely to be the ones you predominately encounter. However there are several more used within spatial analysis. These include: Vector GML (Geography Markup Language – gave birth to KML) - http://www.opengeospatial.org/standards/gml Raster Band SeQuential (BSQ) - technically a method for encoding data but commonly referred to as BSQ. Hierarchical Data Format (HDF) Arc Grid There are normally valid reasons for storing data in one of these other formats. For example, BSQ are raster data with a separate text header file (.hdr) providing geographic spatial reference information. Earth observation data often monitors the electromagnetic spectrum in bands. Humans see in the visible range of the spectrum and our vision is composed of red, green and blue wavelengths. If we wanted to analyse just the red wavelength the BSQ format would let us read in only that data. In comparison a GeoTIFF might come with all the data ‘packaged’ in one file and when doing analysis over thousands of images would significantly slow things down. That said you can now often find GeoTIFFs separated in a similar format to BSQ and it’s fairly straightforward to convert between raster formats. 1.2.1.6 Geodatabase A geodatabase is a collection of geographic data held within a database. Geodatabases were developed by ESRI to overcome some of the limitations of shapefiles. They come in two main types: Personal (up to 1 TB) and File (limited to 250 - 500 MB), with Personal Geodatabases storing everything in a Microsoft Access database (.mdb) file and File Geodatabases offering more flexibility, storing everything as a series of folders in a file system. In the example below we can see that the FCC_Geodatabase (left hand pane) holds multiple points, lines, polygons, tables and raster layers in the contents tab. 1.2.1.7 GeoPackage A GeoPackage is an open, standards-based, platform-independent, portable, self-describing, compact format for transferring geospatial data. It stores spatial data layers (vector and raster) as a single file, and is based upon an SQLite database, a widely used relational database management system, permitting code based, reproducible and transparent workflows. As it stores data in a single file it is very easy to share, copy or move. 1.2.1.8 SpatiaLite SpatialLite is an open-source library that extends SQLite core. Support is fairly limited and most software that supports SpatiaLite also supports GeoPackage, as they both build upon SQLite. It doesn’t have any clear advantage over GeoPackage, however it is unable to support raster data. 1.2.1.9 PostGIS PostGIS is an opensource database extender for PostrgeSQL. Essentially PostgreSQL is a database and PostGIS is an add on which permits spatial functions. The advantages of using PostGIS over a GeoPackage are that it allows users to access the data at the same time, can handle large data more efficiently and reduces processing time. In this example (https://medium.com/@GispoLearning/learn-spatial-sql-and-master-geopackage-with-qgis-3-16b1e17f0291) calculating the number of bars per neighbourhood in Leon, Mexico the processing time reduced from 1.443 seconds (SQLite) to 0.08 seconds in PostGIS. However, data stored in PostGIS is much harder to share, move or copy. 1.2.1.10 What will I use The variety of data formats can see a bit overwhelming. But don’t worry, most of the time you’ll be using shapefiles, GeoPackages or raster data. 1.3 Data The volume of geographic information which is freely available for use in the UK is increasing exponentially and spatially referenced data can often be found in many different places. In this practical we’re going to use data from the London data store — a free and open data-sharing portal provided by the Greater London Authority (GLA), also known as City Hall that is the devolved regional governance body of London. We are going to get spatial data of the London boroughs and join flytipping (the illegal deposit of waste, commonly on road verges) data that is provided as a .csv file. .csv stands for comma-separated values (CSV) — it uses a comma to separate each value. At the end of this document I’ll also run through some common sources of data that will stand you in good stead (be advantageous) for the rest of the course. 1.3.1 File paths In your N drive: create a new folder called GIS and within this a sub folder called wk1. It is up to you how you organise your files. Make sure you change the file paths within where appropriate to your own. 1.3.2 Data download Firstly we need to get a spatial outline of the London boroughs. The geographic boundaries that are used in the UK are a complex, often inter-related, but ever changing mass of areas. For anyone new to the UK (or indeed not a trained quantitative geographer), it can be quite a daunting task to attempt to understand all of the boundaries that are in use. Fortunately the Office for National Statistics (ONS) has an online beginners guide to UK geography. If you need more information on the vast array of different UK geographies, this is the place to start: http://geoportal.statistics.gov.uk/datasets/a-beginners-guide-to-uk-geography-2018-v1-0 Spatial Data To get the data go to: https://data.london.gov.uk/ Search for Statistical GIS Boundary Files for London Download the statistical-gis-boundaries-london.zip Unzip the data and save it to your wk1 folder. CSV data On the same website search for fly-tipping incidents Download the .csv file 1.3.3 Data pre-processing Question Open the .csv in Excel, what do you notice about how the data is stored? Answer The year is a column and for each area the values are repeated for different years. In our analysis it is easier to have the different years as a column and populated for each area. So, we want to go from this… To this… As we are going to use this dataset in ArcMap, QGIS and R I’ve done it in Excel using a pivot table. Go to Insert &gt; PivotTable Select the original table and create a PivotTable in a new worksheet The PivotTable Field box will appear, experiment with the different fields in each of the areas I’ve used the following: Note how I’ve altered the total_action_taken to the sum of… as the original was displaying incorrectly, to do so: Click on drop down button for total_action_taken &gt; Value Field Settings &gt; select Count It’s important to think about what data we actually need in the next step and it’s good practice to avoid data redundancy where possible. Spoiler The spatial data we have downloaded already contains borough name, so we don’t need it twice. However, we do need a field to link the two datasets on. You could use borough name, but when using text fields sometimes input variations can affect joins. For example, you had the University of Manchester in one dataset and Manchester University in another the join would fail. Consequently it’s usually best to join datasets on a code field. Now save the Excel sheet that contains the pivot table as a new .csv. Make sure that the first row of data holds the column titles. Remove all empty rows. When saving the file also avoid any special characters (e.g. -) and spaces, use an underscore instead of spaces. Warning Spatial software (especially ArcGIS) does not like file names with spaces or special characters. 1.3.4 Data loading Now it’s time to load, inspect and do some basic manipulation of this data. As mentioned in the lecture there are several GIS software ‘types’, here we will repeat the same process across ArcGIS, QGIS and R. Each system has specific benefits, but in general there has been a recent shift towards the use of QGIS and R, both being opensource. ArcGIS was the first major spatial analysis software produced by the Environmental Systems Research Institute, Inc. (Esri), founded in 1969 by Jack Dangermond. Due to its high cost and lack of customisation it is now less commonly used within the research community. 1.3.5 ArcGIS 1.3.5.1 Basics ArcGIS should be installed as a standard programme in the UCL desktop and you can navigate to it from the Windows start button. 1.3.5.1.1 Installing ArcGIS on your own computer As a UCL student, you can install ArcGIS on your own computer. This is easy if you have a PC, but if you have a Mac this can be trickier as Arc will only run in a PC environment. If you have a Mac, the options open to you are either to: Run ArcGIS through the Desktop@UCL application - http://www.ucl.ac.uk/isd/services/computers/remote-access/desktop Duel boot your machine using bootcamp, install Windows (7 or 8 is fine) and then install Arc onto the Windows partition. Install some kind of virtualisation software such as Parallels (http://www.parallels.com/ca/products/desktop/) or VMware (http://www.vmware.com/products/fusion/), and run Arc on a virtual windows machine If you can, it is preferable to run Arc on Bootcamp as virtualisation software can be slow, but the Desktop@UCL facility should suffice for this course. ArcGIS (Version 10.6 is the latest at time of writing, but may have already been superseded) can be downloaded from the UCL Software Database for free — https://swdb.ucl.ac.uk/. 1.3.5.1.2 Getting Help ArcGIS is a huge and complex piece of software, but thankfully is has an excellent help system – depending on the version you are using (they are all quite similar anyway) you can access the online help system here: http://resources.arcgis.com/en/help/main/10.2/ http://resources.arcgis.com/en/help/main/10.1/ 1.3.5.1.3 ArcGIS ArcGIS is actually a whole suite of software built and maintained by ESRI (http://www.esri.com/software/arcgis).Within the ArcGIS for Desktop suite you will find the following programmes: ArcCatalog — Similar to Windows Explorer, ArcCatalog allows you to manage your GIS files, folders and geodatabases ArcGIS Administrator — This programme us used to manage licences for the various elements of ArcGIS ArcGlobe — ArcGlobe allows you to view and analyse your data in 3D –– this interface looks very similar to Google Earth and is part of the 3D analyst extension ArcMap — This is the programme you will use most often –– it is the main mapping and spatial analysis element of ArcGIS ArcScene — ArcScene is a 3D viewer which allows you to navigate and interact with your 3D raster and feature data ArcCatalog and ArcMap are in bold as these are the only programmes we will be using explicitly in this course. By all means experiment with the others if you have any spare time! 1.3.5.2 ArcCatalog Find and run the ArcCatalog piece of software Once ArcCatalog Opens, go to File &gt; Connect To Folder… and navigate to the N:folder, right click in the contents area and create a new File Geodatabase. You can import data layers into a Geodatabase within ArcCatalog, however we will do this in ArcMap. Close ArcCatalog and never have both ArcCatalog and another ArcGIS product open at the same time. 1.3.5.3 ArcMap 1.3.5.3.1 Introduction ArcMap is the core of the ArcGIS suite and where you would normally produce maps, carry out spatial analysis functions and automate processes. Search for and open ArcMap Upon opening select the database you just created in the dialogue box Click ok When the map document opens you should see something similar to the image below, highlighting some of the key buttons: It’s important to now set the map document up properly. Go File &gt; Map Document Properties, enter the details you wish. You can see the connection to the Geodatabase we just made. Click store relative pathnames, this means as long as the data stays in the same position relative to the path then ArcMap can load all the layers. For example if you moved your work from the C: drive to an external drive, H:. 1.3.5.3.2 Load data Using the Plus icon (add data layer) navigate to the extracted folder you saved earlier. Open London_Borough_Excluding_MHW.shp, but feel free to explore the other data layers. In the left hand Table Of Contents you can unselect layers to turn them off or drag layers above or below to change the display order. In the example below the wards layer is showing above the borough layer. Note, while we have loaded the shapefile, it is not stored in our Geodatabase yet. Useful tips To the right of the document you will see the Catalog and Search tabs.The Catalog tab is a more compact version of ArcCatalog and will let you see what data is stored in the current Geodatabase. The search tab will let you find any analysis tool within ArcGIS. Try searching for Clip. If you right click on the boroughs layer (in the Table of Contents, left hand pane) you will see various options. Zoom to layer is very useful if you ever get lost in your ArcMap document. Now right click on the borough layer (in the Table of Contents) and open the attribute table. You’ll see the GSS_CODE field, which is the same code we output in our .csv. If you now right click on a field you’ll also be able to see the data type (e.g. string, integer). For example: 1.3.5.3.3 Join data We’re now going to join our flytipping data to the London borough shapefile. So: Right click on the london borough layer &gt; Joins and Relates &gt; Join Select the GSS_CODE as the field in the layer to base the join on Navigate to the .csv we created earlier Select the code field that matches (in my case this is called Row Labels) Select only to join matching records Validate join and click OK You will get errors, ArcMap does not like fields starting with numbers (e.g. 2012), dashes (e.g. -) or spaces. Feel free to change them in the original .csv but for this practical it is fine to continue. The join should work, so reopen the attribute table for the layer London boroughs Note, the join we have made is not permanent. To do so we need to export the layer. 1.3.5.3.4 Export data Right click on the london boroughs layer &gt; Data &gt; Export Data The location should default to our GeoDatabase. Be sure to change the filename — again avoid all of the characters (e.g. spaces and -) previously mentioned. Add the data layer to the map Now lets use the data we’ve joined to create a basic thematic map. Right click on the new London borough layer &gt; Properties Under the Symbology tab select Graduated colors Select the Value as one of the years of data we joined and change the classificaiton to something of your choice You should have something that looks like this: We haven’t talked about the Coordiante Reference System (CRS) (or Spatial Reference System (SRS)) of our map document A coordinate reference system is a series of parameters that define the coordinate system. Within GIS we use geographic or projected coordinate systems. The former uses a three-dimensional spherical surface to define locations of Earth, whereas the latter is defined on a flat, two-dimensional surface giving it constant lengths, angles and areas. In ArcMap we can specify what CRS we want to use by: Right clicking on the map document &gt; Data Frame Properties You’ll see that it is already set to Projected Coordinate Systems, National Grids, Europe, British National Grid. This is because ArcMap will default to the coordinate system of the first data layer loaded. Save and then close your ArcMap document. We’re now going to replicate this task in QGIS. Note As we are going to open the same files in difference GIS systems it is important to close the software before moving on. If you don’t then files can be locked and unreadable as they are still considered to be in use. 1.3.6 QGIS 1.3.6.1 Introduction QGIS is very similar to ArcMap except that as it is open-source and free there are many add on packages that (or plugins) that provide additional functionality to the software. To get QGIS on your personal machine go to: https://qgis.org/en/site/forusers/download.html I install the OSGeo4W version. The nature of open-source means that several programs will rely on each other for features. OSGeo4W tracks all the shared requirements and does not intall any duplicates. 1.3.6.2 Load data Search for and open QGIS Click on the open data source manager. Just above the word browser in the top left of the screen Navigate to the London boroughs layer .shp and add it, you then have to close the data source manager Just like in ArcMap you can right click on the layer to view the attribute table. Unlike ArcMap you have to load the .csv file into QGIS in order to join it to a shapefile. Open the data source manager and select Delimited Text Navigate to our .csv file and provide a suitable layer name Under Record and Fields Options make sure the number of header lines to discard is 0 and the First record has field names box is selected (this is assuming you left a title for each column in your .csv) Under Geometry Definition select No geometry (attribute table only) Does the sample data seem right? If so, click add then close 1.3.6.3 Join data Right click on the London boroughs layer &gt; Properties &gt; Joins Click the plus button at the bottom of the box Complete the dialogue box 1.3.6.4 Export data Now instead of using a GeoDatabase, let’s export to a GeoPackage. Right click on the London boroughs layer &gt; Export &gt; Save Feature As Select the GeoPackage format and complete the File name (the saved file name for the GeoPackage) and the Layer name (the name for this layer within the GeoPackage). Recall that a GeoPackage can store many data layers as a single file The new layer will be added to the map, so you can remove the old one. Make sure you remove the right one We’ve now made a GeoPackage that we can connect our map project to. Under Browser, Right click on GeoPackage &gt; New Connection &gt; Navigate to your GeoPackage Click the down arrow left to GeoPackage and you should see the one you just navigated to. Click the down arrow on the database and you can see your layer. Now we are going to import our .csv into our GeoPackage. To do so go: Database &gt; DB Manager Select your GeoPackage in the left hand pane Import layer/file then select the .csv. Click Ok. Again, remember that the .csv in the Layers tab (bottom left) is the original. Remove it, then from the GeoPackage just click, hold and drag the .csv into the layer pane. Now let’s make a quick thematic map like we did in ArcMap. Right click on your London boroughs layer &gt; Properties &gt; Symbology Select categorised and choose a data column and color ramp You could also select graduated, however our joined data fields are in the wrong data type. If you wish to change them follow this guide: https://wiki.tuflow.com/index.php?title=QGIS_Change_Attribute_Type Save your QGIS project You should have produced something like this: Spatial reference QGIS is similar but different to ArcMap. QGIS defaults to the Coordinate Reference System (CRS) WGS 84, or known by its European Petroleum Survey Group (EPSG) code 4326. However, when you add your first layer in will default to that CRS. We’ll go into the background of EPSG next time. You can change the CRS by going File &gt; Properties and selecting CRS in the left hand pane. 1.3.7 R 1.3.7.1 Introduction R is both a programming language and software environment, originally designed for statistical computing and graphics. R’s great strength is that it is open-source, can be used on any computer operating system and free for anyone to use and contribute to. Because of this, it is rapidly becoming the statistical language of choice for many academics and has a huge user community with people constantly contributing new packages to carry out all manner of statistical, graphical and importantly for us, geographical tasks. The purpose of this practical is just to demonstrate data loading and manipulation in different software. The next practical will provide much more detail on R, so don’t worry. Search for and open R Studio. You can install R Studio on your own machine from: https://www.rstudio.com/products/rstudio/download/#download R studio requires R which you can download from: https://cran.rstudio.com/ RStudio is a free and open-source integrated development environment for R — it makes R much easier to use. In RStduio go: File &gt; New File &gt; R Script You should be able to see these quadrants: Below are bits of code, to start we will work using the console. So just copy the bits of code into the console window, changing the file names to where your data is stored. Then at the end of this section I’ll show you how to make a script. R works on packages that are collections of functions and data. For this practical we will need the ones listed in the code chunk below. Whilst we’ve installed them, we haven’t yet loaded them. It’s best practice to do all this at the start of your code, however, for demonstration purposes I’ll load each one as we need it. install.packages(&quot;sf&quot;, &quot;tmap&quot;, &quot;tmaptools&quot;, &quot;RSQLite&quot;, repos = &quot;https://www.stats.bris.ac.uk/R/&quot;) Packages we’ve installed: sf: simple features, standard way to encode spatial vector data tmap: layer-based and easy approach to make thematic maps tmaptools: set of tools for reading and processing spatial data RSQLite: embeds the SQLite database engine in R Here, repos stands for repository where we will download the packages from. 1.3.7.2 Load data Great, load the sf package so we can read our shapefile in — remember to change to filepath to your shapefile. Note by default in R, the file path should be defined with / but on a #windows file system it is defined with . Using \\ instead allows R #to read the path correctly – alternatively, just use / library(sf) shape &lt;- st_read(&quot;Prac1_data/statistical-gis-boundaries-london/ESRI/London_Borough_Excluding_MHW.shp&quot;) ## Reading layer `London_Borough_Excluding_MHW&#39; from data source `C:\\Users\\ucfnmac\\OneDrive - University College London\\Teaching\\CASA0005repo\\Prac1_data\\statistical-gis-boundaries-london\\ESRI\\London_Borough_Excluding_MHW.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 33 features and 7 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## epsg (SRID): NA ## proj4string: +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.999601272 +x_0=400000 +y_0=-100000 +datum=OSGB36 +units=m +no_defs To get a summary of the data held within the shapefile data (attribute table) enter the following: summary(shape) ## NAME GSS_CODE HECTARES ## Barking and Dagenham: 1 E09000001: 1 Min. : 314.9 ## Barnet : 1 E09000002: 1 1st Qu.: 2724.9 ## Bexley : 1 E09000003: 1 Median : 3857.8 ## Brent : 1 E09000004: 1 Mean : 4832.4 ## Bromley : 1 E09000005: 1 3rd Qu.: 5658.5 ## Camden : 1 E09000006: 1 Max. :15013.5 ## (Other) :27 (Other) :27 ## NONLD_AREA ONS_INNER SUB_2009 SUB_2006 geometry ## Min. : 0.00 F:19 NA&#39;s:33 NA&#39;s:33 MULTIPOLYGON :33 ## 1st Qu.: 0.00 T:14 epsg:NA : 0 ## Median : 2.30 +proj=tmer...: 0 ## Mean : 64.22 ## 3rd Qu.: 95.60 ## Max. :370.62 ## To have a quick look what the shapefile looks like enter the following: plot(shape) From what we did in QGIS and ArcMap this should look familiar. We now need to load our .csv file: mycsv &lt;- read.csv(&quot;Prac1_data/fly_tipping_borough_edit.csv&quot;) To view the data just input: mycsv ## Row.Labels X2011_12 X2012_13 X2013_14 X2014_15 X2015_16 X2016_17 ## 1 E09000001 563 1492 433 347 587 1944 ## 2 E09000002 2687 2122 1399 3100 2672 1130 ## 3 E09000003 2356 1828 890 219 615 130 ## 4 E09000004 505 627 732 399 262 439 ## 5 E09000005 6713 2232 3189 3926 3980 4366 ## 6 E09000006 306 479 653 462 326 228 ## 7 E09000007 5541 5962 8281 4837 4719 4656 ## 8 E09000008 31 108 460 712 1707 637 ## 9 E09000009 6727 5679 6543 5521 6067 12688 ## 10 E09000010 7262 3595 3269 4937 5292 10894 ## 11 E09000011 6344 7482 13950 17667 6410 2188 ## 12 E09000012 2332 1456 10495 8865 9494 5601 ## 13 E09000013 6944 1719 1719 1632 1868 4857 ## 14 E09000014 8817 4719 7633 8639 3615 5131 ## 15 E09000015 1053 0 0 995 1354 1385 ## 16 E09000016 13970 13762 13393 7404 8523 11748 ## 17 E09000017 5120 4188 3101 0 620 3031 ## 18 E09000018 1234 1030 994 2190 1865 2242 ## 19 E09000019 6959 6167 8646 8172 8250 7878 ## 20 E09000020 4773 5009 6353 6651 6308 9282 ## 21 E09000021 0 0 0 0 0 0 ## 22 E09000022 598 0 0 0 0 0 ## 23 E09000023 789 1083 1499 2627 2611 1454 ## 24 E09000024 1279 1299 1305 6985 2542 6056 ## 25 E09000025 9593 7283 10354 8620 10621 5155 ## 26 E09000026 6114 6913 4778 6306 4319 2489 ## 27 E09000027 2610 2291 2647 207 2133 3337 ## 28 E09000028 0 1194 3776 1889 1476 1937 ## 29 E09000029 1255 201 755 545 146 278 ## 30 E09000030 3251 4909 18057 17064 17494 14601 ## 31 E09000031 17182 17049 17176 17361 12290 18459 ## 32 E09000032 8226 5166 6674 4977 8547 9582 ## 33 E09000033 8367 6636 6166 6380 3447 3876 ## 34 Grand Total 149501 123680 165320 159636 140160 157679 ## X2017_18 Grand_Total ## 1 2579 7945 ## 2 1066 14176 ## 3 503 6541 ## 4 327 3291 ## 5 7483 31889 ## 6 258 2712 ## 7 12671 46667 ## 8 2684 6339 ## 9 5471 48696 ## 10 5855 41104 ## 11 1443 55484 ## 12 11172 49415 ## 13 2982 21721 ## 14 3171 41725 ## 15 1622 6409 ## 16 10463 79263 ## 17 4393 20453 ## 18 4334 13889 ## 19 7231 53303 ## 20 10165 48541 ## 21 3 3 ## 22 959 1557 ## 23 1330 11393 ## 24 6299 25765 ## 25 3615 55241 ## 26 5670 36589 ## 27 2615 15840 ## 28 2255 12527 ## 29 450 3630 ## 30 13316 88692 ## 31 17036 116553 ## 32 9735 52907 ## 33 7111 41983 ## 34 166267 1062243 1.3.7.3 Join data In R we’ve given our London boroughs shapefile the name shape and our flytipping .csv the name mycsv. If you look in the Environment quadrant you should see them both listed. Join the .csv to the shapefile. Here, replace Row.Labels with whatever your GSS_CODE is called in the .csv: library(tmap) library(tmaptools) library(sf) ## Linking to GEOS 3.6.1, GDAL 2.2.3, PROJ 4.9.3 shape &lt;- append_data(shape, mycsv, key.shp=&quot;GSS_CODE&quot;, key.data = &quot;Row.Labels&quot;) ## Over coverage: 1 out of 34 data records were not appended. Run over_coverage() to get the corresponding data row numbers and key values. Let’s break this down a bit. We just created a data frame (my.csv) where each column has a variable and each row contains a set of values — so basically a normal table. The match simply found the GSS_CODE values in the .csv and joined the data to our shapefile. The message detailing 1 out of the 34 data records were not appended refers to the Grand Total row within the .csv. Check the merge was successful, this is just going to show the top 10 rows: head(shape, n=10) ## Simple feature collection with 10 features and 15 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 198355.2 ## epsg (SRID): NA ## proj4string: +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.999601272 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.06,0.1502,0.247,0.8421,-20.4894 +units=m +no_defs ## NAME GSS_CODE HECTARES NONLD_AREA ONS_INNER SUB_2009 ## 21 Kingston upon Thames E09000021 3726.117 0.000 F &lt;NA&gt; ## 8 Croydon E09000008 8649.441 0.000 F &lt;NA&gt; ## 6 Bromley E09000006 15013.487 0.000 F &lt;NA&gt; ## 18 Hounslow E09000018 5658.541 60.755 F &lt;NA&gt; ## 9 Ealing E09000009 5554.428 0.000 F &lt;NA&gt; ## 16 Havering E09000016 11445.735 210.763 F &lt;NA&gt; ## 17 Hillingdon E09000017 11570.063 0.000 F &lt;NA&gt; ## 15 Harrow E09000015 5046.330 0.000 F &lt;NA&gt; ## 5 Brent E09000005 4323.270 0.000 F &lt;NA&gt; ## 3 Barnet E09000003 8674.837 0.000 F &lt;NA&gt; ## SUB_2006 X2011_12 X2012_13 X2013_14 X2014_15 X2015_16 X2016_17 X2017_18 ## 21 &lt;NA&gt; 0 0 0 0 0 0 3 ## 8 &lt;NA&gt; 31 108 460 712 1707 637 2684 ## 6 &lt;NA&gt; 306 479 653 462 326 228 258 ## 18 &lt;NA&gt; 1234 1030 994 2190 1865 2242 4334 ## 9 &lt;NA&gt; 6727 5679 6543 5521 6067 12688 5471 ## 16 &lt;NA&gt; 13970 13762 13393 7404 8523 11748 10463 ## 17 &lt;NA&gt; 5120 4188 3101 0 620 3031 4393 ## 15 &lt;NA&gt; 1053 0 0 995 1354 1385 1622 ## 5 &lt;NA&gt; 6713 2232 3189 3926 3980 4366 7483 ## 3 &lt;NA&gt; 2356 1828 890 219 615 130 503 ## Grand_Total geometry ## 21 3 MULTIPOLYGON (((516401.6 16... ## 8 6339 MULTIPOLYGON (((535009.2 15... ## 6 2712 MULTIPOLYGON (((540373.6 15... ## 18 13889 MULTIPOLYGON (((521975.8 17... ## 9 48696 MULTIPOLYGON (((510253.5 18... ## 16 79263 MULTIPOLYGON (((549893.9 18... ## 17 20453 MULTIPOLYGON (((510599.8 19... ## 15 6409 MULTIPOLYGON (((510599.8 19... ## 5 31889 MULTIPOLYGON (((525201 1825... ## 3 6541 MULTIPOLYGON (((524579.9 19... Now, let’s make a quick thematic map (or a qtm) using the package tmap. I’ve made mine for flytipping between 2011 and 2012 (column X2011_12): library(tmap) library(tmaptools) tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting qtm(shape, fill = &quot;X2011_12&quot;) 1.3.8 Export data Finally write shape to a new GeoPackage (.gpkg) giving it the layer name of your choice: st_write(shape, &quot;Prac1_data/Rwk1.gpkg&quot;, &quot;london_boroughs_fly_tipping&quot;, delete_layer=TRUE) ## Deleting layer `london_boroughs_fly_tipping&#39; using driver `GPKG&#39; ## Updating layer `london_boroughs_fly_tipping&#39; to data source `Prac1_data/Rwk1.gpkg&#39; using driver `GPKG&#39; ## features: 33 ## fields: 15 ## geometry type: Multi Polygon So here, we are saying the shape is the object we want to save, then to the GeoPackage file path, with the layer name of london_boroughs_fly_tipping. I’ve set delete_layer to true so I could overwrite mine when I developed this practical. Changing it to false would generate an error message if you ever tried to re-run the code. Let’s also add the .csv as we did in QGIS. This is a bit more complicated as we have to use the SQLite database package. Firstly, connect to the .gpkg we just made: library(RSQLite) con = dbConnect(SQLite(),dbname=&quot;Prac1_data/Rwk1.gpkg&quot;) Now examine what is in the .gpkg: dbListTables(con) ## [1] &quot;gpkg_contents&quot; ## [2] &quot;gpkg_extensions&quot; ## [3] &quot;gpkg_geometry_columns&quot; ## [4] &quot;gpkg_metadata&quot; ## [5] &quot;gpkg_metadata_reference&quot; ## [6] &quot;gpkg_ogr_contents&quot; ## [7] &quot;gpkg_spatial_ref_sys&quot; ## [8] &quot;gpkg_tile_matrix&quot; ## [9] &quot;gpkg_tile_matrix_set&quot; ## [10] &quot;london_boroughs_fly_tipping&quot; ## [11] &quot;london_boroughs_fly_tippint&quot; ## [12] &quot;original_csv&quot; ## [13] &quot;rtree_london_boroughs_fly_tipping_geom&quot; ## [14] &quot;rtree_london_boroughs_fly_tipping_geom_node&quot; ## [15] &quot;rtree_london_boroughs_fly_tipping_geom_parent&quot; ## [16] &quot;rtree_london_boroughs_fly_tipping_geom_rowid&quot; ## [17] &quot;rtree_london_boroughs_fly_tippint_geom&quot; ## [18] &quot;rtree_london_boroughs_fly_tippint_geom_node&quot; ## [19] &quot;rtree_london_boroughs_fly_tippint_geom_parent&quot; ## [20] &quot;rtree_london_boroughs_fly_tippint_geom_rowid&quot; ## [21] &quot;sqlite_sequence&quot; Then add add our .csv and disconnect from the .gpkg: dbWriteTable(con,&quot;original_csv&quot;, mycsv, overwrite=TRUE) dbDisconnect(con) 1.3.8.1 Making a script To convert this bit of analysis into a script that we could save and run again in future, I would write the following in the script quadrant: install.packages(&quot;sf&quot;, &quot;tmap&quot;, &quot;tmaptools&quot;, &quot;RSQLite&quot;, repos = &quot;https://www.stats.bris.ac.uk/R/&quot;) library(sf, tmap, tmaptools, RSQLite) shape &lt;- st_read(&quot;Prac1_data/statistical-gis-boundaries-london/ESRI/London_Borough_Excluding_MHW.shp&quot;) mycsv = read.csv(&quot;Prac1_data/fly_tipping_borough_edit.csv&quot;) shape&lt;-append_data(shape, mycsv, key.shp=&quot;GSS_CODE&quot;, key.data = &quot;Row.Labels&quot;) tmap_mode(&quot;plot&quot;) qtm(shape, fill = &quot;X2011_12&quot;) st_write(shape, &quot;Prac1_data/Rwk1.gpkg&quot;, &quot;london_boroughs_fly_tipping&quot;, delete_layer=TRUE) con = dbConnect(SQLite(),dbname=&quot;Prac1_data/Rwk1.gpkg&quot;) dbListTables(con) dbWriteTable(con,&quot;original_csv&quot;, mycsv, overwrite=TRUE) dbDisconnect(con) You can then save your script through File &gt; Save As. 1.3.9 What will I use Well… it depends. If you wanted to quickly open a dataset to explore its contents then I’d use QGIS or ArcMap. However, if you had 100 raster images that you wanted to clip to your study area, I’d automate it in R. There are also specific packages developed for each type of software that might dictate what you use, for example I recently made use of the Urban Multi-scale Environmental Predictor (UMEP) plugin in QGIS. That said, as I needed to match different hourly meteorological variables over a three year period I automated the first part of the analysis in R and loaded a .csv into QGIS. 1.4 Data sources and task Below I’ve listed a few good data sources. For this week’s task explore these and any others you can find and get an interesting dataset (e.g. in this practical our flytipping .csv) that you could join to some spatial data (e.g. in this practical the London boroughs .shp). This could be for any location in the world. 1.4.1 UK Data Service The UK Data Service geography service (https://census.edina.ac.uk/) has a library of hundreds of current and former boundary datasets for which attribute data are produced in the UK. 1.4.2 ONS The Office for National Statistics (ONS) are the national statistical agency for England and Wales and have recently started to provide access to boundary data for the statistics they produce for various geographic areas. Many of the boundaries on the ONS Geoportal are also available from the Edina Census Geography website in a more flexible fashion, however the ONS website provides very quick access to bulk-downloads –– something which can be very useful when reading data directly from the web using computer software. 1.4.3 OS The Ordnance Survey (OS) are the national mapping agency for the UK. A few years ago, they opened up a number of their data products for public use including greenspace, OS Open Map and OS Terrain. For the full range see: https://www.ordnancesurvey.co.uk/business-and-government/products/finder.html?Licensed%20for=OpenData%20(Free)&amp;withdrawn=on 1.4.4 Edina Digimap Before the Ordnance Survey opened up much of its data for public use, academics and students in the UK could access OS data using the Edina Digimap Service –– this service is still available today and provides access to a number of products in addition to those available from OS Open Data. Perhaps the most exciting of the additional OS data products available from Digimap is OS MasterMap. MasterMap is a framework for all OS data and contains layers of data that include details of real world objects such as buildings, roads, paths, rivers, physical structures and land parcels, as well as the complete UK transport network. Whilst we still are required to go through Edina OS have recently announced plans to make this dataset free in the near future under the new Geospatial Commission. 1.4.5 OSM Open Street Map (OSM) is a fantastic resource –– as the name suggests, all data contained in Open Street Map are open and free for anyone to use. Much like Wikipedia, anyone can contribute content to OSM and this brings with it its own benefits (frequent updates, very large user-base) and problems (data quality and patch coverage). OSM is a very good example of Volunteered Geographic Information (VGI). It’s possible to download OSM data straight from the website, although the interface can be a little unreliable (it works better for small areas). There are, however, a number of websites that allow OSM data to be downloaded more easily and are directly linked to from the ‘Export’ option in OSM. Geofabrik (https://www.geofabrik.de/data/download.html) allows you to download frequently updated Shapefiles for various global subdivisions. 1.4.6 DEFRA The Department for Environment and Rural Affairs (DEFRA) have recently created the Data Services Platform to openly distribute environmental data. See: https://environment.data.gov.uk/ 1.4.7 Data lists Another good place to start searching for data are data lists. They simply provide a comprehensive overview of all available data conveniently categorised by discipline and country. I normally use this one: https://freegisdata.rtwilson.com/ 1.5 Summary Within this practical we have explored the different types, formats and software used to store, analyse and manipulate spatial data. In reflecting upon this practical you should consider the (dis)advantages of each, where and when they might be appropriate and the overall practicality. Next week we will delve further into R and RStudio. "],
["introduction-to-r.html", "Chapter 2 Introduction to R 2.1 Learning outcomes 2.2 Introduction 2.3 Reading data into R 2.4 Making maps using ggplot2", " Chapter 2 Introduction to R 2.1 Learning outcomes By the end of this practical you should be able to: Execute basic processing in R Examine, clean and manipulate comma seperate value (.csv) data Examine, clean and manipulate and plot spatial (.csv) data Produce interactive maps Evaluate the benefits of different data manipulation and mapping techniques 2.2 Introduction This practical is LONG but it will take you from not knowing much about R to making freaking cool interactive maps in one practical. As you can imagine, this will be a steep learning curve. I will give you all the code you need, it’s your job to read through the text very carefully and try to understand what bits of code are doing as you go. There will be bits of code you don’t fully understand. Don’t worry, the key is to revisit later and try to work out what is going on then. Learning R is a long and iterative process and this is just the start… If you want to learn more about R and indeed download the latest version for your own use, then visit the R project pages: http://www.r-project.org/ The Wikipedia page for those who want to know a little of the history of R can be found here: http://en.wikipedia.org/wiki/R_(programming_language) There is an almost endless supply of good R tutorials on the web. If you get stuck or want to learn even more R (and why would you not want to?!), I’d recommend trying some of the following R Tutorial websites: http://www.statmethods.net/index.html http://www.r-tutor.com/ http://www.cyclismo.org/tutorial/R/index.html http://www.cookbook-r.com/ If you want to really be up to date with the state of the art in R, then https://bookdown.org/ is a fantastic resource. It features free books by some of the pre-eminent names in the R scene - I would urge you to go and take a look. 2.2.1 Online forums are your friend!! With almost every problem you encounter with R, someone else will have had the same problem before you and posted it on a forum – someone will then post a solution below. My usual route is to Google the problem and I’ll then be directed to a post, usually on Stack Overflow, Stack Exchange or Cross Validated. When doing so try to think about the minimal working (or not working) example (MWE), by this i mean remove anything very specific to your problem. I’ve rarely not found a solution to a problem this way. Health warning Beware of posting questions on these forums yourself – contributors to these forums (especially the R ones!), whilst almost always extremely knowledgeable about R, have a bit of a reputation for being insert familiar pejorative term for less-than-polite-human-being here! As you might expect, people who have enough time to become total experts in R, have little time to work on their social skills!! Fortunately though, some other poor chump has usually taken that hit for you and you can still find a useful answer to your problem. If you are specifically more interested in the spatial side of R, then Alex Singleton and Chris Brunsdon at the Universities of Liverpool and Maynooth also have a number of very useful R Spatial Tutorials – http://rpubs.com/alexsingleton/ &amp; http://rpubs.com/chrisbrunsdon/ Robin Lovelace in Leeds is also frequently at the bleeding edge of developments in R spatial stuff, so keep an eye on his website too: http://robinlovelace.net/. Robin is also in the process of completing a book on GeoComputation in R, which you should definitely read! - https://geocompr.robinlovelace.net/ These websites are also very very good: https://pakillo.github.io/R-GIS-tutorial/ and http://www.maths.lancs.ac.uk/~rowlings/Teaching/UseR2012/cheatsheet.html 2.2.2 R and RStudio When you download and install R, you get the R Graphical User Interface (GUI) as standard (below). This is fine and some purists prefer using the clean, unfussy command-line original, but it has some limitations such as no graphical way to view data tables or keep track of what is in your working directory (there are a number of others too). Fortunately there are a number of software environments that have been developed for R to make it a little more user-friendly; the best of these by a long way is RStudio. RStudio can be downloaded for free from https://www.rstudio.com/. We covered the RStudio layout last week. 2.2.3 Getting started If you are some kind of masochist, you are welcome to use the bundled R GUI for all of your work. If pain is not your thing, then for this practical (and future practicals) I will assume that you are using RStudio. From the start menu on your computer, find and run R Studio Once RStudio has opened, the first thing we will do is create a new project – projects enable you to organise your work effectively and store all of the files you create and work with for a particular task. 2. To create a new project (and this will vary a little depending on the version of RStudio you are using), either select File &gt; New Project… or Project &gt; Create Project Select Start a project in a brand new working directory and create a new project in a directory of a new ‘wk2’ directory on your N: drive: My file directory (the second box here) will be different to yours as this is my teaching resources folder. Keep yours simple N:/GIS/wk2. RStudio should now open with three windows – the main R console on the left, with windows for your environment and files on the right. 2.2.4 Basics R has a very steep learning curve, but hopefully it won’t take long to get your head around the basics. For example, at its most simple R can be used as a calculator. In the console window (bottom left), just type the following and press enter: 1+5 ## [1] 6 or 4*5^2 ## [1] 100 As you can see R performs these calculations instantly and prints the results in the console. This is useful for quick calculations but less useful for writing scripts requiring multiple operations or saving these for future use. To save your scripts, you should create a new R Script file. Do this now: Select File &gt; New File &gt; R Script. The R Script should open up on the top-left of your GUI. From now on type everything in this R script file and save it 2.2.5 Scripts and some basic commands Usually one of the first things to do when starting a new R Script is to check that you are in the correct working directory. This is important especially if you are working on multiple projects in different locations. To do this type the following into your new empty R Script: getwd() ## [1] &quot;C:/Users/ucfnmac/OneDrive - University College London/Teaching/CASA0005repo&quot; To run this line, hold Ctrl (Cmd on a Mac) and press the Return(↲) key (if you are in the standard R installation, you would run your script with Ctrl R). You should now see your current working directory appear in the console. Because of the new project we have already set up, this working directory should be correct, but if for any reason we wanted to change the working directory, we would use the setwd() function. For example, we wanted to change our directory to the documents folder on the C drive, we could run (don’t do this now): setwd(&quot;C:/Documents&quot;) When we are sure we are working in the correct working directory, we can save our script by clicking on the save icon on the script tab. Save your script as something like “wk2_part1” and you will see it appear in your files window on the right hand side. As you build up a document of R code, you should get into the habit of saving your script periodically in case of an unexpected software crash. We can now begin to write a script without the need to run each line every time we press enter. In the script editor type: A &lt;- 1 B &lt;- 2 C &lt;- A+B C ## [1] 3 Select (highlight) the three lines and run all three lines with Ctrl Return(↲). You will notice the lines appear in the console (the other window). If you type C and press enter in the console (C and then ctrl return in the script window) you should have the number 3 appear. From now on I recommend you type all the commands below in the script first and then run them. Copying and pasting from this document won’t necessarily work. You will also notice that in RStudio, values A, B and C will appear in your workspace window (top right). These variables are stored in memory for future use. Try giving A and B different values and see what happens. What about if you use lower case letters? You have just demonstrated one of the powerful aspects of R, which is that it is an object oriented programming language. A, B and C are all objects that have been assigned a value with the &lt;- symbol (you can also use the = sign, but it operates slightly differently to &lt;- in R, plus the arrow assignment has become standard over the years. Use alt - to type it automatically). This principle underlies the whole language and enables users to create ever more complex objects as they progress through their analysis. If you type: ls() ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; R will produce a list of objects that are currently active. rm(A) will remove the object A from the workspace (do ls() again to check this or look in your workspace window). 2.2.6 Functions Both rm() and ls() are known as functions. Functions are the other fundamental aspect to the R language. Functions can be thought of as single or multiple calculations that you apply to objects. They generally take the form of: function(object, parameter1, parameter2, parameter3...) You can write your own functions to carry out tasks (and we’ll come onto that in subsequent practical sessions), but normally you will just used one of the virtually infinite number of functions that other people have already written for us. 2.2.7 Basic plotting For example, one common function is the plot() function for displaying data as a graphical output. Add these lines to your script and run them as before and you can see some plot() outputs: #create some datasets, first a vector of 1-100 and 101-200 Data1 &lt;- c(1:100) Data2 &lt;- c(101:200) #Plot the data plot(Data1, Data2, col=&quot;red&quot;) #just for fun, create some more, this time some normally distributed #vectors of 100 numbers Data3 &lt;- rnorm(100, mean = 53, sd=34) Data4 &lt;- rnorm(100, mean = 64, sd=14) #plot plot(Data3, Data4, col=&quot;blue&quot;) In the code above, you will have noticed the # symbol. This signifies that whatever comes after it on that line is a comment. Comments are ignored by the R console and they allow you to annotate your code so that you know what it is doing. It is good programming practice to comment your code extensively so that you can keep track of what your scripts are for. 2.2.8 Help The previous lines of code also demonstrated a number of functions: c() concatenates a string of numbers together into a vector. 1:100 means produce the integers between and including 1:100, the plot() function plots the two data objects and includes a parameter to change the colour of the points. To understand what a function does, you can consult the R Help system. Simply type a question mark and then the function name; for example: ?plot In RStudio you will see the help file appear in the Help window in the bottom right of the GUI. Here you can also search for the help files for other functions in the search bar. 2.2.9 Data types Objects in R can exist as a number of different data types. These include a matrix, a vector, a data frame and a list. For the purposes of this practical we will focus on data frames. These are the most flexible data format in R (although tibbles are now becoming popular as well). Data frames can be conceptualised in a similar way to a spreadsheet with data held in rows and columns. They are the most commonly used object type in R and the most straightforward to create from the two vector objects we just created. df &lt;- data.frame(Data1, Data2) plot(df, col=&quot;green&quot;) If you have a very large data frame (thousands or millions of rows) it is useful to see only a selection of these. There are several ways of doing this: #show the first 10 and then last 10 rows of data in df... head(df) ## Data1 Data2 ## 1 1 101 ## 2 2 102 ## 3 3 103 ## 4 4 104 ## 5 5 105 ## 6 6 106 tail(df) ## Data1 Data2 ## 95 95 195 ## 96 96 196 ## 97 97 197 ## 98 98 198 ## 99 99 199 ## 100 100 200 You can also view elements of your data frame in RStudio by simply clicking on it in the top-right Environment window: 2.2.10 Elements of a data frame When programming you will frequently want to refer to different elements in a data frame or a vector/list. To select elements of a data frame, or subset it, you can refer specifically to ranges or elements of rows and columns. These are accessed using the single square bracket operator [], with the form: data.frame[row,column] Rows are always referenced first, before the comma, columns second, after the comma. Try the subsetting your df data frame with the following commands to see what is returned: df[1:10, 1] ## [1] 1 2 3 4 5 6 7 8 9 10 df[5:15,] ## Data1 Data2 ## 5 5 105 ## 6 6 106 ## 7 7 107 ## 8 8 108 ## 9 9 109 ## 10 10 110 ## 11 11 111 ## 12 12 112 ## 13 13 113 ## 14 14 114 ## 15 15 115 df[c(2,3,6),2] ## [1] 102 103 106 df[,1] ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ## [18] 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ## [35] 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 ## [52] 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 ## [69] 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 ## [86] 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 You will note that the column headings are the names of the original objects creating the data frame. We can change these using the colnames() function: colnames(df)&lt;- c(&quot;column1&quot;, &quot;column2&quot;) To select or refer to these columns directly by name, we can either use the $ operator, which takes the form data.frame$columnName, e.g. df$column1 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ## [18] 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ## [35] 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 ## [52] 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 ## [69] 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 ## [86] 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 or we can use the double square bracket operator [[]], and refer to our column by name using quotes e.g. df[[&quot;column1&quot;]] ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ## [18] 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ## [35] 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 ## [52] 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 ## [69] 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 ## [86] 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 This again is useful if you have a lot of columns and you wish to efficiently extract one of them. 2.3 Reading data into R One of the most tedious things a spatial analyst / data scientist has to do is clean their data so it doesn’t cause problems for the software later. In the past, we would have needed to do this by hand - these days, we can use software to do much of this for us. I will now give you two options to arrive at a nice cleaned dataset. If you have issues with software packages etc, you might still need to via the old skool route, however, the new skool route will be much more satisfying if it works! For this example we are going to use the London Datastore Catalogue. Go to: https://data.london.gov.uk/dataset/london-datastore-catalogue and download the excel document. 2.3.1 Old skool cleaning Open the LondonData.xls file in Excel, and save as LondonData.csv into your wk2/RProject folder. Open your new .csv file in Excel. There might be some non-numeric values inside numeric columns which will cause problems in your analysis. These need to be removed before proceeding any further. To remove these, you can use the replace function in Excel. In the home tab under ‘Editing’ open up the find and replace dialogue box and enter the following into the find box: #VALUE! #n/a Leave the replace box empty each time and click Replace All to remove these from your file, before saving the file again. Once you have cleaned out all of the trixy characters from the file, to read it into R, we will use the read.csv() function: LondonDataOSK&lt;- read.csv(&quot;prac2_data/london_catalogue.csv&quot;) Note, I’ve made an R project for all these practicals, which is why my file path starts with prac2_data/. If you save the .csv in the same folder as the .Rproj then you can just use: LondonDataOSK&lt;- read.csv(&quot;LondonData.csv&quot;) If you look at the read.csv() help file - ?read.csv - you will see that we can actually include many more parameters when reading in a .csv file. For example, we could read in the same file as follows: # by default in R, the file path should be defined with / but on a #windows file system it is defined with \\. Using \\\\ instead allows R #to read the path correctly – alternatively, just use / LondonDataOSK&lt;- read.csv(&quot;prac2_data/london_catalogue.csv&quot;, header = TRUE, sep = &quot;,&quot;) This would specify the exact path; that the first row of the file contains header information; and the values in the file are separated with commas (not ; or : as can be the case sometimes). 2.3.2 New skool cleaning To clean our data as we read it in, we are going to use a package (more about packages later - for now, just think about it as a lovely gift from the R gods) called readr which comes bundled as part of the tidyverse package. If you want to find out more about the Tidyverse (and you really should) then you should start here: https://www.tidyverse.org/ - the Tidyverse package contains almost everything you need to become a kick-ass data scientist. ‘Tidy’ as a concept in data science is well worth reading about and you should start here with Hadley Wickham’s paper - http://vita.had.co.nz/papers/tidy-data.pdf Anyway, first install the package: install.packages(&quot;tidyverse&quot;, repos = &quot;https://www.stats.bris.ac.uk/R/&quot;) Now we can use the readr package which comes bundled as part of the tidyverse to read in some data (directly from the web this time - read.csv can do this too) and clean text characters out from the numeric columns before they cause problems: library(tidyverse) ## Warning: package &#39;tidyverse&#39; was built under R version 3.6.1 #wang the data in straight from the web using read_csv, skipping over the &#39;n/a&#39; entries as you go... LondonData &lt;- read_csv(&quot;https://files.datapress.com/london/dataset/ward-profiles-and-atlas/2015-09-24T14:21:24/ward-profiles-excel-version.csv&quot;, na = &quot;n/a&quot;) note the use of read_csv here as opposed to read.csv. They are very similar, but read_csv is just a bit better - read this to understand why… Also, for those python fans out there - IT’S NOT THE SAME FUNCTION AS READ_CSV IN PYTHON 2.3.3 Examining your new data Your new data has been read in as a data frame / tibble (a tibble is just a data frame with a few extra bells and whistles). If you ever need to check what data type your new data set is, we can use the class() function: class(LondonData) ## [1] &quot;spec_tbl_df&quot; &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; # or, if you have your old skool data from step 24 above class(LondonDataOSK) We can also use the class function within another two functions (cbind() and lapply()) to check that our data has been read in correctly and that, for example, numeric data haven’t been read in as text or other variables. Run the following line of code: datatypelist &lt;- data.frame(cbind(lapply(LondonData,class))) You should see that all columns that should be numbers are read in as numeric. Try reading in LondonData again, but this time without excluding the ‘n/a’ values in the file, e.g. LondonData &lt;- read_csv(&quot;https://files.datapress.com/london/dataset/ward-profiles-and-atlas/2015-09-24T14:21:24/ward-profiles-excel-version.csv&quot;) Now run the datatypelist function again - you should see that some of the columns (those the n/a values in) have been read in as something other than numeric. This is why we need to exclude them. Isn’t readr great for helping us avoid reading in our numeric data as text! LondonData &lt;- edit(LondonData) It is also possible to quickly and easily summarise the data or look at the column headers using summary(df) ## column1 column2 ## Min. : 1.00 Min. :101.0 ## 1st Qu.: 25.75 1st Qu.:125.8 ## Median : 50.50 Median :150.5 ## Mean : 50.50 Mean :150.5 ## 3rd Qu.: 75.25 3rd Qu.:175.2 ## Max. :100.00 Max. :200.0 names(LondonData) ## [1] &quot;Ward name&quot; ## [2] &quot;Old code&quot; ## [3] &quot;New code&quot; ## [4] &quot;Population - 2015&quot; ## [5] &quot;Children aged 0-15 - 2015&quot; ## [6] &quot;Working-age (16-64) - 2015&quot; ## [7] &quot;Older people aged 65+ - 2015&quot; ## [8] &quot;% All Children aged 0-15 - 2015&quot; ## [9] &quot;% All Working-age (16-64) - 2015&quot; ## [10] &quot;% All Older people aged 65+ - 2015&quot; ## [11] &quot;Mean Age - 2013&quot; ## [12] &quot;Median Age - 2013&quot; ## [13] &quot;Area - Square Kilometres&quot; ## [14] &quot;Population density (persons per sq km) - 2013&quot; ## [15] &quot;% BAME - 2011&quot; ## [16] &quot;% Not Born in UK - 2011&quot; ## [17] &quot;% English is First Language of no one in household - 2011&quot; ## [18] &quot;General Fertility Rate - 2013&quot; ## [19] &quot;Male life expectancy -2009-13&quot; ## [20] &quot;Female life expectancy -2009-13&quot; ## [21] &quot;% children in reception year who are obese - 2011/12 to 2013/14&quot; ## [22] &quot;% children in year 6 who are obese- 2011/12 to 2013/14&quot; ## [23] &quot;Rate of All Ambulance Incidents per 1,000 population - 2014&quot; ## [24] &quot;Rates of ambulance call outs for alcohol related illness - 2014&quot; ## [25] &quot;Number Killed or Seriously Injured on the roads - 2014&quot; ## [26] &quot;In employment (16-64) - 2011&quot; ## [27] &quot;Employment rate (16-64) - 2011&quot; ## [28] &quot;Number of jobs in area - 2013&quot; ## [29] &quot;Employment per head of resident WA population - 2013&quot; ## [30] &quot;Rate of new registrations of migrant workers - 2011/12&quot; ## [31] &quot;Median House Price (&lt;U+00A3&gt;) - 2014&quot; ## [32] &quot;Number of properties sold - 2014&quot; ## [33] &quot;Median Household income estimate (2012/13)&quot; ## [34] &quot;Number of Household spaces - 2011&quot; ## [35] &quot;% detached houses - 2011&quot; ## [36] &quot;% semi-detached houses - 2011&quot; ## [37] &quot;% terraced houses - 2011&quot; ## [38] &quot;% Flat, maisonette or apartment - 2011&quot; ## [39] &quot;% Households Owned - 2011&quot; ## [40] &quot;% Households Social Rented - 2011&quot; ## [41] &quot;% Households Private Rented - 2011&quot; ## [42] &quot;% dwellings in council tax bands A or B - 2015&quot; ## [43] &quot;% dwellings in council tax bands C, D or E - 2015&quot; ## [44] &quot;% dwellings in council tax bands F, G or H - 2015&quot; ## [45] &quot;Claimant rate of key out-of-work benefits (working age client group) (2014)&quot; ## [46] &quot;Claimant Rate of Housing Benefit (2015)&quot; ## [47] &quot;Claimant Rate of Employment Support Allowance - 2014&quot; ## [48] &quot;Rate of JobSeekers Allowance (JSA) Claimants - 2015&quot; ## [49] &quot;% dependent children (0-18) in out-of-work households - 2014&quot; ## [50] &quot;% of households with no adults in employment with dependent children - 2011&quot; ## [51] &quot;% of lone parents not in employment - 2011&quot; ## [52] &quot;(ID2010) - Rank of average score (within London) - 2010&quot; ## [53] &quot;(ID2010) % of LSOAs in worst 50% nationally - 2010&quot; ## [54] &quot;Average GCSE capped point scores - 2014&quot; ## [55] &quot;Unauthorised Absence in All Schools (%) - 2013&quot; ## [56] &quot;% with no qualifications - 2011&quot; ## [57] &quot;% with Level 4 qualifications and above - 2011&quot; ## [58] &quot;A-Level Average Point Score Per Student - 2013/14&quot; ## [59] &quot;A-Level Average Point Score Per Entry; 2013/14&quot; ## [60] &quot;Crime rate - 2014/15&quot; ## [61] &quot;Violence against the person rate - 2014/15&quot; ## [62] &quot;Deliberate Fires per 1,000 population - 2014&quot; ## [63] &quot;% area that is open space - 2014&quot; ## [64] &quot;Cars per household - 2011&quot; ## [65] &quot;Average Public Transport Accessibility score - 2014&quot; ## [66] &quot;% travel by bicycle to work - 2011&quot; ## [67] &quot;Turnout at Mayoral election - 2012&quot; 2.3.4 Data manipulation in R Now we have some data read into R, we need to select a small subset to work on. The first thing we will do is select just the London Boroughs to work with. If you recall, the Borough data is at the bottom of the file. 2.3.4.1 Selecting rows Your borough data will probably be found between rows 626 and 658. Therefore we will first create a subset by selecting these rows into a new data frame and then reducing that data frame to just four columns. There are a few ways of doing this: We could select just the rows we need by explicitly specifying the range of rows we need: LondonBoroughs&lt;-LondonData[626:658,] There is also a subset() function in R. You could look that up and see whether you could create a subset with that. Or, we could try a cool ‘data sciency’ way of pulling out the rows we want with the knowledge that the codes for London Boroughs start with E09 (the wards in the rest of the file start with E05). Knowing this, we can use the grep() function which can use regular expressions to match patterns in text. Let’s try it! LondonData &lt;- data.frame(LondonData) LondonBoroughs &lt;- LondonData[grep(&quot;^E09&quot;,LondonData[,3]),] Check it worked: head(LondonBoroughs) AWWMAHGAWD!!! Pretty cool hey? What that function is saying is “grep (get) me all of the rows from the London Data data frame where the text in column 3 starts with (^) E09” You will notice that you will have two rows at the top for the City of London. This is because it features twice in the data set. That’s fine, we can just drop this row from our dataset: LondonBoroughs &lt;- LondonBoroughs[2:34,] 2.3.4.2 Selecting columns LondonBoroughs&lt;-LondonBoroughs[,c(1,19,20,21)] You will have noticed the use of square brackets above – these are very useful in R. Refer back to points 19-21 above if you can’t remember how they work. The c() function is also used here – this is the ‘combine’ function - another very useful function in R which allows arguments (in this case, column reference numbers) into a single value 2.3.4.3 Renaming columns You will notice that the column names are slightly misleading as we are now working with boroughs rather than wards. We can rename the columns to something more appropriate using the names() function (there are various other functions for renaming columns - for example colnames() if you want to rename multiple columns: #rename the column 1 in LondonBoroughs names(LondonBoroughs)[1] &lt;- c(&quot;Borough Name&quot;) 2.3.5 Plotting plot(LondonBoroughs$Male.life.expectancy..2009.13, LondonBoroughs$X..children.in.reception.year.who.are.obese...2011.12.to.2013.14) 2.3.6 Pimp my graph! Now, of course, because this is R, we can pimp this graph using something a bit more fancy than the base graphics functions: install.packages(&quot;plotly&quot;, repos = &quot;https://www.stats.bris.ac.uk/R/&quot;) library(plotly) ## Warning: package &#39;plotly&#39; was built under R version 3.6.1 plot_ly(LondonBoroughs, x = ~Male.life.expectancy..2009.13, y = ~X..children.in.reception.year.who.are.obese...2011.12.to.2013.14, text = ~LondonBoroughs$`Borough Name`, type = &quot;scatter&quot;, mode = &quot;markers&quot;) 2.3.7 Spatial Data in R This next part of the practical applies the same principles introduced above to the much more complex problem of handling spatial data within R. In this workshop we will produce a gallery of maps using many of the plotting tools available in R. The resulting maps will not be that meaningful- the focus here is on sound visualisation with R and not sound analysis (I know one is useless without the other!). Good quality spatial analysis will come in the rest of the module. Whilst the instructions are step by step you are encouraged to start deviating from them (trying different colours for example) to get a better understanding of what we are doing. 2.3.7.1 Packages In this section we’ll require even more specialist packages, so I should probably spend some more time explaining what packages actually are! Packages are bits of code that extend R beyond the basic statistical functionality it was originally designed for. For spatial data, they enable R to process spatial data formats, carry out analysis tasks and create some of the maps that follow. Bascially, without packages, R would be very limited. With packages, you can do virtually anything! One of the issues you will come across is that packages are being continually developed and updated and unless you keep your version of R updated and your packages updated, there may be some functions and options not available to you. This can be a problem, particularly with University installations which (at best) may only get updated once a year. Therefore, apologies in advance if things don’t work as intended! In R Studio all packages can be installed and activated in the ‘Packages’ tab in the bottom-right hand window: As with everything else in R though, we can also run everything from the command line. The first package we need to install for this part of the practical is maptools – either find and install it using the RStudio GUI or do the following: install.packages(&quot;maptools&quot;) There are a few other packages we’ll need to get to grips with. Some, like ggplot2 (one of the most influential R packages ever) are part of the tidyverse package we came across earlier. Others we will need to install for the first time. install.packages(c(&quot;OpenStreetMap&quot;, &quot;classInt&quot;, &quot;tmap&quot;)) install.packages(c(&quot;RColorBrewer&quot;, &quot;sp&quot;, &quot;rgeos&quot;, &quot;tmaptools&quot;, &quot;sf&quot;, &quot;downloader&quot;, &quot;rgdal&quot;, &quot;geojsonio&quot;))# might also need these ones Now that the packages have been installed you will not have to repeat the above steps again (when you use your account in these cluster rooms). Open a new script and save it to your working directory as “wk3_maps.r”. As before, type each of the lines of code into this window and then select and use the ctrl return keys to run them. Be sure to save your script often. The first task is to load the packages we have just installed. note, you might have some issues with the OpenStreetMap package if your installation of java on your computer doesn’t match your installation of R – e.g. if you have installed the 64bit version of R, you also need the 64bit version of java (same with the 32bit versions) - you may also need to install the package Rcpp separately and try again. Install Java 64-bit from: https://java.com/en/download/manual.jsp #Load Packages (ignore any error messages about being built under a #different R version): library(maptools) library(RColorBrewer) library(classInt) library(OpenStreetMap) library(sp) library(rgeos) library(tmap) library(tmaptools) library(sf) library(rgdal) library(geojsonio) 2.3.7.2 Background to spatial data in R R has a very well developed ecosystem of packages for working with Spatial Data. Early pioneers like Roger Bivand and Edzer Pebesma along with various colleagues were instrumental in writing packages to interface with some powerful open source libraries for working with spatial data, such as GDAL and GEOS. These were accessed via the rgdal and rgeos packages. The maptools package by Roger Bivand, amongst other things, allowed Shapefiles to be read into R. The sp package (along with spdep) by Edzer Pebesma was very important for defining a series of classes and methods for spatial data natively in R which then allowed others to write software to work with these formats. Other packages like raster advanced the analysis of gridded spatial data, while packages like classint and RColorbrewer facilitated the binning of data and colouring of choropleth maps. Whilst these packages were extremely important for advancing spatial data analysis in R, they were not always the most straightforward to use - making a map in R could take quite a lot of effort and they were static and visually basic. However, more recently new packages have arrived to change this. Now leaflet enables R to interface with the leaflet javascript library for online, dynamic maps. ggplot2 which was developed by Hadley Wickam and colleagues radically changed the way that people thought about and created graphical objects in R, including maps, and introduced a graphical style which has been the envy of other software to the extent that there are now libraries in Python which copy the ggplot2 style! Building on all of these, the new tmap (Thematic Map) package has changed the game completely and now enables us to read, write and manipulate spatial data and produce visually impressive and interactive maps, very easily. In parallel, the sf (Simple Features) package is helping us re-think the way that spatial data can be stored and manipulated. It’s exciting times for geographic information / spatial data science! 2.3.7.3 Making some choropleth maps Choropleth maps are thematic maps which colour areas according to some phenomenon. In our case, we are going to fill some irregular polygons (the London Boroughs) with a colour that corresponds to a particular attribute. As with all plots in R, there are multiple ways we can do this. The basic plot() function requires no data preparation but additional effort in colour selection/ adding the map key etc. qplot() and ggplot() (installed in the ggplot2 package) require some additional steps to format the spatial data but select colours and add keys etc automatically. Here, we are going to make use of the new tmap package which makes making maps very easy indeed. So one mega cool thing about R is you can read spatial data in straight from the internetz! Try this below for downloading a GeoJson file: EW &lt;- geojson_read(&quot;http://geoportal.statistics.gov.uk/datasets/8edafbe3276d4b56aec60991cbddda50_2.geojson&quot;, what = &quot;sp&quot;) #pull out london using grep and the regex wildcard for&#39;start of the string&#39; (^) to to look for the bit of the district code that relates to London (E09) from the &#39;lad15cd&#39; column in the data slot of our spatial polygons dataframe LondonMap &lt;- EW[grep(&quot;^E09&quot;,EW@data$lad15cd),] #plot it using the base plot function qtm(LondonMap) Of course, we can also read in our data from a shapefile stored in a local directory: #read the shapefile into a simple features object BoroughMapSF &lt;- read_shape(&quot;prac1_data/statistical-gis-boundaries-london/ESRI/London_Borough_Excluding_MHW.shp&quot;, as.sf = TRUE) BoroughMapSP &lt;- LondonMap #plot it very quickly usking qtm (quick thematic map) to check it has been read in correctly qtm(BoroughMapSF) qtm(BoroughMapSP) And naturally we can convert between simple features objects and spatialPolygonsDataFrames very easily: library(methods) #check the class of BoroughMapSF class(BoroughMapSF) ## [1] &quot;sf&quot; &quot;data.frame&quot; #And check the class of BoroughMapSP class(BoroughMapSP) ## [1] &quot;SpatialPolygonsDataFrame&quot; ## attr(,&quot;package&quot;) ## [1] &quot;sp&quot; #now convert the SP object into an SF object... newSF &lt;- st_as_sf(BoroughMapSP) #and try the other way around SF to SP... newSP &lt;- as(newSF, &quot;Spatial&quot;) #simples! BoroughMapSP &lt;- as(BoroughMapSF, &quot;Spatial&quot;) 2.3.7.4 Attribute data OK, enough messing around, show us the maps!! Hold your horses, before be can create a map, we need to join some attribute data to some boundaries. Doing this an SP object can be a bit of a pain, but I’ll show you here: #join the data to the @data slot in the SP data frame BoroughMapSP@data &lt;- data.frame(BoroughMapSP@data,LondonData[match(BoroughMapSP@data[,&quot;GSS_CODE&quot;],LondonData[,&quot;New.code&quot;]),]) #check it&#39;s joined. #head(BoroughMapSP@data) Joining data is a bit more intuitive with SF: BoroughDataMap &lt;- append_data(BoroughMapSF,LondonData, key.shp = &quot;GSS_CODE&quot;, key.data = &quot;New.code&quot;, ignore.duplicates = TRUE) ## Data contains duplicated keys: E09000001 ## Over coverage: 626 out of 659 data records were not appended. Run over_coverage() to get the corresponding data row numbers and key values. An alternative to append_data would be to use a left-join (like in SQL) BoroughDataMap2 &lt;- BoroughMapSF %&gt;% left_join(LondonData, by = c(&quot;GSS_CODE&quot; = &quot;New.code&quot;)) ## Warning: Column `GSS_CODE`/`New.code` joining factor and character vector, ## coercing into character vector However, you would need to remove the duplicate City of London row afterwards 2.3.7.5 Making some maps If you want to learn a bit more about the sorts of things you can do with tmap, then there are 2 vignettes that you can access here: https://cran.r-project.org/web/packages/tmap/ - I suggest you refer to these to see the various things you can do using tmap. Here’s a quick sample though: We can create a choropleth map very quickly now using qtm library(tmap) library(tmaptools) tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting qtm(BoroughDataMap, fill = &quot;Rate.of.JobSeekers.Allowance..JSA..Claimants...2015&quot;) You can also add a basemap and some other guff, if you wish… london_osm &lt;- read_osm(BoroughDataMap, type = &quot;esri&quot;, zoom = NULL) qtm(london_osm) + tm_shape(BoroughDataMap) + tm_polygons(&quot;Rate.of.JobSeekers.Allowance..JSA..Claimants...2015&quot;, style=&quot;jenks&quot;, palette=&quot;YlOrBr&quot;, midpoint=NA, title=&quot;Rate per 1,000 people&quot;, alpha = 0.5) + tm_compass(position = c(&quot;left&quot;, &quot;bottom&quot;),type = &quot;arrow&quot;) + tm_scale_bar(position = c(&quot;left&quot;, &quot;bottom&quot;)) + tm_layout(title = &quot;Job seekers&#39; Allowance Claimants&quot;, legend.position = c(&quot;right&quot;, &quot;bottom&quot;)) how about more than one map, perhaps using different data breaks… tm_shape(BoroughDataMap) + tm_polygons(c(&quot;Average.Public.Transport.Accessibility.score...2014&quot;, &quot;Violence.against.the.person.rate...2014.15&quot;), style=c(&quot;jenks&quot;, &quot;pretty&quot;), palette=list(&quot;YlOrBr&quot;, &quot;Purples&quot;), auto.palette.mapping=FALSE, title=c(&quot;Average Public Transport Accessibility&quot;, &quot;Violence Against the Person Rate&quot;)) ## Warning: The argument auto.palette.mapping is deprecated. Please use ## midpoint for numeric data and stretch.palette for categorical data to ## control the palette mapping. You will notice that to choose the colour of the maps, I entered some codes. These are the names of colour ramps from the RColourBrewer package which comes bundled with tmap. RColorBrewer uses colour palettes available from the colorbrewer2 website (http://colorbrewer2.org/) which is in turn based on the work of Cynthia Brewer and colleagues at Penn State University (http://www.personal.psu.edu/cab38/ColorBrewer/ColorBrewer_updates.html). Cynthia brewer has carried out large amount of academic research into determining the best colour palettes for GIS applications and so we will defer to her expertise here. If you want to look at the range of colour palettes available, as we; as going to the ColorBrewer website, you can use the a little shiny app which comes bundled with tmaptools #You might need to install the shinyjs paclage for this to work install.packages(&quot;shinyjs&quot;) library(shinyjs) #it&#39;s possible to explicitly tell R which package to get the function from with the :: operator... tmaptools::palette_explorer() tmap will even let you make a FRICKING INTERACTIVE MAP!!! Oh yes, we can do interactive maps…! tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(BoroughDataMap) + tm_polygons(&quot;X..children.in.year.6.who.are.obese..2011.12.to.2013.14&quot;, style=&quot;cont&quot;, palette=&quot;PuRd&quot;, midpoint=NA, title=&quot;Truffle Shuffle Intensity&quot;)+ tmap_options(max.categories = 5) ## Warning: Number of levels of the variable &quot;X..children.in.year. ## 6.who.are.obese..2011.12.to.2013.14&quot; is 31, which is larger ## than max.categories (which is 5), so levels are combined. Set ## tmap_options(max.categories = 31) in the layer function to show all levels. ####You can even save your map as an html file (uncomment, obvs) #save_tmap(filename = &quot;truffle.html&quot;) 2.3.7.6 Have a play around… There are loads of options for creating maps with tmap - read the vignettes that have been provided by the developers of the package and see if you can adapt the maps you have just made - or even make some alternative maps using built in data. https://cran.r-project.org/web/packages/tmap/vignettes/tmap-nutshell.html https://cran.r-project.org/web/packages/tmap/vignettes/tmap-modes.html You should also read the reference manual on the package homepage: https://cran.r-project.org/web/packages/tmap/ In fact, since I wrote this last year, the tmap package has developed quite a bit more - have a look at some of the cool examples here: https://github.com/mtennekes/tmap Have a play and see what cool shiz you can create! This is an example from the BubbleMap folder on the tmap github. Don’t worry about what github is we will cover that soon. # load spatial data included in the tmap package data(&quot;World&quot;, &quot;metro&quot;) # calculate annual growth rate metro$growth &lt;- (metro$pop2020 - metro$pop2010) / (metro$pop2010 * 10) * 100 # plot tm_shape(World) + tm_polygons(&quot;income_grp&quot;, palette = &quot;-Blues&quot;, title = &quot;Income class&quot;, contrast = 0.7, border.col = &quot;gray30&quot;, id = &quot;name&quot;) + tm_text(&quot;iso_a3&quot;, size = &quot;AREA&quot;, col = &quot;gray30&quot;, root=3) + tm_shape(metro) + tm_bubbles(&quot;pop2010&quot;, col = &quot;growth&quot;, border.col = &quot;black&quot;, border.alpha = 0.5, breaks = c(-Inf, 0, 2, 4, 6, Inf) , palette = &quot;-RdYlGn&quot;, title.size = &quot;Metro population (2010)&quot;, title.col = &quot;Annual growth rate (%)&quot;, id = &quot;name&quot;, popup.vars=c(&quot;pop2010&quot;, &quot;pop2020&quot;, &quot;growth&quot;)) + tm_format(&quot;World&quot;) + tm_style(&quot;gray&quot;) 2.4 Making maps using ggplot2 So as you have seen, it is possible to make very nice thematic maps with tmap. However, there are other options. The ggplot2 package is a very powerful graphics package that allows us to a huge range of sophisticated plots, including maps. The latest development version of ggplot2 has support for simple features objects with the new geom_sf class (http://ggplot2.tidyverse.org/reference/ggsf.html), which, quite frankly, is bloody brilliant! If you have not already done so, install and library the ggplot2 and rgeos packages (they should be installed automatically as part of tidyverse and tmap packages, but occasionally they need to be installed separately). Now there are two main ways in which you can construct a plot in ggplot2: qplot() and ggplot(). qplot is short for ‘Quick plot’ and can be good for producing quick charts and maps, but is perhaps less good for constructing complex layered plots. ggplot() is better for building up a plot layer by layer, e.g. ggplot()+layer1+layer2, and so this is what we will use here. The important elements of any ggplot layer are the aesthetic mappings – aes(x,y, …) – which tell ggplot where to place the plot objects. We can imagine a map just like a graph with all features mapping to an x and y axis. All geometry ( geom_) types in ggplot feature some kind of aesthetic mapping and these can either be declared at the plot level, e.g. ggplot(data.frame, aes(x=x, y=y)) or, more flexibly at the level of the individual geom_ layer, e.g. geom_polygon(aes(x=x, y=y), data.frame) To begin our plot, we will start with the map layer – we will generate this using the geom_sf() function in ggplot2: ggplot()+geom_sf(mapping = aes(geometry=geometry),data = BoroughDataMap)+theme_minimal() To colour your map, then just pass the name of the variable you want to map to the fill parameter in the aesthetics: ggplot()+geom_sf(mapping = aes(geometry=geometry, fill=Median.House.Price...U.00A3.....2014),data = BoroughDataMap)+theme_minimal() As you can see, this map looks OK, but there are a few issues with things like the colour ramp and a lack of appropriate labels. We can correct this by adding a few more layers. Firstly we can change the palette: palette1&lt;-scale_fill_continuous(low=&quot;white&quot;, high=&quot;orange&quot;, &quot;Price(£)&quot;) And some appropriate labels: labels&lt;-labs(title=&quot;Average House Price 2014&quot;,x=&quot;Longitude&quot;, y=&quot;Latitude&quot;) Before plotting the all of them together: ggplot()+geom_sf(mapping = aes(geometry=geometry, fill=Median.House.Price...U.00A3.....2014),data = BoroughDataMap)+theme_minimal()+palette1+labels 2.4.1 Changing projections Now until now, we’ve not really considered how our maps have been printed to the screen. The coordinates stored in the geometry column of your sf object contain the information to enable points, lines or polygons to be drawn on the screen (think back to the KML exercise in week 1). The ggplot map above could fool you into thinking the coordinate system we are using is latitude and longitude, but actually, the map coordinates are stored in British National Grid. How can we tell? You can check that the coordinate reference systems of sf or sp objects using the print function: print(BoroughMapSP) ## class : SpatialPolygonsDataFrame ## features : 33 ## extent : 503568.2, 561957.5, 155850.8, 200933.9 (xmin, xmax, ymin, ymax) ## crs : +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.999601272 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.06,0.1502,0.247,0.8421,-20.4894 +units=m +no_defs ## variables : 74 ## names : NAME, GSS_CODE, HECTARES, NONLD_AREA, ONS_INNER, SUB_2009, SUB_2006, Ward.name, Old.code, New.code, Population...2015, Children.aged.0.15...2015, Working.age..16.64....2015, Older.people.aged.65....2015, X..All.Children.aged.0.15...2015, ... ## min values : Barking and Dagenham, E09000001, 314.942, 0, F, NA, NA, Barking and Dagenham, 00AA, E09000001, 8100, 650, 6250, 1250, 8, ... ## max values : Westminster, E09000033, 15013.487, 370.619, T, NA, NA, Westminster, 00BK, E09000033, 393200, 82900, 257850, 56550, 26.1, ... print(BoroughMapSF) ## Simple feature collection with 33 features and 7 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## epsg (SRID): NA ## proj4string: +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.999601272 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.06,0.1502,0.247,0.8421,-20.4894 +units=m +no_defs ## First 10 features: ## NAME GSS_CODE HECTARES NONLD_AREA ONS_INNER SUB_2009 ## 0 Kingston upon Thames E09000021 3726.117 0.000 F &lt;NA&gt; ## 1 Croydon E09000008 8649.441 0.000 F &lt;NA&gt; ## 2 Bromley E09000006 15013.487 0.000 F &lt;NA&gt; ## 3 Hounslow E09000018 5658.541 60.755 F &lt;NA&gt; ## 4 Ealing E09000009 5554.428 0.000 F &lt;NA&gt; ## 5 Havering E09000016 11445.735 210.763 F &lt;NA&gt; ## 6 Hillingdon E09000017 11570.063 0.000 F &lt;NA&gt; ## 7 Harrow E09000015 5046.330 0.000 F &lt;NA&gt; ## 8 Brent E09000005 4323.270 0.000 F &lt;NA&gt; ## 9 Barnet E09000003 8674.837 0.000 F &lt;NA&gt; ## SUB_2006 geometry ## 0 &lt;NA&gt; MULTIPOLYGON (((516401.6 16... ## 1 &lt;NA&gt; MULTIPOLYGON (((535009.2 15... ## 2 &lt;NA&gt; MULTIPOLYGON (((540373.6 15... ## 3 &lt;NA&gt; MULTIPOLYGON (((521975.8 17... ## 4 &lt;NA&gt; MULTIPOLYGON (((510253.5 18... ## 5 &lt;NA&gt; MULTIPOLYGON (((549893.9 18... ## 6 &lt;NA&gt; MULTIPOLYGON (((510599.8 19... ## 7 &lt;NA&gt; MULTIPOLYGON (((510599.8 19... ## 8 &lt;NA&gt; MULTIPOLYGON (((525201 1825... ## 9 &lt;NA&gt; MULTIPOLYGON (((524579.9 19... 2.4.1.1 Proj4 If you’re a spatial geek and you’re used to looking at London, then a quick glance at the values of the extent / bounding box (bbox) will tell you that you are working in British National Grid as the x and y values are in 6 Figures, with x values around 52000 to 55000 and y values around 15000 to 20000. The other way of telling is by looking at the coordinate reference system (CRS) value - in the files above it’s defined by the bit that says: +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy “Well that’s clear as mud!” I hear you cry! Yes, not obvious is it! This is called a proj-string or proj4-string and its the proj4-string for British National Grid. You can learn what each of the bits of this mean here: https://proj4.org/usage/quickstart.html The proj4-string basically tells the computer where on the earth to locate the coordinates that make up the geometries in your file and what distortions to apply (i.e. if to flatten it out completely etc.) Sometimes you can download data from the web and it doesn’t have a CRS . If any boundary data you download does not have a coordinate reference system attached to it (NA is displayed in the coord. ref section), this is not a huge problem - it can be added afterwards by adding the proj4string to the file. To find the proj4-strings for a whole range of different geographic projections, use the search facility at http://spatialreference.org/ or http://epsg.io/. 2.4.1.2 EPSG Now, if you can store a whole proj4-string in your mind, you must be some kind of savant (why are you doing this course? you could make your fortune as a card-counting poker player or something!). The rest of us need something a little bit more easy to remember and for coordinate reference systems, the saviour is the European Petroleum Survey Group (EPSG) - (naturally!). Now managed and maintained by the International Association of Oil and Gas producers - http://www.epsg.org/ - EPSG codes are short numbers represent all coordinate reference systems in the world and link directly to proj4 strings. The EPSG code for British National Grid is 27700 - http://epsg.io/27700. The EPSG code for the WGS84 World Geodetic System (usually the default CRS for most spatial data) is 4326 - http://epsg.io/4326 If your boundary data doesn’t have a spatial reference system, you can read it in you can read it in and set the projection either with the full proj4 string, or, more easily, with the EPSG code: # read borough map in and explicitly set projection to British National Grid # using the EPSG string code 27700 BoroughMapSP &lt;- read_shape(&quot;prac1_data/statistical-gis-boundaries-london/ESRI/London_Borough_Excluding_MHW.shp&quot;, current.projection = 27700) ## Warning: Projection already specified in shape file. Use set_projection for ## reprojection. #or, for SF BoroughMapSF &lt;- st_read(&quot;prac1_data/statistical-gis-boundaries-london/ESRI/London_Borough_Excluding_MHW.shp&quot;) %&gt;% st_set_crs(27700) ## Reading layer `London_Borough_Excluding_MHW&#39; from data source `C:\\Users\\ucfnmac\\OneDrive - University College London\\Teaching\\CASA0005repo\\prac1_data\\statistical-gis-boundaries-london\\ESRI\\London_Borough_Excluding_MHW.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 33 features and 7 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## epsg (SRID): NA ## proj4string: +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.999601272 +x_0=400000 +y_0=-100000 +datum=OSGB36 +units=m +no_defs ## Warning: st_crs&lt;- : replacing crs does not reproject data; use st_transform ## for that Another option is to assign the coordinates reference system after the shapefile has been read in, for example. However as we have already assigned a CRS to BoroughMapSP R in the function read_shape R will through an error. So let’s read the shape again using readOGR from the rgdal package: BoroughMapSP &lt;- readOGR(&quot;prac1_data/statistical-gis-boundaries-london/ESRI/London_Borough_Excluding_MHW.shp&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;C:\\Users\\ucfnmac\\OneDrive - University College London\\Teaching\\CASA0005repo\\prac1_data\\statistical-gis-boundaries-london\\ESRI\\London_Borough_Excluding_MHW.shp&quot;, layer: &quot;London_Borough_Excluding_MHW&quot; ## with 33 features ## It has 7 fields #create a variable for the EPSG code to reference the proj4string (EPSG codes are shorter and easier to remember than the full strings!) and store it in a variable... UKBNG &lt;- &quot;+init=epsg:27700&quot; #now set the proj4string for your BoroughMap object - note, this will probably throw an error if your dataset already has a CRS, this is just for demonstration... proj4string(BoroughMapSP) &lt;- CRS(UKBNG) print(BoroughMapSP) # check for new CRS ## class : SpatialPolygonsDataFrame ## features : 33 ## extent : 503568.2, 561957.5, 155850.8, 200933.9 (xmin, xmax, ymin, ymax) ## crs : +init=epsg:27700 +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +datum=OSGB36 +units=m +no_defs +ellps=airy +towgs84=446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894 ## variables : 7 ## names : NAME, GSS_CODE, HECTARES, NONLD_AREA, ONS_INNER, SUB_2009, SUB_2006 ## min values : Barking and Dagenham, E09000001, 314.942, 0, F, NA, NA ## max values : Westminster, E09000033, 15013.487, 370.619, T, NA, NA or for SF: BoroughMapSF &lt;- BoroughMapSF %&gt;% st_set_crs(27700) print(BoroughMapSF) ## Simple feature collection with 33 features and 7 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 503568.2 ymin: 155850.8 xmax: 561957.5 ymax: 200933.9 ## epsg (SRID): 27700 ## proj4string: +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 +units=m +no_defs ## First 10 features: ## NAME GSS_CODE HECTARES NONLD_AREA ONS_INNER SUB_2009 ## 1 Kingston upon Thames E09000021 3726.117 0.000 F &lt;NA&gt; ## 2 Croydon E09000008 8649.441 0.000 F &lt;NA&gt; ## 3 Bromley E09000006 15013.487 0.000 F &lt;NA&gt; ## 4 Hounslow E09000018 5658.541 60.755 F &lt;NA&gt; ## 5 Ealing E09000009 5554.428 0.000 F &lt;NA&gt; ## 6 Havering E09000016 11445.735 210.763 F &lt;NA&gt; ## 7 Hillingdon E09000017 11570.063 0.000 F &lt;NA&gt; ## 8 Harrow E09000015 5046.330 0.000 F &lt;NA&gt; ## 9 Brent E09000005 4323.270 0.000 F &lt;NA&gt; ## 10 Barnet E09000003 8674.837 0.000 F &lt;NA&gt; ## SUB_2006 geometry ## 1 &lt;NA&gt; MULTIPOLYGON (((516401.6 16... ## 2 &lt;NA&gt; MULTIPOLYGON (((535009.2 15... ## 3 &lt;NA&gt; MULTIPOLYGON (((540373.6 15... ## 4 &lt;NA&gt; MULTIPOLYGON (((521975.8 17... ## 5 &lt;NA&gt; MULTIPOLYGON (((510253.5 18... ## 6 &lt;NA&gt; MULTIPOLYGON (((549893.9 18... ## 7 &lt;NA&gt; MULTIPOLYGON (((510599.8 19... ## 8 &lt;NA&gt; MULTIPOLYGON (((510599.8 19... ## 9 &lt;NA&gt; MULTIPOLYGON (((525201 1825... ## 10 &lt;NA&gt; MULTIPOLYGON (((524579.9 19... 2.4.1.3 Reprojecting your spatial data Reprojecting your data is something that you might have to (or want to) do, on occasion. Why? Well, one example might be if you want to measure the distance of a line object, or the distance between two polygons. This can be done far more easily in a projected coordinate system like British National Grid (where the units are measured in metres) than it can a geographic coordinate system such as WGS84 (where the units are degrees). For generating maps in packages like leaflet, your maps will also need to be in WGS84, rather than British National Grid. So once your data has a coordinates system to work with, we can re-project or transform to anything we like. The most commonly used is the global latitude and longitude system (WGS84). With SP objects, this is carried out using the spTransform() function: BoroughMapSPWGS84 &lt;-spTransform(BoroughMapSP, CRS(&quot;+proj=longlat +datum=WGS84&quot;)) print(BoroughMapSPWGS84) ## class : SpatialPolygonsDataFrame ## features : 33 ## extent : -0.5103751, 0.3340155, 51.28676, 51.69187 (xmin, xmax, ymin, ymax) ## crs : +proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0 ## variables : 7 ## names : NAME, GSS_CODE, HECTARES, NONLD_AREA, ONS_INNER, SUB_2009, SUB_2006 ## min values : Barking and Dagenham, E09000001, 314.942, 0, F, NA, NA ## max values : Westminster, E09000033, 15013.487, 370.619, T, NA, NA #transform it back again: BoroughMapSPBNG &lt;-spTransform(BoroughMapSP, CRS(UKBNG)) print(BoroughMapSPBNG) ## class : SpatialPolygonsDataFrame ## features : 33 ## extent : 503568.2, 561957.5, 155850.8, 200933.9 (xmin, xmax, ymin, ymax) ## crs : +init=epsg:27700 +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +datum=OSGB36 +units=m +no_defs +ellps=airy +towgs84=446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894 ## variables : 7 ## names : NAME, GSS_CODE, HECTARES, NONLD_AREA, ONS_INNER, SUB_2009, SUB_2006 ## min values : Barking and Dagenham, E09000001, 314.942, 0, F, NA, NA ## max values : Westminster, E09000033, 15013.487, 370.619, T, NA, NA #You may want to create a similar variable for WGS84 latlong &lt;- &quot;+init=epsg:4326&quot; And for SF objects it’s carried out using st_transform: BoroughMapSFWGS84 &lt;- st_transform(BoroughMapSF, 4326) print(BoroughMapSFWGS84) ## Simple feature collection with 33 features and 7 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: -0.5103751 ymin: 51.28676 xmax: 0.3340156 ymax: 51.69187 ## epsg (SRID): 4326 ## proj4string: +proj=longlat +datum=WGS84 +no_defs ## First 10 features: ## NAME GSS_CODE HECTARES NONLD_AREA ONS_INNER SUB_2009 ## 1 Kingston upon Thames E09000021 3726.117 0.000 F &lt;NA&gt; ## 2 Croydon E09000008 8649.441 0.000 F &lt;NA&gt; ## 3 Bromley E09000006 15013.487 0.000 F &lt;NA&gt; ## 4 Hounslow E09000018 5658.541 60.755 F &lt;NA&gt; ## 5 Ealing E09000009 5554.428 0.000 F &lt;NA&gt; ## 6 Havering E09000016 11445.735 210.763 F &lt;NA&gt; ## 7 Hillingdon E09000017 11570.063 0.000 F &lt;NA&gt; ## 8 Harrow E09000015 5046.330 0.000 F &lt;NA&gt; ## 9 Brent E09000005 4323.270 0.000 F &lt;NA&gt; ## 10 Barnet E09000003 8674.837 0.000 F &lt;NA&gt; ## SUB_2006 geometry ## 1 &lt;NA&gt; MULTIPOLYGON (((-0.330679 5... ## 2 &lt;NA&gt; MULTIPOLYGON (((-0.0640212 ... ## 3 &lt;NA&gt; MULTIPOLYGON (((0.01213098 ... ## 4 &lt;NA&gt; MULTIPOLYGON (((-0.2445624 ... ## 5 &lt;NA&gt; MULTIPOLYGON (((-0.4118326 ... ## 6 &lt;NA&gt; MULTIPOLYGON (((0.1586929 5... ## 7 &lt;NA&gt; MULTIPOLYGON (((-0.4040719 ... ## 8 &lt;NA&gt; MULTIPOLYGON (((-0.4040719 ... ## 9 &lt;NA&gt; MULTIPOLYGON (((-0.1965687 ... ## 10 &lt;NA&gt; MULTIPOLYGON (((-0.1998964 ... In the SF object, you can compare the values in the geometry column with those in the original file to look at how they have changed… 2.4.2 Maps with extra features Now we can re-project our data, it frees us up to bring in, for example, different base maps and other stuff, a bit like tmap. #install.packages(&quot;ggmap&quot;) library(ggmap) BoroughDataMap &lt;- append_data(BoroughMapSFWGS84,LondonData, key.shp = &quot;GSS_CODE&quot;, key.data = &quot;New.code&quot;, ignore.duplicates = TRUE) londonbbox1 &lt;- c(left = -0.5103766, bottom = 51.28676, right = 0.3340146, top = 51.69187) londonbbox2 &lt;- as.vector(st_bbox(BoroughMapSFWGS84)) #this bit of code uses the box we specified and gets map tiles from Stamen Maps (http://maps.stamen.com/#terrain/12/37.7706/-122.3782) # try changing the maptype to watercolor map &lt;- get_stamenmap(londonbbox2, zoom = 10, maptype = &quot;toner-lite&quot;) ggmap(map) + geom_sf(mapping = aes(geometry=geometry, fill=Median.House.Price...U.00A3.....2014),data = BoroughDataMap, inherit.aes = FALSE,alpha=0.7)+theme_minimal()+palette1+labels 2.4.3 Extension 2.4.3.1 Faceted plots One of the nice features of ggplot2 is its faceting function which allows you to lay out subsets of your data in different panels of a grid. See if you can create a faceted grid of London maps like the one shown below. To do this, you will need to go through several stages: You will need to subset your Borough_geom data frame so that it only contains data on the same scale (you have a number of columns that show percentages, for example) – you can show facets on different scales, but we will leave this for the time being. You will also need to make sure your subset includes a few columns of key ID information data at the beginning – e.g. ID and geometry. You will then need to use the reshape2 package to reformat your data using the melt() function, with an argument to specify the columns where your ID data ends (all columns afterwards containing data you want to plot). A call something like: #warning, this is messy, but it sort-of works... library(reshape2) ## ## Attaching package: &#39;reshape2&#39; ## The following object is masked from &#39;package:tidyr&#39;: ## ## smiths library(dplyr) #use melt to bung all of the variables into a single column on top of each other, but leave out the geometry column or it will throw an error. Make sure you know which coloumn holds the geometry.I&#39;m only going to select 10 coloumns of data here (measure.vars=10:20). borough_melt &lt;- melt(BoroughDataMap,id.vars = 1:9, measure.vars = 10:20) #have a look at borough_melt now - in this circumstance i find the best way is to click on the data in the enviroment window (top right), what do you notice? #now join the geometry column back on - you will have to join it along with all of the data again. borough_melt &lt;- left_join(borough_melt,BoroughDataMap,by = c(&quot;GSS_CODE&quot; = &quot;GSS_CODE&quot;)) #here i&#39;m removing everything except the variable coloumn, values and the geometry inforamtion borough_melt &lt;- borough_melt[,c(10:11,84)] library(tmap) library(sf) library(maptools) tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting borough_melt &lt;- st_as_sf(borough_melt) qtm(borough_melt, fill = &quot;value&quot;, by = &quot;variable&quot;) or, indeed, in ggplot2 like this: ggplot()+geom_sf(mapping = aes(geometry=geometry, fill=value),data = borough_melt)+facet_wrap(~variable) 2.4.3.2 Interactive web maps So we created an interactive map with tmap earlier and that was pretty cool, but if we want to do even more mind-blowing stuff later on in the course, we will need to get our heads around how to do interactive maps using leaflet. Leaflet is a Java Script library for producing interactive web maps, and some enterprising coders over at RStudio have produced a package for allowing you to create your own Leaflet maps. All of the documentation for the R Leaflet package can be found here: https://rstudio.github.io/leaflet/ library(leaflet) library(sf) library(sp) library(magrittr) ## ## Attaching package: &#39;magrittr&#39; ## The following object is masked from &#39;package:ggmap&#39;: ## ## inset ## The following object is masked from &#39;package:purrr&#39;: ## ## set_names ## The following object is masked from &#39;package:tidyr&#39;: ## ## extract library(classInt) 2.4.3.2.1 Generating a colour ramp and palette Before we create a leaflet map, we need to specify what the breaks in our data are going to be… colours&lt;- brewer.pal(5, &quot;Blues&quot;) breaks&lt;-classIntervals(BoroughDataMap$Claimant.Rate.of.Housing.Benefit..2015., n=5, style=&quot;jenks&quot;) graphics::plot(breaks, pal=colours) So we have now created a breaks object which uses the jenks natural breaks algorithm to divide up our variable into 5 classes. You will notice that breaks is a list of 2 objects. We want only the brks bit which contains the values for the breaks summary(breaks) ## Length Class Mode ## var 33 -none- numeric ## brks 6 -none- numeric breaks &lt;- as.numeric(breaks$brks) Now we can create out leaflet interactive map. Here you will see that I am using different syntax to that which has gone before. The %&gt;% (pipe) operator is part of the magrittr package - https://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html. magrittr is an entirely new way of thinking about R syntax. Read up on it if you wish, but for now it is useful to think of the pipe operator as simply meaning “then”. Do this THEN do this THEN do that. #create a new sp object from the earlier sf object with all of our data in THEN Transform it to WGS84 THEN convert it to SP. BoroughDataMapSP &lt;- BoroughDataMap %&gt;% st_transform(crs = 4326) %&gt;% as(&quot;Spatial&quot;) #create a colour palette using colorBin colour mapping pal &lt;- colorBin(palette = &quot;YlOrRd&quot;, domain = BoroughDataMapSP$Claimant.Rate.of.Housing.Benefit..2015., #create bins using the breaks object from earlier bins = breaks) # now, add some polygons colour them using your colour palette, #overlay the, on top of a nice backdrop and add a legend. Note the #use of the magrittr pipe operator (%&gt;%) – check the documentation #to understand how this is working… leaflet(BoroughDataMapSP) %&gt;% addPolygons(stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5, color = ~pal(Claimant.Rate.of.Housing.Benefit..2015.), popup = ~NAME ) %&gt;% addProviderTiles(&quot;CartoDB.DarkMatter&quot;) %&gt;% addLegend(&quot;bottomright&quot;, pal= pal, values = ~Claimant.Rate.of.Housing.Benefit..2015., title = &quot;Housing Benefit Claimant Rate&quot;, labFormat = labelFormat(prefix = &quot;Per 1,000 people &quot;), opacity = 1 ) "],
["git-github-and-rmarkdown.html", "Chapter 3 Git, GitHub and RMarkdown 3.1 Learning outcomes 3.2 Introduction 3.3 Set up your GitHub 3.4 Using RStudio with Git 3.5 Using Git outside RStudio 3.6 Push to Github 3.7 Pull from GitHub 3.8 Troubleshooting 3.9 Fork a repository 3.10 Branches 3.11 RMarkdown 3.12 Adding references 3.13 Further Reading", " Chapter 3 Git, GitHub and RMarkdown 3.1 Learning outcomes By the end of this practical you should be able to: Explain the use of and differences between Git and GitHub Create reproduciable and open R code Produce RMarkdown documents that explain code or analysis 3.2 Introduction In this practical you will learn how to produce work that is open, reproducible, shareable and portable using RStudio, RMarkdown, Git and GitHub. As more and more researchers and organisations publish assocaited code with their manusripts or documents it’s very imporant to become adept at using these tools. You will be able to use the information contained in this guide to prepare the submission for Part 1 of the assessment for this course. The tools you will use are: RStudio is a graphical user interface (that you should already be familiar with) - it contains a number of features which make it excellent for authoring reproducible and open geographic data science work. RMarkdown is a version of the Markdown markup language which enables plain text to be formatted to contain links to data, code to run, text to explain what you a producing and metadata to tell your software what kinds of outputs to generate from your markdown code. For more information on RMarkdown, visit here. Git is a software version control system which allows you to keep track of the code you produce and the changes that you or others make to it. GitHub is an online repository that allows anyone to view the code you have produced (in whatever language you choose to program in) and use/scrutinise/contribute to/comment on it. 3.3 Set up your GitHub If you are working on your own computer, you will first need to install git - https://git-scm.com/ - if you are working on the UCL Remote Desktop, you won’t need to do this as it is already installed for you. Go to http://github.com and install github (if working on your own computer). Create an account and create a new repository (call it anything you like - ‘gis_code’ or something similar), making sure it is public and you check the box that says ‘initialise new repository with a README’ - click ‘create repository’ at the bottom Your new repository (‘repo’) will be created and this is where you will be able to store your code online. You will notice that a README.md markdown file has also been created. This can be edited to tell people what they are likely to find in this repository. Now you have created your repo online, you need to ‘clone’ it so that there is an identical copy of it in a local folder on your computer. There are a couple of ways of doing this, but the easy one is to use the GUI that comes packaged with your git installation. The first thing you need to do is copy the Clone URL for your repo from the github website — click the green button in your repo for ‘Clone or Download’ and copy the link: Now in the windows start menu, go to Git &gt; GUI Select ‘Clone Existing Repository’ and paste the link from your GitHub account into the top box and the local directory that you want to create to store your repo in the bottom box (note, you will need to add a name for a new folder, once you have selected an existing directory, don’t create a new folder in windows explorer you have to specify it in the file path). After a few moments, you should now be able to view a copy of your GitHub repo on your local machine. This is where you will be able to store all of your code and some other files for your reproducible research. 3.4 Using RStudio with Git Now, as I’ve mentioned before, RStudio is totally bad-ass. Not only does it make R fun to use, but the lovely people who created it also built in support for things like git! For a full and excellent tutorial on using Git with R Studio, watch this webinar: https://www.rstudio.com/resources/webinars/rstudio-essentials-webinar-series-managing-part-2/ If you don’t want to watch the vid, I’ll do a quick summary below. So, to use git, first you need to enable it in RStudio: At the time of writing, because of the way that RStudio has been installed on the UCL Remote Desktop, git integration does not work. As such, if you are working on the remote desktop, DO NOT follow instructions 9 to 19 below, jump straight to instruction 20. If you are working on your own computer then fine, carry on. Open RStudio. In RStudio Tools &gt; Global Options, under ‘Git/SVN’ check the box to allow version control and locate the folder on your computer where the git.exe file is located. Allow Version Control for new Projects and navigate to where the git.exe file is on your computer. Click OK. Now in RStudio, you should create a new project in an existing directory - File &gt; New Project &gt; Existing directory - choose your new git repository as your new project folder. You should not see a git tab in the environment window of RStudio (top right). Note You could also link your Git directly from RStudio following: File &gt; New Project &gt; Version control &gt; Git. But carry on using these insturctions for now. Open a new R Notebook in RStudio: File &gt; New File R Notebook Type some stuff (anything so that’s it’s not a blank empty file) at the top of the file and save it. You should see the files appear under the Git tab As well as saving, which saves a copy to our local directory, we will also ‘commit’ or create a save point for our work on git. To do this, you should click the ‘Git’ icon and up will pop a menu like the one below: You can also click the Git tab that will have appeared in the top-right window of RStudio. Up will then pop another window that looks a little like the one below: Stage the changes, add a commit message so you can monitor the changes you make, then click commit Make some more changes to your file and save it. Click comitt again then in the review changes box you will be able to see what has changed within your file. Add a comitt message and click commit: 3.5 Using Git outside RStudio Sometimes RStudio Git can be a bit temperamental. For example, when staging the files they can take some time to appear with the ticked box (I think this is because we are working from the Network). A way around this in RStudio is to click the commit button, select to stage all the files, wait a few seconds then close the review changes box and commit from the buttons in the Git tab in the environment quadrant. Alternatively if you would like to use Git but you’re working on the UCL Remote Desktop or you are experiening other problems with getting git working in RStudio, fear not, you can just use your raw Git installation. In the Start Menu, open the git GUI. Start &gt; Git &gt; Git GUI. You should open the existing repository that you have just created. Whenever you have made some changes to your files in your cloned repo, you can use git to review the changes and ‘Commit’ (save) them and then ‘Push’ them up to your master repository on GitHub. To review and commit your changes, in the commit menu, simply: scan for changes stage them ready for committing commit the changes push the changes to your GitHub repo 3.6 Push to Github Now we can push our changes to github using the up arrow either in the RStudio git tab (envrionment quadrant), or from the review changes box (opens when you click commit). To do this, first make sure you have committed any changes to your local cloned repo and then click the ‘Push’ button to whizz your code up to your master GitHub repo — you will probably be prompted to enter your github username and password to enable this… But….if the push button is greyed out go to the section Greyed out push button 3.7 Pull from GitHub Pull will take any changes to the global repo and bring them into your local repo. Go to your example GitHub repo (online) and click on your test file &gt; edit this file. Add a line of code or a comment, preview the changes then commit directly to the master branch. Now in RStudio click the down arrow (Pull) request. Your file should update in RStudio. If you were to update your file on GitHub and your local one in RStudio seperately you would receive an error message in RStudio when you attempted to commit. 3.8 Troubleshooting 3.8.1 Were you challenged for your password? As of January 2019 it is possible that Git will use a credential helper provided by the operating system. So you should be asked for your GitHub username and password only once. As I am already logged into mine and I started using GitHub a while ago i’m not exactly sure when you will be asked for you details. You can however set your usename and email manually using the git prompt. Go Tools &gt; Shell and enter: git config --global user.name &#39;yourGitHubUsername&#39; git config --global user.email &#39;name@provider.com&#39; These only need to be set once. 3.8.2 Greyed out push button Is your push button greyed out? Mine was… Fear not…. First, let’s check your local repostiority (Git) is connected to a remote one (GitHub). Open the Shell again (Tools &gt; Shell) and enter: git remote -v ## output origin https://github.com/andrewmaclachlan/example.git (fetch) origin https://github.com/andrewmaclachlan/example.git (push) The fetch and push should be your repository on GitHub. If you need to set the remote repo use: git remote add origin https://github.com/andrewmaclachlanc/myrepo.git Replace my name and myrepo with your account and repo Was it setup correctly ? Yes… Then check the current branch in RStudio (and Git) is tracking a branch on the remote repo — mine wasn’t. git branch -vv ## output master 3abe929 [origin/master] test3 Origin/master shows that the local master is tracking the origin/master on the remote repo. If you can’t see origin/master then set it using: git push --set-upstream origin master For more trouble shooting on Git and GitHub have a look at the book Happy Git and GitHub for the useR: https://happygitwithr.com/rstudio-git-github.html 3.9 Fork a repository A Fork in github is a copy of someone elses repository. You could use it as a base starting point for your project or to make a fix and then submit a pull request to the original owner who would then pull your changes to their repository. You can fork a github example repository from: https://github.com/octocat/Spoon-Knife Once you fork it, you should see it in your repositories 3.10 Branches Each repository you make in git has a default branch but you can create new branches to isolate development of specific areas of work without affecting other branches — like a test envrionment. Go to the test repository you just forked on github. Click the branch drop down and type in the name for a new branch: Now click on the README.md file &gt; edit this file Add some changes, preview them and complete the commit changes box at the bottom of the screen. Here, we’re going to commit directly to the new branch. We could have made this changes to the master branch and then made a new branch for them at this stage. Commit the changes. Go to the home page of our example branch (click the branch down arrow and select your example branch). You’ll see that our example branch is now 1 commit ahead of the master. Now let’s create a pull reqest to the master branch. It you had modified someone elses code, then you would send a reqest to them to pull in the changes. Here we are doing a pull request for ourselves — from our example branch to our master. Click New pull request. At the top you will see the branches that are being compared — the base defaults to githubs example repository, change it to yours. Now scroll down and you will see the comaparison of between the two branches. Click create pull request. Select squash and merge &gt; confirm squash and merge. This means that all our commits on the exmaple branch and squashed into one, as we only have one it doesn’t matter but could be useful in future. Go back to your master branch repositry and you should see the changes from the example branch have been merged. 3.10.1 Health warning To avoid merge conflicts be careful with your commits, pushes and pulls. Think about what you are doing each time. GitHub help pages are quite comprehensive..https://help.github.com/en/articles/resolving-a-merge-conflict-on-github 3.11 RMarkdown OK, so now you have set everything up so that you can become a reproducable research ninja! All that remains is to do some reproducable research! For the definitive guide on R Markdown, please read R Markdown: The Definitive Guide — obviously! It will tell you everything you need to know, far beyond what I am telling you here. There is also an excellent guide on the R Studio website -https://rmarkdown.rstudio.com/lesson-1.html And a quick cheatsheet here: https://github.com/rstudio/cheatsheets/raw/master/rmarkdown-2.0.pdf And an older one here: http://www.rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf One of the awesome things about R Markdown is it can be converted into a range of different formats — html for webpages, word documents, PDFs, blogs, books — virtually everything! Now, earlier on in this exercise, I got you to open a new R Notebook or R Markdown file. They are both R Markdown documents, the notebook originally let you run code chunks that could be exectued indpednetly, however you can also now do this if you select a markdown file. ….Add Rmarkdown, making a website then bookdown as advanced section. Go back to the notebook you created earlier in step 11. We are now going to insert some code from the practical last week that i’ve tweaked a bit and run it. In RStudio, you can either select Code &gt; Insert Chunk or you can Click the ‘Insert’ button and insert an R Chunk A box will appear and in this box, you will be able to enter and run your R code. Try pasting in: library(plotly) ## Warning: package &#39;plotly&#39; was built under R version 3.6.1 ## Loading required package: ggplot2 ## ## Attaching package: &#39;plotly&#39; ## The following object is masked from &#39;package:ggplot2&#39;: ## ## last_plot ## The following object is masked from &#39;package:stats&#39;: ## ## filter ## The following object is masked from &#39;package:graphics&#39;: ## ## layout library(reshape2) library(raster) ## Loading required package: sp ## ## Attaching package: &#39;raster&#39; ## The following object is masked from &#39;package:plotly&#39;: ## ## select library(weathermetrics) GB_auto &lt;- getData(&#39;GADM&#39;, country=&quot;GBR&quot;, level=0) GBclim &lt;- getData(&quot;worldclim&quot;, res=5, var=&quot;tmean&quot;) month &lt;- c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;) names(GBclim) &lt;- month GBtemp &lt;- crop(GBclim, GB_auto) exactGB &lt;- mask(GBtemp, GB_auto) #WorldClim data has a scale factor of 10! exactGB &lt;- exactGB/10 alldf=as.data.frame(exactGB) squishdata &lt;- melt(alldf, measure.vars=names(alldf)) # split the data for plotly based on month jan&lt;-subset(squishdata, variable==&quot;Jan&quot;, na.rm=TRUE) jun&lt;-subset(squishdata, variable==&quot;Jun&quot;, na.rm=TRUE) # give axis titles x &lt;- list (title = &quot;Temperature&quot;) y &lt;- list (title = &quot;Frequency&quot;) # set the bin width xbinsno&lt;-list(start=-5, end=20, size = 2.5) # plot the histogram calling all the variables we just set ihist&lt;-plot_ly(alpha = 0.6) %&gt;% add_histogram(x = jan$value, xbins=xbinsno, name=&quot;January&quot;) %&gt;% add_histogram(x = jun$value, xbins=xbinsno, name=&quot;June&quot;) %&gt;% layout(barmode = &quot;overlay&quot;, xaxis=x, yaxis=y) ihist ## Warning: Ignoring 21031 observations ## Warning: Ignoring 21031 observations When including code chunks in your work, there are various options that allow you to do things like include the code, but not run it: display the output but not the code, hide warnings etc. Most of these can be input automatically by clicking the cog icon in the top-right of the chunk, or you can specify them in the code header of the chunk…if you toggle the buttons you’ll see the code change in the chunk ‘header’. Various other options and tips can be found in the full R Markdown guide on RStudio here: https://rmarkdown.rstudio.com/lesson-1.html and in this the cheatsheets linked to above. 3.12 Adding references This practical will focus on Mendeley, but there are guides online if you use other reference managers. 3.12.1 Set up Mendeley You need to get Mendeley to produce a BibTeX file. Open Mendeley &gt; Tools &gt; Options &gt; BibTex Select Escape LaTex special characters, enable BibTex syncing and Create a BibTex file for your whole library or per group. Select to save the BibTeX file in the same folder as your R project, otherwise R won’t be able to find it Warning Whilst we’ve excluded the special characters if they happen to be in some of the fields within Mendeley (e.g. abstracts) this will throw an error This method will auto sync your references to the BibTex file, which you can then load in R. 3.12.2 Add refereces into R In your document add the following to the YAML header (this is what we call the top of any RMarkdown header, enclosed by —) I’ve added a few extra bits…these are pretty self-explanatory (e.g table of contents, numbered sections) but have a play around. --- title: &quot;R Notebook&quot; output: html_document: number_sections: yes theme: yeti highlight: textmate toc: yes toc_float: collapsed: no smooth_scroll: yes editor_options: chunk_output_type: inline bibliography: library.bib --- Now to cite someone just use: [@MicheleAcuto2016; @McPherson2016] Note that the name i’ve used (e.g. McPherson2016) is what Mendeley provided as the citation key for me (see the details about every document you store to find it). The complete bibliography will be placed in the last section, to add a new section to the markdown document just use # and then a space (e.g. # Last section). 3.12.3 References using citr If you don’t want to type the code above you can also add references to R using citr package… library(citr) In the ‘Addins’ menu near the top of RStudio, you should (once RStudio has been restarted) have a citr option for ‘Insert citations’ and including them in your work. 3.12.4 Knitting your output Once you have incorporated some text and code into a test .Rmd document, you should now be able to knit it into a format of your choice. Information to help format your knitted file is contained in the YAML header at the top. In here, you can add things like tables of contents, apply specific themes, etc. For a selection of nice themes, see here: http://www.datadreaming.org/post/r-markdown-theme-gallery/ For things like adding Tables of Contents, tabbed sections (in HTML), figure and table parameters: https://bookdown.org/yihui/rmarkdown/html-document.html If you have selected an R Markdown Notebook, in the menu bar at the top of the page, you should see a ‘Preview’ button. If you click this, your .Rmd file will be knitted automatically into an interactive html document - try it! If you click the small arrow next to the preview button, a menu will appear giving you the option to knit into a selection of other formats, including PDF and Word. Try those too… 3.13 Further Reading Since starting this little guide, I have come across this amazing book on using R and GitHub, by Jenny Bryan and Jim Hester. It’s brilliant - taught me things like how to avoid entering user credentials every time I push to my GitHub repo (Ch 11) - get involved! http://happygitwithr.com/ "],
["geocomputation-and-making-cool-maps.html", "Chapter 4 Geocomputation and making cool maps 4.1 Learning outcomes 4.2 Geocomputation", " Chapter 4 Geocomputation and making cool maps 4.1 Learning outcomes By the end of this practical you should be able to: t 4.2 Geocomputation 4.2.1 General ggplot2 maps 4.2.2 Bivaraite chloropleth maps 4.2.3 Rayshader 4.2.4 Shiny "],
["an-introduction-to-analysing-spatial-patterns.html", "Chapter 5 An Introduction to Analysing Spatial Patterns 5.1 Point Pattern Analysis 5.2 Analysing Spatial Autocorrelation with Moran’s I, LISA and friends", " Chapter 5 An Introduction to Analysing Spatial Patterns In this practical you will learn how to begin to analyse patterns in spatial data. Using data you are already familiar with, in the first part of the practical, you will explore some techniques for analysing patterns of point data in R. Then, in the second part of the practial, you will explore spatial autocorrelation using ArcGIS. 5.1 Point Pattern Analysis In this analysis we will analyse the patterns of Blue Plaques you downloaded from http://openplaques.org/ in the Week 5 practial. Normally we could download the XML directly from the Web using a package like xml, but the XML feeds from OpenPlaques are a little flaky, so we’ll read in the shapefile for Blue Plaques for London we created in week 5. The question we want to answer is: “For any given London Borough, are the Blue Plaques within that borough distributed randomly or do they exhibit some kind of dispersed or clustered pattern?” To answer this question, we will make use of some of the Point Pattern Analysis functions found in the spatstat package. #first library a few packages that we will use during the practical #note you may need to install them first... library(spatstat) library(sp) library(rgeos) library(maptools) library(GISTools) library(tmap) library(sf) library(geojsonio) library(tmaptools) 5.1.1 Setting up Your Data Now, assuming that you’ve got a copy of your London Boroughs shapefile (from week 1) in your new week 6 folder, along with a shapefile of your Blue Plaques; read in the data… ##First, get the London Borough Boundaries EW &lt;- geojson_read(&quot;http://geoportal.statistics.gov.uk/datasets/8edafbe3276d4b56aec60991cbddda50_2.geojson&quot;, what = &quot;sp&quot;) Pull out london using grep and the regex wildcard for’start of the string’ (^) to to look for the bit of the district code that relates to London (E09) from the ‘lad15cd’ column in the data slot of our spatial polygons dataframe BoroughMap &lt;- EW[grep(&quot;^E09&quot;,EW@data$lad15cd),] #plot it using the base plot function qtm(BoroughMap) summary(BoroughMap) ## Object of class SpatialPolygonsDataFrame ## Coordinates: ## min max ## x -0.510277 0.3340243 ## y 51.286759 51.6918756 ## Is projected: FALSE ## proj4string : ## [+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0] ## Data attributes: ## lad15cd lad15nm lad15nmw objectid ## E09000001: 1 Barking and Dagenham: 1 :33 Min. :294 ## E09000002: 1 Barnet : 1 Abertawe : 0 1st Qu.:302 ## E09000003: 1 Bexley : 1 Blaenau Gwent: 0 Median :310 ## E09000004: 1 Brent : 1 Bro Morgannwg: 0 Mean :310 ## E09000005: 1 Bromley : 1 Caerdydd : 0 3rd Qu.:318 ## E09000006: 1 Camden : 1 Caerffili : 0 Max. :326 ## (Other) :27 (Other) :27 (Other) : 0 ## st_lengthshape st_areashape ## Min. : 8929 Min. : 2897649 ## 1st Qu.:28384 1st Qu.: 26797942 ## Median :37664 Median : 37628571 ## Mean :39255 Mean : 47682317 ## 3rd Qu.:46679 3rd Qu.: 56413925 ## Max. :74641 Max. :150125298 ## BNG = &quot;+init=epsg:27700&quot; BoroughMapBNG &lt;- spTransform(BoroughMap,BNG) ##Now get the location of all Blue Plaques in the City BluePlaques &lt;- geojson_read(&quot;https://s3.eu-west-2.amazonaws.com/openplaques/open-plaques-london-2018-04-08.geojson&quot;, what = &quot;sp&quot;) summary(BluePlaques) ## Object of class SpatialPointsDataFrame ## Coordinates: ## min max ## coords.x1 -0.477 0.21903 ## coords.x2 0.000 51.67830 ## Is projected: FALSE ## proj4string : ## [+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0] ## Number of points: 2812 ## Data attributes: ## id ## Min. : 1.0 ## 1st Qu.: 711.8 ## Median : 6089.0 ## Mean :10622.0 ## 3rd Qu.:10358.2 ## Max. :49190.0 ## ## inscription ## Frank Matcham (1854-1920) theatre architect designed this theatre : 3 ## Charlie Chester MBE : 2 ## Grimâ\\200\\231s Dyke : 2 ## Lillie Langtry 1852-1929 actress lived here : 2 ## &#39;Canons&#39; gate pillars\\r\\nEntrance gate piers to &#39;Canons&#39; from Old Turnpike Road\\r\\nBuilt in 1712 for James Brydges 1673-1744, 1st Duke of Chandos. House demolished 1740 and existing buildings constructed from salvaged materials. Piers refurbished 1998.: 1 ## &#39;Father&#39; Henry Willis 1821-1901 organ builder lived here : 1 ## (Other) :2801 #now set up an EPSG string to help set the projection BNG = &quot;+init=epsg:27700&quot; WGS = &quot;+init=epsg:4326&quot; BluePlaquesBNG &lt;- spTransform(BluePlaques, BNG) summary(BluePlaquesBNG) ## Object of class SpatialPointsDataFrame ## Coordinates: ## min max ## coords.x1 505575.2 622211.7 ## coords.x2 -5527598.3 199509.2 ## Is projected: TRUE ## proj4string : ## [+init=epsg:27700 +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 ## +x_0=400000 +y_0=-100000 +datum=OSGB36 +units=m +no_defs ## +ellps=airy ## +towgs84=446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894] ## Number of points: 2812 ## Data attributes: ## id ## Min. : 1.0 ## 1st Qu.: 711.8 ## Median : 6089.0 ## Mean :10622.0 ## 3rd Qu.:10358.2 ## Max. :49190.0 ## ## inscription ## Frank Matcham (1854-1920) theatre architect designed this theatre : 3 ## Charlie Chester MBE : 2 ## Grimâ\\200\\231s Dyke : 2 ## Lillie Langtry 1852-1929 actress lived here : 2 ## &#39;Canons&#39; gate pillars\\r\\nEntrance gate piers to &#39;Canons&#39; from Old Turnpike Road\\r\\nBuilt in 1712 for James Brydges 1673-1744, 1st Duke of Chandos. House demolished 1740 and existing buildings constructed from salvaged materials. Piers refurbished 1998.: 1 ## &#39;Father&#39; Henry Willis 1821-1901 organ builder lived here : 1 ## (Other) :2801 #plot the blue plaques in the city tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(BoroughMapBNG) + tm_polygons(col = NA, alpha = 0.5) + tm_shape(BluePlaquesBNG) + tm_dots(col = &quot;blue&quot;) Now, you might have noticed that there is at least one Blue Plaque that falls outside of the Borough boundaries. Errant plaques will cause problems with our analysis, so we need to clip the plaques to the boundaries…First we’ll remove any Plaques with the same grid reference as this will cause problems later on in the analysis.. #remove duplicates BluePlaquesBNG &lt;- remove.duplicates(BluePlaquesBNG) Now just select the points inside London - thanks to Robin Lovelace for posting how to do this one, very useful! BluePlaquesSub &lt;- BluePlaquesBNG[BoroughMapBNG,] #check to see that they&#39;ve been removed tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(BoroughMapBNG) + tm_polygons(col = NA, alpha = 0.5) + tm_shape(BluePlaquesSub) + tm_dots(col = &quot;blue&quot;) From this point, we could try and carry out our analysis on the whole of London, but you might be waiting until next week for Ripley’s K to be calculated for this many points. Therefore to speed things up and to enable us to compare areas within London, we will select some individual boroughs. First we need to subset our SpatialPolygonsDataFrame to pull out a borough we are interested in. I’m going to choose Harrow as I know there are few enough points for the analysis to definitely work. If you wish, feel free to choose another borough in London and run the same analysis, but beware that if it happens that there are a lot of blue plaques in your borough, the analysis could fall over!! #extract the borough Borough &lt;- BoroughMapBNG[BoroughMapBNG@data$lad15nm==&quot;Harrow&quot;,] #or as an sf object: BoroughMapBNGSF &lt;- st_as_sf(BoroughMapBNG) BoroughSF &lt;- BoroughMapBNGSF[BoroughMapBNGSF$lad15nm==&quot;Harrow&quot;,] #Check to see that the correct borough has been pulled out tm_shape(Borough) + tm_polygons(col = NA, alpha = 0.5) Next we need to clip our Blue Plaques so that we have a subset of just those that fall within the borough or interest #clip the data to our single borough BluePlaquesSub &lt;- BluePlaquesBNG[Borough,] #check that it&#39;s worked tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(Borough) + tm_polygons(col = NA, alpha = 0.5) + tm_shape(BluePlaquesSub) + tm_dots(col = &quot;blue&quot;) We now have all of our data set up so that we can start the analysis using spatstat. The first thing we need to do is create an observation window for spatstat to carry out its analysis within — we’ll set this to the extent of the Harrow boundary ##now set a window as the borough boundary window &lt;- as.owin(Borough) plot(window) spatstat has its own set of spatial objects that it works with (one of the delights of R is that different packages are written by different people and many have developed their own data types) - it does not work directly with the SpatialPolygonsDataFrames, SpatialPointsDataFrames or sf objects that we are used to. For point pattern analysis, we need to create a point pattern (ppp) object. #create a ppp object BluePlaquesSub.ppp &lt;- ppp(x=BluePlaquesSub@coords[,1],y=BluePlaquesSub@coords[,2],window=window) Try to understand what the different elements in command above is doing. If you are unsure, you can run elements of the code, for example: BluePlaquesSub@coords[,1] ## [1] 514971.1 512466.7 514966.0 517339.4 512215.1 515694.1 512269.5 ## [8] 511792.6 515333.7 518598.3 515370.2 512335.7 511539.4 513371.5 ## [15] 516746.3 515210.7 515093.2 515561.8 514805.8 513053.6 515166.2 ## [22] 513750.4 512508.2 516451.0 514022.4 518187.5 516725.5 513392.3 ## [29] 513008.4 514177.1 515300.0 514183.4 518560.0 512639.2 515491.4 ## [36] 514789.8 519099.9 512346.3 512343.2 Have a look at the new ppp object plot(BluePlaquesSub.ppp,pch=16,cex=0.5, main=&quot;Blue Plaques Harrow&quot;) 5.1.1.1 Summarising your point data - a little aside on Kernel Density Estimation We will explore what Kernel Density Estimation (KDE) is in a couple of week’s, but here we are going to jump the gun a little bit. One way to summarise your point data is to plot the density of your points under a window called a ‘Kernel’. The size and shape of the Kernel affects the density pattern produced (more of this next week), but it is very easy to produce a KDE map from a ppp object using the density function. plot(density(BluePlaquesSub.ppp, sigma = 500)) The sigma value sets the diameter of the Kernel (in the units your map is in - in this case, as we are in British National Grid the units are in metres). Try experimenting with different values of sigma to see how that affects the density estimate. plot(density(BluePlaquesSub.ppp, sigma = 1000)) 5.1.2 Quadrat Analysis So as you saw in the lecture, we are interesting in knowing whether the distribution of points in our study area differs from ‘complete spatial randomness’ - CSR. The most basic test of CSR is a quadrat analysis. We can carry out a simple quadrat analysis on our data using the quadrat count function in spatstat. Note, I wouldn’t recommend doing a quadrat analysis in any real piece of analysis you conduct, but it is useful for starting to understand the Poisson distribution… #First plot the points plot(BluePlaquesSub.ppp,pch=16,cex=0.5, main=&quot;Blue Plaques in Harrow&quot;) #now count the points in that fall in a 6 x 6 grid overlaid across the window plot(quadratcount(BluePlaquesSub.ppp, nx = 6, ny = 6),add=T,col=&quot;red&quot;) In our case here, want to know whether or not there is any kind of spatial patterning associated with the Blue Plaques in areas of London. If you recall from the lecture, this means comparing our observed distribution of points with a statistically likely (Complete Spatial Random) distibution, based on the Poisson distribution. Using the same quadratcount function again (for the same sized grid) we can save the results into a table: #run the quadrat count Qcount&lt;-data.frame(quadratcount(BluePlaquesSub.ppp, nx = 6, ny = 6)) #put the results into a data frame QCountTable &lt;- data.frame(table(Qcount$Freq, exclude=NULL)) #view the data frame QCountTable ## Var1 Freq ## 1 0 12 ## 2 1 8 ## 3 2 4 ## 4 3 1 ## 5 4 2 ## 6 5 1 ## 7 7 1 #we don&#39;t need the last row, so remove it QCountTable &lt;- QCountTable[-nrow(QCountTable),] Check the data type in the first column - if it is factor, we will need to convert it to numeric class(QCountTable[,1]) ## [1] &quot;factor&quot; #oops, looks like it&#39;s a factor, so we need to convert it to numeric vect&lt;- as.numeric(levels(QCountTable[,1])) vect &lt;- vect[1:6] QCountTable[,1] &lt;- vect OK, so we now have a frequency table - next we need to calculate our expected values. The formula for calculating expected probabilities based on the Poisson distribution is: \\[ Pr\\left(X=k\\right)=\\frac{\\lambda^{k}e^{-\\lambda}}{k!} \\] #calculate the total blue plaques (Var * Freq) QCountTable$total &lt;- QCountTable[,1]*QCountTable[,2] #calculate mean sums &lt;- colSums(QCountTable[,-1]) sums ## Freq total ## 28 32 #and now calculate our mean Poisson parameter (lambda) lambda &lt;- sums[2]/sums[1] Calculate expected using the Poisson formula from above — k is the number of blue plaques counted in a square and is found in the first column of our table… QCountTable$Pr &lt;- ((lambda^QCountTable[,1])*exp(-lambda))/factorial(QCountTable[,1]) #now calculate the expected counts and save them to the table QCountTable$Expected &lt;- round(QCountTable$Pr * sums[1],0) QCountTable ## Var1 Freq total Pr Expected ## 1 0 12 0 0.318906557 9 ## 2 1 8 8 0.364464637 10 ## 3 2 4 8 0.208265507 6 ## 4 3 1 3 0.079339241 2 ## 5 4 2 8 0.022668354 1 ## 6 5 1 5 0.005181338 0 #Compare the frequency distributions of the observed and expected point patterns plot(c(1,5),c(0,14), type=&quot;n&quot;, xlab=&quot;Number of Blue Plaques (Red=Observed, Blue=Expected)&quot;, ylab=&quot;Frequency of Occurances&quot;) points(QCountTable$Freq, col=&quot;Red&quot;, type=&quot;o&quot;, lwd=3) points(QCountTable$Expected, col=&quot;Blue&quot;, type=&quot;o&quot;, lwd=3) Comparing the observed and expected frequencies for our quadrat counts, we can observe that they both have higher frequency counts at the lower end - something reminiscent of a Poisson distribution. This could indicate that for this particular set of quadrats, our pattern is close to Complete Spatial Randomness (i.e. no clustering or dispersal of points). But how do we confirm this? To check for sure, we can use the quadrat.test function, built into spatstat. This uses a Chi Squared test to compare the observed and expected frequencies for each quadrat (rather than for quadrat bins, as we have just computed above). If the p-value of our Chi-Squared test is &gt; 0.05, then we can reject a null hyphothesis that says “there is no complete spatial randomness in our data” (we will learn more about what a null-hypothesis is in a couple of weeks, but for the time being, just think about it as the opposite of a hypothesis that says our data exhibit complete spatial randomness). What we need to look for is a value for p &gt; 0.05. If our p-value is &gt; 0.05 then this indicates that we have CSR and there is no pattern in our points. If it is &lt; 0.05, this indicates that we do have clustering in our points. teststats &lt;- quadrat.test(BluePlaquesSub.ppp, nx = 6, ny = 6) teststats ## ## Chi-squared test of CSR using quadrat counts ## Pearson X2 statistic ## ## data: BluePlaquesSub.ppp ## X2 = 37.959, df = 28, p-value = 0.1984 ## alternative hypothesis: two.sided ## ## Quadrats: 29 tiles (irregular windows) plot(BluePlaquesSub.ppp,pch=16,cex=0.5, main=&quot;Blue Plaques in Harrow&quot;) plot(teststats, add=T, col = &quot;red&quot;) So we can see that the indications are there is no spatial patterning for Blue Plaques in Harrow - at least for this particular grid. Note the warning message - some of the observed counts are very small (0) and this may affect the accuracy of the quadrat test. Recall that the Poisson distribution only describes observed occurrances that are counted in integers - where our occurances = 0 (i.e. not observed), this can be an issue. We also know that there are various other problems that might affect our quadrat analysis, such as the modifiable areal unit problem. In the new plot, we can see three figures for each quadrat. The top-left figure is the observed count of points; the top-right is the Poisson expected number of points; the bottom value is the Pearson residual value, or (Observed - Expected) / Sqrt(Expected). 5.1.2.1 Try experimenting… Try running a quadrat analysis for different grid arrangements (2 x 2, 3 x 3, 10 x 10 etc.) - how does this affect your results? 5.1.3 Ripley’s K One way of getting around the limitations of quadrat analysis is to compare the observed distribution of points with the Poisson random model for a whole range of different distance radii. This is what Ripley’s K function computes. We can conduct a Ripley’s K test on our data very simply with the spatstat package using the kest function. K &lt;- Kest(BluePlaquesSub.ppp, correction=&quot;border&quot;) plot(K) The plot for K has a number of elements that are worth explaining. First, the Kpois(r) line in Red is the theoretical value of K for each distance window (r) under a Poisson assumption of Complete Spatial Randomness. The Black line is the estimated values of K accounting for the effects of the edge of the study area. Where the value of K falls above the line, the data appear to be clustered at that distance. Where the value of K is below the line, the data are dispersed. From the graph, we can see that up until distances of around 1300 metres, Blue Plaques appear to be clustered in Harrow, however, at around 1500 m, the distribution appears random and then dispersed between about 1600 and 2100 metres. 5.1.3.1 Alternatives to Ripley’s K There are a number of alternative measures of spatial clustering which can be computed in spatstat such as the G and the L functions - I won’t go into them now, but if you are interested, you should delve into the following references: Bivand, R. S., Pebesma, E. J., &amp; Gómez-Rubio, V. (2008). “Applied spatial data analysis with R.” New York: Springer. Brundson, C., Comber, L., (2015) “An Introduction to R for Spatial Analysis &amp; Mapping”. Sage. https://research.csiro.au/software/wp-content/uploads/sites/6/2015/02/Rspatialcourse_CMIS_PDF-Standard.pdf 5.1.4 Density-based spatial clustering of applications with noise: DBSCAN Quadrat and Ripley’s K analysis are useful exploratory techniques for telling us if we have spatial clusters present in our point data, but they are not able to tell us WHERE in our area of interest the clusters are occurring. To discover this we need to use alternative techniques. One popular technique for discovering clusters in space (be this physical space or variable space) is DBSCAN. For the complete overview of the DBSCAN algorithm, read the original paper by Ester et al. (1996) - http://www.aaai.org/Papers/KDD/1996/KDD96-037.pdf or consult the wikipedia page - https://en.wikipedia.org/wiki/DBSCAN library(raster) library(fpc) library(plyr) library(OpenStreetMap) We will now carry out a DBSCAN analysis of blue plaques in my borough to see if there are any clusters present. #first check the coordinate reference system of the Harrow spatial polygon: crs(Borough) ## CRS arguments: ## +init=epsg:27700 +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 ## +x_0=400000 +y_0=-100000 +datum=OSGB36 +units=m +no_defs ## +ellps=airy ## +towgs84=446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894 DBSCAN requires you to input two parameters: 1. Epsilon - this is the radius within which the algorithm with search for clusters 2. MinPts - this is the minimum number of points that should be considered a cluster Based on the results of the Ripley’s K analysis earlier, we can see that we are getting clustering up to a radius of around 1200m, with the largest bulge in the graph at around 700m. Therefore, 700m is probably a good place to start and we will begin by searching for clusters of at least 4 points… #first extract the points from the spatial points data frame BluePlaquesSubPoints &lt;- data.frame(BluePlaquesSub@coords[,1:2]) #now run the dbscan analysis db &lt;- fpc::dbscan(BluePlaquesSubPoints, eps = 700, MinPts = 4) #now plot the results plot(db, BluePlaquesSubPoints, main = &quot;DBSCAN Output&quot;, frame = F) plot(Borough, add=T) #dbscan::kNNdistplot(BluePlaquesSubPoints, k = 4) So the DBSCAN analysis shows that for these values of eps and MinPts there are three clusters in the area I am analysing. Try varying eps and MinPts to see what difference it makes to the output. No of course the plot above is a little basic and doesn’t look very aesthetically pleasing. As this is R and R is brilliant, we can always produce a much nicer plot by extracting the useful information from the DBSCAN output and use ggplot2 to produce a much cooler map… #our new db object contains lots of info including the cluster each set of point #coordinates belongs to, whether the point is a seed point or a border point etc. #We can get a summary by just calling the object library(ggplot2) Our new db object contains lots of info including the cluster each set of point coordinates belongs to, whether the point is a seed point or a border point etc. We can get a summary by just calling the object db ## dbscan Pts=39 MinPts=4 eps=700 ## 0 1 2 3 4 ## border 15 0 1 3 4 ## seed 0 8 6 1 1 ## total 15 8 7 4 5 If you open up the object in the environment window in RStudio, you will also see the various slots in the object, including cluster db$cluster ## [1] 2 1 2 0 1 0 1 0 2 3 2 1 0 4 0 2 0 0 0 4 2 4 1 0 4 3 0 4 0 0 2 0 3 1 0 ## [36] 0 3 1 1 We can now add this cluster membership info back into our dataframe BluePlaquesSubPoints$cluster &lt;- db$cluster Next we are going to create some convex hull polygons to wrap around the points in our clusters. Use the ddply function in the plyr package to get the convex hull coordinates from the cluster groups in our dataframe chulls &lt;- ddply(BluePlaquesSubPoints, .(cluster), function(df) df[chull(df$coords.x1, df$coords.x2), ]) As 0 isn’t actually a cluster (it’s all points that aren’t in a cluster) drop it from the dataframe chulls &lt;- subset(chulls, cluster&gt;=1) Now create a ggplot2 object from our data dbplot &lt;- ggplot(data=BluePlaquesSubPoints, aes(coords.x1,coords.x2, colour=cluster, fill=cluster)) #add the points in dbplot &lt;- dbplot + geom_point() #now the convex hulls dbplot &lt;- dbplot + geom_polygon(data = chulls, aes(coords.x1,coords.x2, group=cluster), alpha = 0.5) #now plot, setting the coordinates to scale correctly and as a black and white plot #(just for the hell of it)... dbplot + theme_bw() + coord_equal() Now we are getting there, but wouldn’t it be better to add a basemap?! ###add a basemap ##First get the bbox in lat long for Harrow latlong &lt;- &quot;+init=epsg:4326&quot; BoroughWGS &lt;-spTransform(Borough, CRS(latlong)) BoroughWGS@bbox ## min max ## x -0.4040502 -0.2671315 ## y 51.5530624 51.6405356 Now convert the basemap to British National Grid basemap&lt;-openmap(c(51.5530613,-0.4040719),c(51.6405318,-0.2671556), zoom=NULL,&quot;stamen-toner&quot;) #convert the basemap to British National Grid - remember we created the BNG object right at the beginning of the practical - it&#39;s an epsg string... basemap_bng&lt;-openproj(basemap, projection=BNG) Now we can plot our fancy map with the clusters on… autoplot(basemap_bng) + geom_point(data=BluePlaquesSubPoints, aes(coords.x1,coords.x2, colour=cluster, fill=cluster)) + geom_polygon(data = chulls, aes(coords.x1,coords.x2, group=cluster, fill=cluster), alpha = 0.5) This is end end of the point pattern analysis section of the practical. You have been introduced to the basics of Point Pattern Analysis examining the distribution of Blue Plaques in a London Borough. At this point, you may wish to try running similar analyses on different boroughs (or indeed the whole city) and playing with some of the outputs - although you will find that Ripley’s K will fall over very quickly if you try to run the analysis on that many points) This how you might make use of these techniques in another context or with different point data… 5.2 Analysing Spatial Autocorrelation with Moran’s I, LISA and friends Now, at this point you have a choice and at bit like in those Fighting Fantasy (https://en.wikipedia.org/wiki/Fighting_Fantasy) books that I used to read as a kid, you can select either option 1 (which may lead to firey death by dragon) or option 2 (which could lead to a pot of gold)… Option 1. If you’ve had enough of coding and you think you might like to do your coursework in ArcGIS and have a bit more practice with model builder, then you should go over to Moodle and carry out the exercise on the ‘Practical 6 - Part 2’ handout that is on there. This will show you how to analyse spatial autocorrelation in ArcGIS and will give you more practice will model builder. Option 2. If you are a total bad-ass and want to continue with R, then briliant!! Woo hoo!! You can keep following the instuctions below. Have the Arc lot gone? OK great, here’s some more lovely R… In this section we are going to explore patterns of spatially referenced continuous observations using various measures of spatial autocorrelation. Check out the various references in the reading list for more information about these methods. There are also useful links in the helpfile of the spdep package which we will be using here. Before we get any further, let’s get some ward boundaries read in to R - download LondonWardData from Moodle, unzip it and then read it in. #it’s probably projected correctly, but in case it isn’t give it a projection #using the CRS() function in the raster package library(rgdal) ## rgdal: version: 1.4-4, (SVN revision 833) ## Geospatial Data Abstraction Library extensions to R successfully loaded ## Loaded GDAL runtime: GDAL 2.2.3, released 2017/11/20 ## Path to GDAL shared files: C:/Users/ucfnmac/Documents/R/win-library/3.6/rgdal/gdal ## GDAL binary built with GEOS: TRUE ## Loaded PROJ.4 runtime: Rel. 4.9.3, 15 August 2016, [PJ_VERSION: 493] ## Path to PROJ.4 shared files: C:/Users/ucfnmac/Documents/R/win-library/3.6/rgdal/proj ## Linking to sp version: 1.3-1 #read the ward data in LondonWards &lt;- readOGR(&quot;prac6_data/LondonWards.shp&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;C:\\Users\\ucfnmac\\OneDrive - University College London\\Teaching\\CASA0005repo\\prac6_data\\LondonWards.shp&quot;, layer: &quot;LondonWards&quot; ## with 625 features ## It has 77 fields Tt’s probably projected correctly, but in case it isn’t give it a projection using the CRS() function in the raster package proj4string(LondonWards) &lt;- CRS(&quot;+init=epsg:27700&quot;) ## Warning in `proj4string&lt;-`(`*tmp*`, value = new(&quot;CRS&quot;, projargs = &quot;+init=epsg:27700 +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +datum=OSGB36 +units=m +no_defs +ellps=airy +towgs84=446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894&quot;)): A new CRS was assigned to an object with an existing CRS: ## +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +datum=OSGB36 +units=m +no_defs +ellps=airy +towgs84=446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894 ## without reprojecting. ## For reprojection, use function spTransform #have a look to check that everything looks OK.. tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm_shape(LondonWards) + tm_polygons(col = NA, alpha = 0.5) + tm_shape(BluePlaques) + tm_dots(col = &quot;blue&quot;) Ah yes, we might need to lose the blue plaques that fall outside of London summary(BluePlaquesBNG) ## Object of class SpatialPointsDataFrame ## Coordinates: ## min max ## coords.x1 505575.2 622211.7 ## coords.x2 -5527598.3 199509.2 ## Is projected: TRUE ## proj4string : ## [+init=epsg:27700 +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 ## +x_0=400000 +y_0=-100000 +datum=OSGB36 +units=m +no_defs ## +ellps=airy ## +towgs84=446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894] ## Number of points: 2711 ## Data attributes: ## id ## Min. : 1.0 ## 1st Qu.: 698.5 ## Median : 6154.0 ## Mean :10724.9 ## 3rd Qu.:10397.0 ## Max. :49190.0 ## ## inscription ## Frank Matcham (1854-1920) theatre architect designed this theatre : 3 ## Grimâ\\200\\231s Dyke : 2 ## Lillie Langtry 1852-1929 actress lived here : 2 ## &#39;Canons&#39; gate pillars\\r\\nEntrance gate piers to &#39;Canons&#39; from Old Turnpike Road\\r\\nBuilt in 1712 for James Brydges 1673-1744, 1st Duke of Chandos. House demolished 1740 and existing buildings constructed from salvaged materials. Piers refurbished 1998.: 1 ## &#39;Father&#39; Henry Willis 1821-1901 organ builder lived here : 1 ## J. H. Greathead Chief Engineer City and South London Railway. Inventor of the Travelling Shield that made possible the cutting of the tunnels of London&#39;s deep level tube system : 1 ## (Other) :2701 BluePlaquesSub &lt;- BluePlaquesBNG[LondonWards,] tm_shape(LondonWards) + tm_polygons(col = NA, alpha = 0.5) + tm_shape(BluePlaquesSub) + tm_dots(col = &quot;blue&quot;) The measures of spatial autocorrelation that we will be using require continuous observations (counts of blue plaques, average GCSE scores, average incomes etc.) to be spatially referenced (i.e. attached to a spatial unit like a ward or a borough). The file you have already has the various obervations associated with the London Ward data file already attached to it, but let’s continue with our blue plaques example for now. To create a continuous observation from the blue plaques data we need to count all of the blue plaques that fall within each Ward in the City. Luckily, we can do this using the poly.counts function in Chris Brunsdon’s excellent gistools package… (we could also use the over() function in the sp package if we wanted) res &lt;- poly.counts(BluePlaquesSub, LondonWards) #and add this as a column in our spatialPolygonsDataframe LondonWards@data$BluePlaqueCount&lt;-res #as the wards are of different sizes, perhaps best that we calculate a density LondonWards@data$BlueDensity &lt;- LondonWards$BluePlaqueCount/poly.areas(LondonWards) #let&#39;s just check the data to see if the calculations have worked LondonWards@data How about a quick choropleth map to see how we are getting on… tm_shape(LondonWards) + tm_polygons(&quot;BlueDensity&quot;, style=&quot;jenks&quot;, palette=&quot;PuOr&quot;, midpoint=NA, title=&quot;Blue Plaque Density&quot;) So, from the map, it looks as though we might have some clustering of blue plaques in the centre of London so let’s check this with Moran’s I and some other statistics. Before being able to calculate Moran’s I and any similar statistics, we need to first define a \\(W_{ij}\\) spatial weights matrix library(spdep) First calculate the centroids of all Wards in London #First calculate the centroids of all Wards in London coordsW &lt;- coordinates(LondonWards) plot(coordsW) Now we need to generate a spatial weights matrix (remember from the lecture). We’ll start with a simple binary matrix of queen’s case neighbours #create a neighbours list LWard_nb &lt;- poly2nb(LondonWards, queen=T) #plot them plot(LWard_nb, coordinates(coordsW), col=&quot;red&quot;) #add a map underneath plot(LondonWards, add=T) #create a spatial weights object from these weights Lward.lw &lt;- nb2listw(LWard_nb, style=&quot;C&quot;) head(Lward.lw$neighbours) ## [[1]] ## [1] 6 7 10 462 468 482 ## ## [[2]] ## [1] 5 8 9 11 12 13 16 ## ## [[3]] ## [1] 10 11 12 15 480 483 ## ## [[4]] ## [1] 17 281 291 470 473 481 ## ## [[5]] ## [1] 2 9 16 281 283 290 ## ## [[6]] ## [1] 1 7 8 10 11 14 Now we have defined our \\(W_{ij}\\) matrix, we can calculate the Moran’s I and other associated statistics Moran’s I test tells us whether we have clustered values (close to 1) or dispersed values (close to -1), we will calculate for the densities rather than raw values I_LWard_Global_Density &lt;- moran.test(LondonWards@data$BlueDensity, Lward.lw) I_LWard_Global_Density ## ## Moran I test under randomisation ## ## data: LondonWards@data$BlueDensity ## weights: Lward.lw ## ## Moran I statistic standard deviate = 30.211, p-value &lt; 2.2e-16 ## alternative hypothesis: greater ## sample estimates: ## Moran I statistic Expectation Variance ## 0.6726785503 -0.0016025641 0.0004981274 Geary’s C as well..? This tells us whether similar values or dissimilar values are clusering C_LWard_Global_Density &lt;- geary.test(LondonWards@data$BlueDensity, Lward.lw) C_LWard_Global_Density ## ## Geary C test under randomisation ## ## data: LondonWards@data$BlueDensity ## weights: Lward.lw ## ## Geary C statistic standard deviate = 8.3637, p-value &lt; 2.2e-16 ## alternative hypothesis: Expectation greater than statistic ## sample estimates: ## Geary C statistic Expectation Variance ## 0.403108506 1.000000000 0.005093209 Getis Ord General G…? This tells us whether high or low values are clustering. If G &gt; Expected = High values clustering; if G &lt; expected = low values clustering G_LWard_Global_Density &lt;- globalG.test(LondonWards@data$BlueDensity, Lward.lw) G_LWard_Global_Density ## ## Getis-Ord global G statistic ## ## data: LondonWards@data$BlueDensity ## weights: Lward.lw ## ## standard deviate = 29.488, p-value &lt; 2.2e-16 ## alternative hypothesis: greater ## sample estimates: ## Global G statistic Expectation Variance ## 1.123988e-02 1.602564e-03 1.068124e-07 So the global statistics are indicating that we have spatial autocorrelation of Blue Plaques in London: The Moran’s I statistic = 0.51 (remember 1 = clustered, 0 = no pattern, -1 = dispersed) which shows that we have some distinctive clustering The Geary’s C statistic = 0.41 (remember Geary’s C falls between 0 and 2; 1 means no spatial autocorrelation, &lt;1 - positive spatial autocorrelation or similar values clustering, &gt;1 - negative spatial autocorreation or dissimilar values clustering) which shows that similar values are clustering The General G statistic = G &gt; expected, so high values are tending to cluster. We can now also calculate local versions of the Moran’s I statistic (for each Ward) and a Getis Ord \\(G_{i}^{*}\\) statistic to see where we have hot-spots… #use the localmoran function to generate I for each ward in the city I_LWard_Local &lt;- localmoran(LondonWards@data$BluePlaqueCount, Lward.lw) I_LWard_Local_Density &lt;- localmoran(LondonWards@data$BlueDensity, Lward.lw) #what does the output (the localMoran object) look like? head(I_LWard_Local_Density) ## Ii E.Ii Var.Ii Z.Ii Pr(z &gt; 0) ## 0 0.08893069 -0.001632161 0.1585720 0.2274243 0.4100469 ## 1 0.13238172 -0.001904187 0.1847261 0.3124398 0.3773532 ## 2 0.10800337 -0.001632161 0.1585720 0.2753202 0.3915351 ## 3 0.11771065 -0.001632161 0.1585720 0.2996974 0.3822040 ## 4 0.11771065 -0.001632161 0.1585720 0.2996974 0.3822040 ## 5 0.11213389 -0.001632161 0.1585720 0.2856929 0.3875567 There are 5 columns of data. We want to copy some of the columns (the I score (column 1) and the z-score standard deviation (column 4)) back into the LondonWards spatialPolygonsDataframe LondonWards@data$BLocI &lt;- I_LWard_Local[,1] LondonWards@data$BLocIz &lt;- I_LWard_Local[,4] LondonWards@data$BLocIR &lt;- I_LWard_Local_Density[,1] LondonWards@data$BLocIRz &lt;- I_LWard_Local_Density[,4] No we can plot a map of the local Moran’s I outputs… We’ll set the breaks manually based on the rule that data points &gt;2.58 or &lt;-2.58 standard deviations away from the mean are significant at the 99% level (&lt;1% chance that autocorrelation not present); &gt;1.96 - &lt;2.58 or &lt;-1.96 to &gt;-2.58 standard deviations are significant at the 95% level (&lt;5% change that autocorrelation not present). &gt;1.65 = 90% etc. #create a new diverging colour brewer palette and reverse the order using rev so higher values correspond to red breaks1&lt;-c(-1000,-2.58,-1.96,-1.65,1.65,1.96,2.58,1000) Now create a new diverging colour brewer palette and reverse the order using rev so higher values correspond to red MoranColours&lt;- rev(brewer.pal(8, &quot;RdGy&quot;)) Plot on an interactive map tm_shape(LondonWards) + tm_polygons(&quot;BLocIRz&quot;, style=&quot;fixed&quot;, breaks=breaks1, palette=MoranColours, midpoint=NA, title=&quot;Local Moran&#39;s I, Blue Plaques in London&quot;) This map shows some areas in the centre of London that have relatively high scores, indicating areas with lots of blue plaques neighbouring other areas with lots of blue plaques. What about the Getis Ord \\(G_{i}^{*}\\) statisic for hot and cold spots? Gi_LWard_Local_Density &lt;- localG(LondonWards@data$BlueDensity, Lward.lw) Check the help file (?localG) to see what a localG object looks like - it is a bit different from a localMoran object as it only contains just a single value - the z-score (standardised value relating to whether high values or low values are clustering together) And map the outputs… head(Gi_LWard_Local_Density) ## [1] -0.8364891 -0.8720954 -0.7679474 -0.8368497 -0.8368497 -0.7972659 LondonWards@data$BLocGiRz &lt;- Gi_LWard_Local_Density And map the outputs… GIColours&lt;- rev(brewer.pal(8, &quot;RdBu&quot;)) #now plot on an interactive map tm_shape(LondonWards) + tm_polygons(&quot;BLocGiRz&quot;, style=&quot;fixed&quot;, breaks=breaks1, palette=GIColours, midpoint=NA, title=&quot;Gi*, Blue Plaques in London&quot;) The local Moran’s I and \\(G_{i}^{*}\\) statistics for wards clearly show that the density of blue plaques in the centre of the city exhibits strong (and postitive) spatial autocorrelation, but neither of these maps are very interesting. The ArcGIS crew will have been calculating Local Moran’s I and \\(G_{i}^{*}\\) statistics for some of the other variables for the wards of London. Why not try some alternative variables and see what patterns emerge… here I’m going to have a look at Average GSCE scores… #use head to see what other variables are in the data file head(LondonWards@data) ## WD11CD WD11CDO WD11NM WD11NMW ## 0 E05000026 00ABFX Abbey &lt;NA&gt; ## 1 E05000027 00ABFY Alibon &lt;NA&gt; ## 2 E05000028 00ABFZ Becontree &lt;NA&gt; ## 3 E05000029 00ABGA Chadwell Heath &lt;NA&gt; ## 4 E05000030 00ABGB Eastbrook &lt;NA&gt; ## 5 E05000031 00ABGC Eastbury &lt;NA&gt; ## WardName OldCode Wardcode Pop2013 Aged0_15 ## 0 Barking and Dagenham - Abbey 00ABFX E05000026 13650 3450 ## 1 Barking and Dagenham - Alibon 00ABFY E05000027 10400 2700 ## 2 Barking and Dagenham - Becontree 00ABFZ E05000028 12050 3000 ## 3 Barking and Dagenham - Chadwell Heath 00ABGA E05000029 10150 2450 ## 4 Barking and Dagenham - Eastbrook 00ABGB E05000030 10600 2150 ## 5 Barking and Dagenham - Eastbury 00ABGC E05000031 11700 3000 ## Aged16_64 Aged65plus PctAged0_1 PctAged16_ PctAged65p MeanAge201 ## 0 9550 700 25.3 70.0 5.1 29.5 ## 1 6600 1100 26.0 63.5 10.6 33.8 ## 2 8000 1100 24.9 66.4 9.1 33.0 ## 3 6150 1550 24.1 60.6 15.3 36.2 ## 4 6900 1550 20.3 65.1 14.6 37.7 ## 5 7550 1150 25.6 64.5 9.8 33.4 ## MedianAge2 AreaSqKM PopDensity PctBame PctNotBorn PctNoEngli GenFertRat ## 0 29 1.3 10500.0 71.9 57.3 25.7 103 ## 1 33 1.4 7428.6 29.9 24.7 7.9 91 ## 2 32 1.3 9269.2 41.2 30.1 10.5 102 ## 3 34 3.4 2985.3 37.9 24.8 6.5 81 ## 4 36 3.5 3028.6 24.8 19.0 4.5 78 ## 5 32 1.4 8357.1 41.7 32.2 11.9 89 ## MaleLE0509 FemaleLE05 PctYr1Obes PctYr6Obes RateAmbula RatesAmbul ## 0 80.0 82.2 15.423728814 21.467391304 164.6886 0.9352518 ## 1 75.8 80.4 12.5 25.853658537 134.5192 0.7837838 ## 2 78.9 78.9 12.857142857 24.874371859 127.8838 0.7010309 ## 3 79.1 81.0 11.751662971 25.816993464 149.5567 0.6000000 ## 4 77.1 80.6 13.942307692 24.324324324 145.0000 0.6666667 ## 5 78.6 84.6 13.621262458 22.608695652 124.2735 0.4666667 ## RoadKilled InEmployme Employment NoJobs2011 EmpWkAgePo RateNINoFo ## 0 3 5489 58.35016 8900 0.9319372 108.69565 ## 1 4 4214 59.26864 900 0.1363636 31.14754 ## 2 1 4674 57.89669 1200 0.1500000 38.55422 ## 3 2 3916 58.67546 1800 0.2926829 26.27119 ## 4 5 4686 62.84871 4000 0.5797101 18.43972 ## 5 2 4620 58.34070 1100 0.1456954 48.92086 ## MeanHouseP NoProperti NoHousehol PctDetache PctSemiDet PctTerrace ## 0 164000 60 4753 3.9 7.2 22.6 ## 1 173500 73 4045 3.8 18.2 63.8 ## 2 178995 147 4378 4.2 24.7 52.0 ## 3 210000 87 4062 3.8 29.6 32.2 ## 4 203500 84 3977 3.2 32.6 45.5 ## 5 187875 75 4321 5.0 21.0 52.5 ## PctFlatMai PctOwned20 PctSocialR PctPrivate PctCTaxBan PctCTaxB_1 ## 0 66.3 32.7 26.7 38.6 45.77158 56.47341 ## 1 14.2 45.1 36.8 15.9 9.29495 90.75384 ## 2 19.1 46.7 29.4 20.1 11.94346 90.76561 ## 3 34.5 54.0 32.0 12.4 33.28380 66.36949 ## 4 18.4 67.6 20.0 11.2 14.81574 84.93526 ## 5 21.5 44.0 37.4 17.3 18.72262 81.41573 ## PctCTaxB_2 Incapacity IncomeSupp EmpSupport JSAClaiman PctDepChil ## 0 0.10897995 1.570681 3.612565 3.403141 8.737771 28.15789 ## 1 0.07318858 3.257576 6.590909 6.060606 9.473789 35.55556 ## 2 0.09422850 2.312500 4.750000 5.500000 10.234388 32.95775 ## 3 0.44576523 2.682927 5.121951 4.634146 8.342021 28.79310 ## 4 0.54780876 1.956522 3.188406 3.623188 8.293168 24.71698 ## 5 0.04611483 2.450331 5.033113 5.099338 9.463746 30.14286 ## PctHHNoAdu PctLonePar IDRankLond IDPctWorst AvgGCSE201 UnauthAbse ## 0 8.748906 55.31062 166 85.71429 330 1.3 ## 1 12.440191 60.99518 124 100.00000 341 1.3 ## 2 10.731821 51.51057 185 100.00000 346 1.4 ## 3 10.147133 55.23979 96 100.00000 327 1.7 ## 4 6.663236 48.69792 288 100.00000 349 1.0 ## 5 11.118914 52.45902 135 100.00000 339 1.4 ## PctWithNoQ PctLev4Qua CrimeRate1 ViolenceRa RobberyRat TheftAndHa ## 0 16.4 34.5 164.4 35.71429 6.541353 71.35338 ## 1 31.2 16.7 83.9 22.88462 3.365385 23.46154 ## 2 28.0 20.6 85.7 17.73109 2.605042 30.25210 ## 3 29.1 19.5 84.5 18.62069 2.758621 28.57143 ## 4 29.9 18.5 64.9 17.74648 2.159624 18.87324 ## 5 28.9 20.0 75.9 17.87234 3.489362 22.29787 ## CriminalDa DrugsRate1 Deliberate PctOpenSpa CarsPerHH2 AvgPubTran ## 0 11.954887 14.060150 0.6 19.60720 0.5476815 5.7 ## 1 10.000000 6.442308 0.3 22.41290 0.8151599 3.2 ## 2 5.882353 6.302521 0.7 3.03888 0.8702361 2.9 ## 3 10.738916 3.349754 1.1 56.40730 0.9180619 2.2 ## 4 5.915493 4.037559 1.0 51.11650 1.0604579 2.4 ## 5 7.744681 4.765957 1.3 18.10540 0.7827715 2.8 ## PctTTWBike TurnoutMay Shape_Leng Shape_Area ID x y ## 0 0.8016032 25.68894 6244.870 1282926 1 544204 184358 ## 1 1.0204082 20.34793 6353.916 1364441 2 549062 185153 ## 2 1.6474112 22.53821 6341.656 1288085 3 547000 186088 ## 3 1.1746680 25.31881 9603.344 3384198 4 548360 189491 ## 4 1.5578318 24.12147 8987.676 3450578 5 550790 186101 ## 5 1.5151515 21.51488 6829.478 1440028 6 546139 183989 ## BluePlaqueCount BlueDensity BLocI BLocIz BLocIR BLocIRz ## 0 1 7.794681e-07 0.05679283 0.1567154 0.08893069 0.2274243 ## 1 0 0.000000e+00 0.08333988 0.2118224 0.13238172 0.3124398 ## 2 0 0.000000e+00 0.06818055 0.1872611 0.10800337 0.2753202 ## 3 0 0.000000e+00 0.07387441 0.2025339 0.11771065 0.2996974 ## 4 0 0.000000e+00 0.07387441 0.2025339 0.11771065 0.2996974 ## 5 0 0.000000e+00 0.06818055 0.1872611 0.11213389 0.2856929 ## BLocGiRz ## 0 -0.8364891 ## 1 -0.8720954 ## 2 -0.7679474 ## 3 -0.8368497 ## 4 -0.8368497 ## 5 -0.7972659 I_LWard_Local_GCSE &lt;- localmoran(LondonWards@data$AvgGCSE201, Lward.lw) LondonWards@data$GCSE_LocIz &lt;- I_LWard_Local_GCSE[,4] tm_shape(LondonWards) + tm_polygons(&quot;GCSE_LocIz&quot;, style=&quot;fixed&quot;, breaks=breaks1, palette=MoranColours, midpoint=NA, title=&quot;Local Moran&#39;s I, GCSE Scores&quot;) Now the Gi* statistic to look at clusters of high and low scores… Gi_LWard_Local_GCSE &lt;- localG(LondonWards@data$AvgGCSE201, Lward.lw) LondonWards@data$GCSE_LocGiz &lt;- Gi_LWard_Local_GCSE tm_shape(LondonWards) + tm_polygons(&quot;GCSE_LocGiz&quot;, style=&quot;fixed&quot;, breaks=breaks1, palette=GIColours, midpoint=NA, title=&quot;Gi*, GCSE Scores&quot;) So this is the end of the practical. Hopefully you have learned a lot about the different methods we can employ to analyse patterns in spatial data. This practical was deliberately designed as a walk through, but this may have given you ideas about where you could perhaps take these techniques in your coursework if this is something you wanted to explore further with different data or in different contexts. Things to perhaps try as an extension… We have used sp objects in this practical (because I wrote it before sf became the defacto spatial data type in R). Can you convert some of this so it works withsf? Could you atomate any of the functions so that you could quickly produce maps of any of the variables in the LondonWards dataset? Could you get these outputs into a faceted ggplot2 map? "]
]
