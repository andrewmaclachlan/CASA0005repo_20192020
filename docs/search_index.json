[
["online-mapping.html", "Chapter 8 Online mapping 8.1 Learning objectives 8.2 Introduction 8.3 RPubs 8.4 RMarkdown site generator 8.5 Shiny 8.6 Extra", " Chapter 8 Online mapping 8.1 Learning objectives By the end of this practical you should be able to: Create 8.2 Introduction In this practical we are going to explore several ways of publishing your R code and outputs (including interactive plots) online. 8.3 RPubs One of the most straight forward publishing tools is RPubs. It takes an .Rmd and directly uploads it to rpubs.com — all files are publically available on this website. To start with you need to make a free account. Go to: https://rpubs.com/users/new and register Create a new project in RStudio and open a new R Markdown file (File &gt; New File &gt; R Markdown) You’ll see that the file is automatically populated with some information, have a read through it then click the Knit icon (if you remember we covered this in Knitting your output)… Let’s make some changes to your .Rmd. Delete all the text and code except from header inforamtion (that is enclosed by three dashes at the top of the file) Insert a new code chunk (go back to RMarkdown if you need a refresher) and add some code of your choice from either a previous practical or your own work. As it’s a new project you’ll have to either copy the data into your project folder or set the working directory setwd(). If it’s all online data that you’ve loaded directly from the web into R, this shouldn’t be an issue. I’m going to use the interactive map we made in practical 5 (the Advanced interactive map section)..I have copied the…..Here is the code i’ve put in my chunk: library(sf) library(tmap) library(leafpop) library(leaflet) library(tmaptools) library(tidyverse) library(plyr) OSM &lt;- read_shape(&quot;data/gis_osm_pois_a_free_1.shp&quot;,as.sf = TRUE) Londonborough &lt;- read_shape(&quot;data/London_Borough_Excluding_MHW.shp&quot;,as.sf = TRUE) Airbnb &lt;- read_csv(&quot;data/listings.csv&quot;) # plot xy data Airbnb &lt;- st_as_sf(Airbnb, coords = c(&quot;longitude&quot;, &quot;latitude&quot;), crs = 4326) # reproject OSM &lt;- st_transform(OSM, 27700) Airbnb &lt;- st_transform(Airbnb, 27700) # we don&#39;t need to reproject Londonborough, but it # doesn&#39;t have a CRS..you could also use set_crs # it needs to have one for the next step Londonborough&lt;- st_transform(Londonborough, 27700) #select hotels only OSM &lt;- OSM[OSM$fclass == &#39;hotel&#39;,] Airbnb &lt;- Airbnb[Airbnb$room_type == &#39;Entire home/apt&#39; &amp; Airbnb$availability_365==&#39;365&#39;,] # make a function for the join # functions are covered in practical 7 # but see if you can work out what is going on # hint all you have to do is replace data1 and data2 # with the data you want to use Joinfun &lt;- function(data1, data2) { # join OSM and London boroughs joined &lt;- st_join(data1, data2, join = st_within) # count the number of hotels per borough countno &lt;- as.data.frame(count(joined$GSS_CODE)) # join the count back to the borough layer counted &lt;-left_join(data2, countno, by=c(&quot;GSS_CODE&quot;=&quot;x&quot;)) return(counted) } # use the function for hotels Hotels &lt;- Joinfun(OSM, Londonborough) # then for airbnb Airbnb &lt;- Joinfun(Airbnb, Londonborough) # now try to arrange the plots with tmap breaks = c(0, 5, 12, 26, 57, 286) #change the column name from freq for the legend colnames(Hotels)[colnames(Hotels)==&quot;freq&quot;] &lt;- &quot;Accom count&quot; #join data ti&lt;-st_join(Airbnb, Hotels) ti&lt;-st_transform(ti,crs = 4326) #remove the geometry for our pop up boxes to avoid #the geometry field ti2&lt;-ti st_geometry(ti2)&lt;-NULL popairbnb=popupTable(ti2, zcol=c(&quot;NAME.x&quot;, &quot;GSS_CODE.x&quot;, &quot;freq&quot;)) pophotels=popupTable(ti2, zcol=c(&quot;NAME.x&quot;, &quot;GSS_CODE.x&quot;, &quot;Accom count&quot;)) tmap_mode(&quot;view&quot;) # set the colour palettes using our previously defined breaks pal &lt;- colorBin(palette = &quot;YlOrRd&quot;, domain=ti2$freq, bins=breaks) pal2 &lt;- colorBin(palette = &quot;YlOrRd&quot;, domain=ti2$`Accom count`, bins=breaks) map&lt;- leaflet(ti) %&gt;% # add basemap options addTiles(group = &quot;OSM (default)&quot;) %&gt;% addProviderTiles(providers$Stamen.Toner, group = &quot;Toner&quot;) %&gt;% addProviderTiles(providers$Stamen.TonerLite, group = &quot;Toner Lite&quot;) %&gt;% addProviderTiles(providers$CartoDB.Positron, group = &quot;CartoDB&quot;)%&gt;% #add our polygons, linking to the tables we just made addPolygons(color=&quot;white&quot;, weight = 2, opacity = 1, dashArray = &quot;3&quot;, popup = popairbnb, fillOpacity = 0.7, fillColor = ~pal(freq), group = &quot;Airbnb&quot;)%&gt;% addPolygons(fillColor = ~pal(`Accom count`), weight = 2, opacity = 1, color = &quot;white&quot;, dashArray = &quot;3&quot;, popup = pophotels, fillOpacity = 0.7,group = &quot;Hotels&quot;)%&gt;% # add a legend addLegend(pal = pal2, values = ~`Accom count`, group = c(&quot;Airbnb&quot;,&quot;Hotel&quot;), position =&quot;bottomleft&quot;) %&gt;% # specify layers control addLayersControl( baseGroups = c(&quot;OSM (default)&quot;, &quot;Toner&quot;, &quot;Toner Lite&quot;, &quot;CartoDB&quot;), overlayGroups = c(&quot;Airbnb&quot;, &quot;Hotels&quot;), options = layersControlOptions(collapsed = FALSE) ) # plot the map map Add some text at the start of your .Rmd you can include titles and subtitle using # followed by a space, a second level subtitle would be ##, and third ### Save the file, Knitt it to HTML, this should be default and specified in the header — enclosed by three dashes. Once knitted you can easily publish the file to Ppubs using the Publish icon either in the viewer pane or the toolbar area (by run) Now how about adding a few design features…i’ve changed my header section to… --- title: &quot;publishexample&quot; output: html_document: theme: yeti smart: true highlight: textmate toc: true number_sections: true toc_float: collapsed: false smooth_scroll: true --- Knit and then publish again…you’ll notice a few aesthetic changes To learn more about these go explore: https://bookdown.org/yihui/rmarkdown/html-document.html http://www.datadreaming.org/post/r-markdown-theme-gallery/ https://cran.r-project.org/web/packages/prettydoc/vignettes/architect.html And for more code chunk control.. https://bookdown.org/yihui/rmarkdown/r-code.html https://rmarkdown.rstudio.com/lesson-3.html 8.4 RMarkdown site generator 8.4.1 Set the file structure RPubs are useful but what if you wanted to make a full site with different tabs for introduction, methodology, results and recommedations…one way is to use the RMarkdown site generator hosted on GitHub RMarkdown site generator is useful as it does not require any third-party add ons like blogdown which is reliant on the hugo site generator To make a site you’ll need the following to be within your project: A configuration file with the filename _site.yml A index.Rmd Any other .Rmd files you want to create into pages on the site For the site to work you only require (a) and (b)….but that would be a pretty boring site… In your new project add two new RMarkdown files called: _site.yml index.Rmd In the _site.yml remove all code and add the following name: &quot;Hello world&quot; output_dir: &quot;.&quot; navbar: title: &quot;My example website&quot; left: - text: &quot;Home&quot; href: index.html - text: &quot;About&quot; href: publishexample.html 8.4.2 Link to GitHub There are two ways to do this…. 8.4.2.1 GitHub first This is the ‘easy’ way as you woould repeat the steps in Practical 4 by firstly making a new repository on GitHub then loading a new project in RStudio, linking that to GitHub and copying all your files into your new project from the exisiting one. 8.4.2.2 GitHub last So if you already have a RStudio project…like we do…we can link this to GitHub but the steps are a bit more invovled and there are several ways to acheive it — as with most things in R. Make a Git repo in RStudio. Go to Tools &gt; Project Options &gt; Git/SVN and select Git under Version control system and initialize a new repository, then restart RStudio. The Git tab should appear.. Next we need to make a new repository on GitHub. Go to GitHub, login and make a new repository. Make sure that it is empty with no README.. you should have something similar to this appear: Clone the repository by copying the HTTPS Make one local commit. Under the Git tab &gt; Diff &gt; Stage the files &gt; Add a commit message and click commit Now we need to connect our local repository to the GitHub one. So Under the Git tab you’ll the new brach button (two purple boxes linked to a white box)… Click it &gt; Add Remote. Paste in the URL use the remote name origin and the branch name of master — which you can get from the GitHub Quick setup screen after creating your repo. Check sync the branch with the remote &gt; click create then select overwrite The files will appear on your GitHub repo Next we need to actually build the site…there are a few ways to do this…Next to the Git tab you should see the Build tab, if you can’t then go to Tools &gt; Project Options &gt; Build Tools and select website under Project build tools. Now click Build Website under the build tab Alternatively you write the following in the console rmarkdown::render_site() If you wanted t For more information on hosting your code from RStudio on GitHub check out: https://happygitwithr.com/usage-intro.html 8.5 Shiny 8.6 Extra Bookdown Blogdown "]
]
